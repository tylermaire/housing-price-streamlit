{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNF3PFpMApQo+z6ieGgOkE4",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/tylermaire/housing-price-streamlit/blob/main/Colab_code\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cSUC3iv2zy7P",
        "outputId": "da8c1457-ed2a-40ea-a93b-ee3d977fd38b"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install -U gdown\n",
        "!gdown --id 1tASwRQrSNs9689v-6PY0KcA2qOPiyg03 -O data.csv\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ob2Nb2Xd5c3I",
        "outputId": "3358b27b-1488-48c9-a31d-4cfe1e0e6e32"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: gdown in /usr/local/lib/python3.11/dist-packages (5.2.0)\n",
            "Requirement already satisfied: beautifulsoup4 in /usr/local/lib/python3.11/dist-packages (from gdown) (4.13.4)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.11/dist-packages (from gdown) (3.18.0)\n",
            "Requirement already satisfied: requests[socks] in /usr/local/lib/python3.11/dist-packages (from gdown) (2.32.3)\n",
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.11/dist-packages (from gdown) (4.67.1)\n",
            "Requirement already satisfied: soupsieve>1.2 in /usr/local/lib/python3.11/dist-packages (from beautifulsoup4->gdown) (2.7)\n",
            "Requirement already satisfied: typing-extensions>=4.0.0 in /usr/local/lib/python3.11/dist-packages (from beautifulsoup4->gdown) (4.13.2)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests[socks]->gdown) (3.4.1)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests[socks]->gdown) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests[socks]->gdown) (2.4.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests[socks]->gdown) (2025.4.26)\n",
            "Requirement already satisfied: PySocks!=1.5.7,>=1.5.6 in /usr/local/lib/python3.11/dist-packages (from requests[socks]->gdown) (1.7.1)\n",
            "/usr/local/lib/python3.11/dist-packages/gdown/__main__.py:140: FutureWarning: Option `--id` was deprecated in version 4.3.1 and will be removed in 5.0. You don't need to pass it anymore to use a file ID.\n",
            "  warnings.warn(\n",
            "Downloading...\n",
            "From: https://drive.google.com/uc?id=1tASwRQrSNs9689v-6PY0KcA2qOPiyg03\n",
            "To: /content/data.csv\n",
            "100% 296k/296k [00:00<00:00, 70.9MB/s]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv(\"data.csv\", encoding='utf-16', delimiter='\\t')\n",
        "df.head()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 365
        },
        "id": "jkCZDImFNf4w",
        "outputId": "726380b8-3f73-4916-8d54-d5b881f6b055"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Region Month of Period End Median Sale Price Median Sale Price MoM   \\\n",
              "0   National        January 2012             $159K                  -6.3%   \n",
              "1   National       February 2012             $159K                   0.1%   \n",
              "2   National          March 2012             $170K                   7.3%   \n",
              "3   National          April 2012             $178K                   4.4%   \n",
              "4   National            May 2012             $186K                   4.3%   \n",
              "\n",
              "  Median Sale Price YoY  Homes Sold Homes Sold MoM  Homes Sold YoY   \\\n",
              "0                  -4.3%    275,305          -23.2%            8.4%   \n",
              "1                  -2.2%    303,947           10.4%           13.7%   \n",
              "2                   3.9%    392,698           29.2%            6.8%   \n",
              "3                   6.0%    402,888            2.6%            8.3%   \n",
              "4                   8.2%    461,747           14.6%           16.5%   \n",
              "\n",
              "  New Listings New Listings MoM  New Listings YoY   Inventory Inventory MoM   \\\n",
              "0      487,166             50.6%             -3.0%  2,070,944           0.4%   \n",
              "1      522,763              7.3%              4.9%  2,094,202           1.1%   \n",
              "2      631,772             20.9%             -5.4%  2,135,732           2.0%   \n",
              "3      616,104             -2.5%             -2.6%  2,172,976           1.7%   \n",
              "4      617,189              0.2%             -0.6%  2,180,851           0.4%   \n",
              "\n",
              "   Inventory YoY   Days on Market  Days on Market MoM  Days on Market YoY  \\\n",
              "0          -17.4%              97                   2                  -8   \n",
              "1          -16.8%              97                   0                 -11   \n",
              "2          -16.9%              94                  -4                 -12   \n",
              "3          -17.0%              81                 -12                 -17   \n",
              "4          -17.5%              73                  -9                 -17   \n",
              "\n",
              "  Average Sale To List Average Sale To List MoM  Average Sale To List YoY   \n",
              "0                95.6%                     -0.1%                      0.2%  \n",
              "1                95.8%                      0.2%                      0.3%  \n",
              "2                96.2%                      0.4%                      0.6%  \n",
              "3                96.5%                      0.3%                      0.7%  \n",
              "4                96.8%                      0.3%                      1.0%  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-44bb88da-919b-46e5-9728-5179f3321dcd\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Region</th>\n",
              "      <th>Month of Period End</th>\n",
              "      <th>Median Sale Price</th>\n",
              "      <th>Median Sale Price MoM</th>\n",
              "      <th>Median Sale Price YoY</th>\n",
              "      <th>Homes Sold</th>\n",
              "      <th>Homes Sold MoM</th>\n",
              "      <th>Homes Sold YoY</th>\n",
              "      <th>New Listings</th>\n",
              "      <th>New Listings MoM</th>\n",
              "      <th>New Listings YoY</th>\n",
              "      <th>Inventory</th>\n",
              "      <th>Inventory MoM</th>\n",
              "      <th>Inventory YoY</th>\n",
              "      <th>Days on Market</th>\n",
              "      <th>Days on Market MoM</th>\n",
              "      <th>Days on Market YoY</th>\n",
              "      <th>Average Sale To List</th>\n",
              "      <th>Average Sale To List MoM</th>\n",
              "      <th>Average Sale To List YoY</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>National</td>\n",
              "      <td>January 2012</td>\n",
              "      <td>$159K</td>\n",
              "      <td>-6.3%</td>\n",
              "      <td>-4.3%</td>\n",
              "      <td>275,305</td>\n",
              "      <td>-23.2%</td>\n",
              "      <td>8.4%</td>\n",
              "      <td>487,166</td>\n",
              "      <td>50.6%</td>\n",
              "      <td>-3.0%</td>\n",
              "      <td>2,070,944</td>\n",
              "      <td>0.4%</td>\n",
              "      <td>-17.4%</td>\n",
              "      <td>97</td>\n",
              "      <td>2</td>\n",
              "      <td>-8</td>\n",
              "      <td>95.6%</td>\n",
              "      <td>-0.1%</td>\n",
              "      <td>0.2%</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>National</td>\n",
              "      <td>February 2012</td>\n",
              "      <td>$159K</td>\n",
              "      <td>0.1%</td>\n",
              "      <td>-2.2%</td>\n",
              "      <td>303,947</td>\n",
              "      <td>10.4%</td>\n",
              "      <td>13.7%</td>\n",
              "      <td>522,763</td>\n",
              "      <td>7.3%</td>\n",
              "      <td>4.9%</td>\n",
              "      <td>2,094,202</td>\n",
              "      <td>1.1%</td>\n",
              "      <td>-16.8%</td>\n",
              "      <td>97</td>\n",
              "      <td>0</td>\n",
              "      <td>-11</td>\n",
              "      <td>95.8%</td>\n",
              "      <td>0.2%</td>\n",
              "      <td>0.3%</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>National</td>\n",
              "      <td>March 2012</td>\n",
              "      <td>$170K</td>\n",
              "      <td>7.3%</td>\n",
              "      <td>3.9%</td>\n",
              "      <td>392,698</td>\n",
              "      <td>29.2%</td>\n",
              "      <td>6.8%</td>\n",
              "      <td>631,772</td>\n",
              "      <td>20.9%</td>\n",
              "      <td>-5.4%</td>\n",
              "      <td>2,135,732</td>\n",
              "      <td>2.0%</td>\n",
              "      <td>-16.9%</td>\n",
              "      <td>94</td>\n",
              "      <td>-4</td>\n",
              "      <td>-12</td>\n",
              "      <td>96.2%</td>\n",
              "      <td>0.4%</td>\n",
              "      <td>0.6%</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>National</td>\n",
              "      <td>April 2012</td>\n",
              "      <td>$178K</td>\n",
              "      <td>4.4%</td>\n",
              "      <td>6.0%</td>\n",
              "      <td>402,888</td>\n",
              "      <td>2.6%</td>\n",
              "      <td>8.3%</td>\n",
              "      <td>616,104</td>\n",
              "      <td>-2.5%</td>\n",
              "      <td>-2.6%</td>\n",
              "      <td>2,172,976</td>\n",
              "      <td>1.7%</td>\n",
              "      <td>-17.0%</td>\n",
              "      <td>81</td>\n",
              "      <td>-12</td>\n",
              "      <td>-17</td>\n",
              "      <td>96.5%</td>\n",
              "      <td>0.3%</td>\n",
              "      <td>0.7%</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>National</td>\n",
              "      <td>May 2012</td>\n",
              "      <td>$186K</td>\n",
              "      <td>4.3%</td>\n",
              "      <td>8.2%</td>\n",
              "      <td>461,747</td>\n",
              "      <td>14.6%</td>\n",
              "      <td>16.5%</td>\n",
              "      <td>617,189</td>\n",
              "      <td>0.2%</td>\n",
              "      <td>-0.6%</td>\n",
              "      <td>2,180,851</td>\n",
              "      <td>0.4%</td>\n",
              "      <td>-17.5%</td>\n",
              "      <td>73</td>\n",
              "      <td>-9</td>\n",
              "      <td>-17</td>\n",
              "      <td>96.8%</td>\n",
              "      <td>0.3%</td>\n",
              "      <td>1.0%</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-44bb88da-919b-46e5-9728-5179f3321dcd')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-44bb88da-919b-46e5-9728-5179f3321dcd button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-44bb88da-919b-46e5-9728-5179f3321dcd');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-ae522783-daac-4572-a03d-67e1bcbbc69f\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ae522783-daac-4572-a03d-67e1bcbbc69f')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-ae522783-daac-4572-a03d-67e1bcbbc69f button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 1113,\n  \"fields\": [\n    {\n      \"column\": \"Region\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \" National\",\n          \"Boston, MA metro area\",\n          \"Seattle, WA metro area\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Month of Period End\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 159,\n        \"samples\": [\n          \"July 2018\",\n          \"December 2024\",\n          \"September 2022\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Median Sale Price\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 423,\n        \"samples\": [\n          \"$439K\",\n          \"$518K\",\n          \"$557K\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Median Sale Price MoM \",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 190,\n        \"samples\": [\n          \"-2.4%\",\n          \"7.9%\",\n          \"6.0%\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Median Sale Price YoY \",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 259,\n        \"samples\": [\n          \"13.8%\",\n          \"7.1%\",\n          \"10.4%\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Homes Sold\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1067,\n        \"samples\": [\n          \"2,741\",\n          \"1,734\",\n          \"3,472\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Homes Sold MoM \",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 560,\n        \"samples\": [\n          \"11.5%\",\n          \"5.7%\",\n          \"14.5%\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Homes Sold YoY \",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 498,\n        \"samples\": [\n          \"-27.3%\",\n          \"2.2%\",\n          \"29.4%\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"New Listings\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1063,\n        \"samples\": [\n          \"606,274\",\n          \"8,323\",\n          \"6,619\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"New Listings MoM \",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 641,\n        \"samples\": [\n          \"-7.7%\",\n          \"64.3%\",\n          \"-36.6%\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"New Listings YoY \",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 461,\n        \"samples\": [\n          \"13.2%\",\n          \"-2.0%\",\n          \"5.0%\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Inventory\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1090,\n        \"samples\": [\n          \"5,173\",\n          \"14,528\",\n          \"10,489\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Inventory MoM \",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 376,\n        \"samples\": [\n          \"-15.2%\",\n          \"10.8%\",\n          \"4.0%\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \" Inventory YoY \",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 578,\n        \"samples\": [\n          \"-24.2%\",\n          \"22.9%\",\n          \"-24.1%\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Days on Market\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 21,\n        \"min\": 5,\n        \"max\": 145,\n        \"num_unique_values\": 100,\n        \"samples\": [\n          10,\n          22,\n          99\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Days on Market MoM\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6,\n        \"min\": -49,\n        \"max\": 20,\n        \"num_unique_values\": 45,\n        \"samples\": [\n          -25,\n          -14,\n          -27\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Days on Market YoY\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12,\n        \"min\": -69,\n        \"max\": 44,\n        \"num_unique_values\": 85,\n        \"samples\": [\n          18,\n          -8,\n          39\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Average Sale To List\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 130,\n        \"samples\": [\n          \"100.9%\",\n          \"100.5%\",\n          \"98.3%\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Average Sale To List MoM \",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 44,\n        \"samples\": [\n          \"3.6%\",\n          \"1.7%\",\n          \"1.9%\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Average Sale To List YoY \",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 98,\n        \"samples\": [\n          \"3.6%\",\n          \"-0.5%\",\n          \"-9.4%\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.columns\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "syBPNB56Nrwz",
        "outputId": "9b4559a3-3c30-4046-94e0-e46f2ffeb09c"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['Region', 'Month of Period End', 'Median Sale Price',\n",
              "       'Median Sale Price MoM ', 'Median Sale Price YoY ', 'Homes Sold',\n",
              "       'Homes Sold MoM ', 'Homes Sold YoY ', 'New Listings',\n",
              "       'New Listings MoM ', 'New Listings YoY ', 'Inventory', 'Inventory MoM ',\n",
              "       ' Inventory YoY ', 'Days on Market', 'Days on Market MoM',\n",
              "       'Days on Market YoY', 'Average Sale To List',\n",
              "       'Average Sale To List MoM ', 'Average Sale To List YoY '],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Clean column names: strip spaces and lowercase\n",
        "df.columns = df.columns.str.strip().str.lower().str.replace(\" \", \"_\")\n",
        "\n",
        "# Convert 'month_of_period_end' to datetime\n",
        "df['month_of_period_end'] = pd.to_datetime(df['month_of_period_end'], format='%B %Y')\n",
        "\n",
        "# Convert price and numerical columns\n",
        "def parse_price(x):\n",
        "    if isinstance(x, str):\n",
        "        return float(x.replace(\"$\", \"\").replace(\"K\", \"000\").replace(\"M\", \"000000\").replace(\",\", \"\").strip())\n",
        "    return x\n",
        "\n",
        "df['median_sale_price'] = df['median_sale_price'].apply(parse_price)\n",
        "df['homes_sold'] = pd.to_numeric(df['homes_sold'], errors='coerce')\n",
        "df['new_listings'] = pd.to_numeric(df['new_listings'], errors='coerce')\n",
        "df['inventory'] = pd.to_numeric(df['inventory'], errors='coerce')\n",
        "df['days_on_market'] = pd.to_numeric(df['days_on_market'], errors='coerce')\n",
        "df = df.dropna(subset=['median_sale_price'])\n"
      ],
      "metadata": {
        "id": "OLiuQ670N0YD"
      },
      "execution_count": 18,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "plt.figure(figsize=(12, 6))\n",
        "plt.plot(df['month_of_period_end'], df['median_sale_price'], label='Median Sale Price')\n",
        "plt.title(\"U.S. Median Sale Price Over Time\")\n",
        "plt.xlabel(\"Date\")\n",
        "plt.ylabel(\"Price ($)\")\n",
        "plt.grid(True)\n",
        "plt.legend()\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 420
        },
        "id": "JPQwaQf6N68T",
        "outputId": "a640c6f4-06c2-45b8-8de4-6cfec2338300"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = df.sort_values('month_of_period_end')\n",
        "\n",
        "# Rolling 3-month average (smoothing)\n",
        "df['rolling_avg_price'] = df['median_sale_price'].rolling(window=3).mean()\n",
        "\n",
        "# Year-over-year % change\n",
        "df['yoy_price_change'] = df['median_sale_price'].pct_change(periods=12)\n",
        "\n",
        "# Lag: previous month's price\n",
        "df['lag_1'] = df['median_sale_price'].shift(1)\n"
      ],
      "metadata": {
        "id": "OnmyzTJ8Qegs"
      },
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df['target_price'] = df['median_sale_price'].shift(-1)\n"
      ],
      "metadata": {
        "id": "SYAY1rTwQiKv"
      },
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Train Model ####"
      ],
      "metadata": {
        "id": "BF58dISIQqrV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from sklearn.metrics import mean_absolute_error, mean_squared_error\n",
        "import numpy as np\n"
      ],
      "metadata": {
        "id": "F26XP-dvQu3B"
      },
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Recalculate engineered features\n",
        "df = df.sort_values('month_of_period_end')\n",
        "\n",
        "df['rolling_avg_price'] = df['median_sale_price'].rolling(window=3).mean()\n",
        "df['yoy_price_change'] = df['median_sale_price'].pct_change(periods=12)\n",
        "df['lag_1'] = df['median_sale_price'].shift(1)\n",
        "df['target_price'] = df['median_sale_price'].shift(-1)\n",
        "\n",
        "# Drop rows with any missing values from feature creation\n",
        "df_model = df.dropna(subset=['rolling_avg_price', 'yoy_price_change', 'lag_1', 'target_price'])\n"
      ],
      "metadata": {
        "id": "63q991UTWatT"
      },
      "execution_count": 24,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "features = ['median_sale_price', 'rolling_avg_price', 'yoy_price_change', 'lag_1']\n",
        "target = 'target_price'\n",
        "\n",
        "X = df_model[features]\n",
        "y = df_model[target]\n"
      ],
      "metadata": {
        "id": "yYOmNKVcWdSZ"
      },
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_train, X_test = X.iloc[:-12], X.iloc[-12:]\n",
        "y_train, y_test = y.iloc[:-12], y.iloc[-12:]\n"
      ],
      "metadata": {
        "id": "xG1FRfX4WhY3"
      },
      "execution_count": 26,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model = RandomForestRegressor(n_estimators=100, random_state=42)\n",
        "model.fit(X_train, y_train)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 57
        },
        "id": "jKfejpg-WiR7",
        "outputId": "e170c002-c7b9-4311-9a99-77757da3aa1f"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RandomForestRegressor(random_state=42)"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: #000;\n",
              "  --sklearn-color-text-muted: #666;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-1 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-1 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: flex;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "  align-items: start;\n",
              "  justify-content: space-between;\n",
              "  gap: 0.5em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label .caption {\n",
              "  font-size: 0.6rem;\n",
              "  font-weight: lighter;\n",
              "  color: var(--sklearn-color-text-muted);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-1 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-1 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 0.5em;\n",
              "  text-align: center;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-1 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestRegressor(random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>RandomForestRegressor</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.ensemble.RandomForestRegressor.html\">?<span>Documentation for RandomForestRegressor</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>RandomForestRegressor(random_state=42)</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import mean_absolute_error, mean_squared_error\n",
        "import numpy as np\n",
        "\n",
        "y_pred = model.predict(X_test)\n",
        "\n",
        "rmse = np.sqrt(mean_squared_error(y_test, y_pred))\n",
        "mae = mean_absolute_error(y_test, y_pred)\n",
        "\n",
        "print(f\"RMSE: ${rmse:,.0f}\")\n",
        "print(f\"MAE:  ${mae:,.0f}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8rxzD5SqWoE7",
        "outputId": "ec972821-ae9e-45b6-9269-2ce64b92d1b7"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "RMSE: $239,634\n",
            "MAE:  $201,495\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Prepare Metro-Level Data ###"
      ],
      "metadata": {
        "id": "sdVejRTIeD0r"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Filter to only U.S. metros (we'll exclude \"National\")\n",
        "df_metro = df[df['region'] != 'National'].copy()\n",
        "\n",
        "# Clean again just in case\n",
        "df_metro = df_metro.sort_values(['region', 'month_of_period_end'])\n",
        "\n",
        "# Feature engineering\n",
        "df_metro['rolling_avg_price'] = df_metro['median_sale_price'].rolling(window=3).mean()\n",
        "df_metro['yoy_price_change'] = df_metro['median_sale_price'].pct_change(periods=12)\n",
        "df_metro['lag_1'] = df_metro['median_sale_price'].shift(1)\n",
        "df_metro['target_price'] = df_metro['median_sale_price'].shift(-1)\n",
        "\n",
        "# Drop rows with missing features within each region\n",
        "df_metro = df_metro.dropna(subset=['rolling_avg_price', 'yoy_price_change', 'lag_1', 'target_price'])\n"
      ],
      "metadata": {
        "id": "MAJEJGYueF72"
      },
      "execution_count": 31,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.ensemble import RandomForestRegressor\n",
        "import joblib\n",
        "import os\n",
        "\n",
        "# Create a folder to store the models\n",
        "os.makedirs('metro_models', exist_ok=True)\n",
        "\n",
        "# Get unique metro regions\n",
        "metro_regions = df_metro['region'].unique()\n",
        "\n",
        "for region in metro_regions:\n",
        "    region_df = df_metro[df_metro['region'] == region]\n",
        "\n",
        "    X = region_df[['median_sale_price', 'rolling_avg_price', 'yoy_price_change', 'lag_1']]\n",
        "    y = region_df['target_price']\n",
        "\n",
        "    if len(region_df) < 24:\n",
        "        continue  # skip small datasets\n",
        "\n",
        "    X_train = X.iloc[:-12]\n",
        "    y_train = y.iloc[:-12]\n",
        "\n",
        "    model = RandomForestRegressor(n_estimators=100, random_state=42)\n",
        "    model.fit(X_train, y_train)\n",
        "\n",
        "    # Save model with a filename-safe version of region\n",
        "    safe_name = region.replace(\",\", \"\").replace(\" \", \"_\").replace(\"/\", \"_\")\n",
        "    joblib.dump(model, f'metro_models/{safe_name}.pkl')\n"
      ],
      "metadata": {
        "id": "jl_YWYBReIn-"
      },
      "execution_count": 32,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Train & Save One Model per Metro ##"
      ],
      "metadata": {
        "id": "IQ5WbwufiuJx"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import joblib\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from sklearn.metrics import mean_squared_error, mean_absolute_error\n",
        "\n",
        "# Load metro-level Redfin data\n",
        "df = pd.read_csv('metro.tsv.gz', sep='\\t', compression='gzip')\n",
        "\n",
        "# Clean columns\n",
        "df.columns = df.columns.str.strip().str.lower().str.replace(\" \", \"_\")\n",
        "\n",
        "# Rename and convert relevant fields\n",
        "df['period_begin'] = pd.to_datetime(df['period_begin'])\n",
        "df['median_sale_price'] = pd.to_numeric(df['median_sale_price'], errors='coerce')\n",
        "df = df.dropna(subset=['region', 'period_begin', 'median_sale_price'])\n",
        "\n",
        "# Filter for metro level data only (just in case)\n",
        "df = df[df['region_type'] == 'metro']\n",
        "\n",
        "# Sort and engineer features\n",
        "df = df.sort_values(['region', 'period_begin'])\n",
        "df['rolling_avg_price'] = df.groupby('region')['median_sale_price'].transform(lambda x: x.rolling(3).mean())\n",
        "df['yoy_price_change'] = df.groupby('region')['median_sale_price'].transform(lambda x: x.pct_change(12))\n",
        "df['lag_1'] = df.groupby('region')['median_sale_price'].shift(1)\n",
        "df['target_price'] = df.groupby('region')['median_sale_price'].shift(-1)\n",
        "df = df.dropna(subset=['rolling_avg_price', 'yoy_price_change', 'lag_1', 'target_price'])\n",
        "\n",
        "# Create folder\n",
        "os.makedirs('metro_models', exist_ok=True)\n",
        "\n",
        "# Train & save a model per metro\n",
        "regions = df['region'].unique()\n",
        "for region in regions:\n",
        "    region_df = df[df['region'] == region]\n",
        "    if len(region_df) < 24:\n",
        "        continue  # Skip small regions\n",
        "\n",
        "    X = region_df[['median_sale_price', 'rolling_avg_price', 'yoy_price_change', 'lag_1']]\n",
        "    y = region_df['target_price']\n",
        "\n",
        "    X_train, y_train = X.iloc[:-12], y.iloc[:-12]\n",
        "\n",
        "    model = RandomForestRegressor(n_estimators=100, random_state=42)\n",
        "    model.fit(X_train, y_train)\n",
        "\n",
        "    # Save\n",
        "    safe_name = region.replace(\",\", \"\").replace(\" \", \"_\").replace(\"/\", \"_\")\n",
        "    joblib.dump(model, f'metro_models/{safe_name}.pkl')\n",
        "\n",
        "    # Optional: print performance\n",
        "    X_test, y_test = X.iloc[-12:], y.iloc[-12:]\n",
        "    preds = model.predict(X_test)\n",
        "    rmse = np.sqrt(mean_squared_error(y_test, preds))\n",
        "    mae = mean_absolute_error(y_test, preds)\n",
        "    print(f\"{region[:30]:30s} — RMSE: ${rmse:,.0f}, MAE: ${mae:,.0f}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WMxQVdhgiwN5",
        "outputId": "ab5ec4e4-72d1-4251-8ad3-41bcb66a7857"
      },
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Aberdeen, SD metro area        — RMSE: $58,645, MAE: $49,124\n",
            "Aberdeen, WA metro area        — RMSE: $223,884, MAE: $180,271\n",
            "Abilene, TX metro area         — RMSE: $89,073, MAE: $72,447\n",
            "Ada, OK metro area             — RMSE: $46,481, MAE: $37,731\n",
            "Adrian, MI metro area          — RMSE: $57,904, MAE: $49,962\n",
            "Akron, OH metro area           — RMSE: $57,738, MAE: $38,306\n",
            "Alamogordo, NM metro area      — RMSE: $58,170, MAE: $36,829\n",
            "Albany, GA metro area          — RMSE: $50,766, MAE: $36,587\n",
            "Albany, NY metro area          — RMSE: $42,463, MAE: $35,866\n",
            "Albany, OR metro area          — RMSE: $126,435, MAE: $87,050\n",
            "Albemarle, NC metro area       — RMSE: $59,008, MAE: $44,100\n",
            "Albert Lea, MN metro area      — RMSE: $60,714, MAE: $46,207\n",
            "Albertville, AL metro area     — RMSE: $71,093, MAE: $57,891\n",
            "Alexander City, AL metro area  — RMSE: $175,626, MAE: $137,186\n",
            "Alexandria, LA metro area      — RMSE: $104,353, MAE: $74,749\n",
            "Alexandria, MN metro area      — RMSE: $64,907, MAE: $43,722\n",
            "Alice, TX metro area           — RMSE: $30,631, MAE: $20,672\n",
            "Allentown, PA metro area       — RMSE: $70,817, MAE: $57,033\n",
            "Alma, MI metro area            — RMSE: $32,647, MAE: $20,322\n",
            "Alpena, MI metro area          — RMSE: $50,567, MAE: $37,951\n",
            "Altoona, PA metro area         — RMSE: $58,486, MAE: $50,273\n",
            "Altus, OK metro area           — RMSE: $59,402, MAE: $43,547\n",
            "Amarillo, TX metro area        — RMSE: $214,844, MAE: $102,690\n",
            "Americus, GA metro area        — RMSE: $109,700, MAE: $69,524\n",
            "Ames, IA metro area            — RMSE: $61,323, MAE: $48,215\n",
            "Amsterdam, NY metro area       — RMSE: $40,096, MAE: $34,692\n",
            "Anaheim, CA metro area         — RMSE: $427,877, MAE: $286,610\n",
            "Anchorage, AK metro area       — RMSE: $64,895, MAE: $54,430\n",
            "Andrews, TX metro area         — RMSE: $52,756, MAE: $44,129\n",
            "Angola, IN metro area          — RMSE: $115,686, MAE: $79,339\n",
            "Ann Arbor, MI metro area       — RMSE: $99,634, MAE: $79,653\n",
            "Anniston, AL metro area        — RMSE: $53,872, MAE: $40,494\n",
            "Appleton, WI metro area        — RMSE: $40,530, MAE: $35,136\n",
            "Arcadia, FL metro area         — RMSE: $153,001, MAE: $82,641\n",
            "Ardmore, OK metro area         — RMSE: $72,282, MAE: $49,100\n",
            "Arkadelphia, AR metro area     — RMSE: $43,603, MAE: $37,111\n",
            "Asheville, NC metro area       — RMSE: $67,101, MAE: $63,265\n",
            "Ashland, OH metro area         — RMSE: $48,858, MAE: $42,898\n",
            "Ashtabula, OH metro area       — RMSE: $64,812, MAE: $55,833\n",
            "Astoria, OR metro area         — RMSE: $144,347, MAE: $109,766\n",
            "Atchison, KS metro area        — RMSE: $78,558, MAE: $62,841\n",
            "Athens, OH metro area          — RMSE: $73,346, MAE: $56,940\n",
            "Athens, TN metro area          — RMSE: $73,117, MAE: $55,517\n",
            "Athens, TX metro area          — RMSE: $243,413, MAE: $125,171\n",
            "Atlanta, GA metro area         — RMSE: $47,663, MAE: $43,249\n",
            "Atlantic City, NJ metro area   — RMSE: $159,642, MAE: $101,105\n",
            "Atmore, AL metro area          — RMSE: $41,776, MAE: $32,752\n",
            "Auburn, AL metro area          — RMSE: $43,998, MAE: $38,475\n",
            "Auburn, IN metro area          — RMSE: $102,134, MAE: $75,739\n",
            "Auburn, NY metro area          — RMSE: $43,101, MAE: $38,347\n",
            "Augusta, GA metro area         — RMSE: $43,112, MAE: $35,624\n",
            "Augusta, ME metro area         — RMSE: $85,240, MAE: $66,400\n",
            "Austin, MN metro area          — RMSE: $21,336, MAE: $17,657\n",
            "Austin, TX metro area          — RMSE: $62,234, MAE: $51,740\n",
            "Bainbridge, GA metro area      — RMSE: $43,050, MAE: $36,155\n",
            "Bakersfield, CA metro area     — RMSE: $75,948, MAE: $66,869\n",
            "Baltimore, MD metro area       — RMSE: $79,683, MAE: $66,186\n",
            "Bangor, ME metro area          — RMSE: $59,514, MAE: $46,060\n",
            "Baraboo, WI metro area         — RMSE: $95,073, MAE: $75,859\n",
            "Bardstown, KY metro area       — RMSE: $51,986, MAE: $38,328\n",
            "Barnstable Town, MA metro area — RMSE: $382,638, MAE: $242,690\n",
            "Barre, VT metro area           — RMSE: $75,191, MAE: $62,748\n",
            "Bartlesville, OK metro area    — RMSE: $54,290, MAE: $46,352\n",
            "Batavia, NY metro area         — RMSE: $62,282, MAE: $50,096\n",
            "Batesville, AR metro area      — RMSE: $54,369, MAE: $49,958\n",
            "Baton Rouge, LA metro area     — RMSE: $104,370, MAE: $85,928\n",
            "Battle Creek, MI metro area    — RMSE: $106,768, MAE: $55,963\n",
            "Bay City, MI metro area        — RMSE: $48,552, MAE: $36,131\n",
            "Bay City, TX metro area        — RMSE: $82,086, MAE: $57,054\n",
            "Beatrice, NE metro area        — RMSE: $51,141, MAE: $37,993\n",
            "Beaumont, TX metro area        — RMSE: $38,513, MAE: $32,130\n",
            "Beaver Dam, WI metro area      — RMSE: $171,555, MAE: $109,190\n",
            "Beckley, WV metro area         — RMSE: $51,710, MAE: $29,834\n",
            "Bedford, IN metro area         — RMSE: $81,651, MAE: $47,158\n",
            "Beeville, TX metro area        — RMSE: $65,779, MAE: $55,432\n",
            "Bellefontaine, OH metro area   — RMSE: $35,662, MAE: $26,805\n",
            "Bellingham, WA metro area      — RMSE: $190,799, MAE: $140,328\n",
            "Bemidji, MN metro area         — RMSE: $59,471, MAE: $50,241\n",
            "Bend, OR metro area            — RMSE: $110,570, MAE: $77,920\n",
            "Bennettsville, SC metro area   — RMSE: $52,605, MAE: $47,738\n",
            "Bennington, VT metro area      — RMSE: $123,874, MAE: $112,282\n",
            "Berlin, NH metro area          — RMSE: $183,926, MAE: $144,231\n",
            "Big Rapids, MI metro area      — RMSE: $201,452, MAE: $122,276\n",
            "Big Spring, TX metro area      — RMSE: $69,895, MAE: $55,096\n",
            "Big Stone Gap, VA metro area   — RMSE: $32,138, MAE: $27,031\n",
            "Billings, MT metro area        — RMSE: $129,990, MAE: $74,328\n",
            "Binghamton, NY metro area      — RMSE: $36,076, MAE: $32,553\n",
            "Birmingham, AL metro area      — RMSE: $39,812, MAE: $30,622\n",
            "Bismarck, ND metro area        — RMSE: $73,864, MAE: $68,225\n",
            "Blackfoot, ID metro area       — RMSE: $106,362, MAE: $64,901\n",
            "Blacksburg, VA metro area      — RMSE: $298,176, MAE: $143,155\n",
            "Bloomington, IL metro area     — RMSE: $46,781, MAE: $40,265\n",
            "Bloomington, IN metro area     — RMSE: $77,642, MAE: $65,369\n",
            "Bloomsburg, PA metro area      — RMSE: $40,143, MAE: $34,028\n",
            "Bluefield, WV metro area       — RMSE: $48,337, MAE: $37,307\n",
            "Bluffton, IN metro area        — RMSE: $38,130, MAE: $28,787\n",
            "Blytheville, AR metro area     — RMSE: $79,632, MAE: $65,828\n",
            "Bogalusa, LA metro area        — RMSE: $37,260, MAE: $25,667\n",
            "Boise City, ID metro area      — RMSE: $80,752, MAE: $55,877\n",
            "Bonham, TX metro area          — RMSE: $52,310, MAE: $42,500\n",
            "Boone, NC metro area           — RMSE: $199,991, MAE: $164,154\n",
            "Borger, TX metro area          — RMSE: $21,179, MAE: $17,562\n",
            "Boston, MA metro area          — RMSE: $129,520, MAE: $107,131\n",
            "Boulder, CO metro area         — RMSE: $356,777, MAE: $217,495\n",
            "Bowling Green, KY metro area   — RMSE: $67,832, MAE: $40,365\n",
            "Bozeman, MT metro area         — RMSE: $150,656, MAE: $125,192\n",
            "Bradford, PA metro area        — RMSE: $36,789, MAE: $29,848\n",
            "Brainerd, MN metro area        — RMSE: $61,856, MAE: $46,312\n",
            "Branson, MO metro area         — RMSE: $50,653, MAE: $44,570\n",
            "Breckenridge, CO metro area    — RMSE: $529,136, MAE: $375,509\n",
            "Bremerton, WA metro area       — RMSE: $132,111, MAE: $112,411\n",
            "Brenham, TX metro area         — RMSE: $345,918, MAE: $216,432\n",
            "Brevard, NC metro area         — RMSE: $369,854, MAE: $231,949\n",
            "Bridgeport, CT metro area      — RMSE: $171,801, MAE: $151,647\n",
            "Brookhaven, MS metro area      — RMSE: $77,681, MAE: $67,017\n",
            "Brookings, OR metro area       — RMSE: $154,273, MAE: $125,339\n",
            "Brookings, SD metro area       — RMSE: $206,851, MAE: $131,749\n",
            "Brownsville, TN metro area     — RMSE: $240,161, MAE: $128,102\n",
            "Brownsville, TX metro area     — RMSE: $91,452, MAE: $68,402\n",
            "Brownwood, TX metro area       — RMSE: $51,774, MAE: $40,272\n",
            "Brunswick, GA metro area       — RMSE: $121,369, MAE: $84,869\n",
            "Bucyrus, OH metro area         — RMSE: $46,424, MAE: $33,416\n",
            "Buffalo, NY metro area         — RMSE: $24,404, MAE: $18,409\n",
            "Burley, ID metro area          — RMSE: $134,887, MAE: $64,633\n",
            "Burlington, IA metro area      — RMSE: $20,553, MAE: $16,938\n",
            "Burlington, NC metro area      — RMSE: $70,317, MAE: $56,029\n",
            "Burlington, VT metro area      — RMSE: $86,885, MAE: $72,417\n",
            "Butte, MT metro area           — RMSE: $37,133, MAE: $29,143\n",
            "Cadillac, MI metro area        — RMSE: $41,703, MAE: $33,045\n",
            "Calhoun, GA metro area         — RMSE: $47,184, MAE: $39,311\n",
            "California, MD metro area      — RMSE: $84,617, MAE: $71,316\n",
            "Cambridge, MD metro area       — RMSE: $53,392, MAE: $43,700\n",
            "Cambridge, OH metro area       — RMSE: $35,895, MAE: $31,063\n",
            "Camden, AR metro area          — RMSE: $35,931, MAE: $21,156\n",
            "Camden, NJ metro area          — RMSE: $61,408, MAE: $52,437\n",
            "Campbellsville, KY metro area  — RMSE: $41,855, MAE: $33,183\n",
            "Canton, OH metro area          — RMSE: $39,800, MAE: $34,154\n",
            "Cape Coral, FL metro area      — RMSE: $87,613, MAE: $66,893\n",
            "Cape Girardeau, MO metro area  — RMSE: $68,937, MAE: $48,768\n",
            "Carbondale, IL metro area      — RMSE: $52,913, MAE: $41,231\n",
            "Carlsbad, NM metro area        — RMSE: $61,275, MAE: $50,751\n",
            "Carroll, IA metro area         — RMSE: $48,603, MAE: $37,176\n",
            "Carson City, NV metro area     — RMSE: $138,269, MAE: $128,013\n",
            "Casper, WY metro area          — RMSE: $69,718, MAE: $51,378\n",
            "Cañon City, CO metro area      — RMSE: $91,115, MAE: $70,318\n",
            "Cedar City, UT metro area      — RMSE: $93,486, MAE: $62,393\n",
            "Cedar Rapids, IA metro area    — RMSE: $42,958, MAE: $29,615\n",
            "Cedartown, GA metro area       — RMSE: $51,828, MAE: $36,058\n",
            "Celina, OH metro area          — RMSE: $51,019, MAE: $24,658\n",
            "Central City, KY metro area    — RMSE: $44,715, MAE: $35,999\n",
            "Centralia, IL metro area       — RMSE: $47,422, MAE: $37,295\n",
            "Centralia, WA metro area       — RMSE: $120,228, MAE: $84,048\n",
            "Chambersburg, PA metro area    — RMSE: $79,111, MAE: $49,377\n",
            "Champaign, IL metro area       — RMSE: $56,554, MAE: $47,035\n",
            "Charleston, IL metro area      — RMSE: $38,645, MAE: $23,751\n",
            "Charleston, SC metro area      — RMSE: $201,701, MAE: $113,064\n",
            "Charleston, WV metro area      — RMSE: $55,153, MAE: $47,114\n",
            "Charlotte, NC metro area       — RMSE: $58,922, MAE: $46,629\n",
            "Charlottesville, VA metro area — RMSE: $93,097, MAE: $74,872\n",
            "Cheyenne, WY metro area        — RMSE: $163,154, MAE: $122,336\n",
            "Chicago, IL metro area         — RMSE: $49,263, MAE: $37,178\n",
            "Chico, CA metro area           — RMSE: $135,868, MAE: $118,253\n",
            "Chillicothe, OH metro area     — RMSE: $41,157, MAE: $32,147\n",
            "Cincinnati, OH metro area      — RMSE: $41,736, MAE: $34,743\n",
            "Clarksburg, WV metro area      — RMSE: $77,365, MAE: $52,962\n",
            "Clarksdale, MS metro area      — RMSE: $81,093, MAE: $65,019\n",
            "Clarksville, TN metro area     — RMSE: $50,658, MAE: $43,482\n",
            "Clearlake, CA metro area       — RMSE: $57,163, MAE: $46,434\n",
            "Cleveland, MS metro area       — RMSE: $152,371, MAE: $88,363\n",
            "Cleveland, OH metro area       — RMSE: $85,343, MAE: $61,404\n",
            "Cleveland, TN metro area       — RMSE: $67,483, MAE: $47,095\n",
            "Clewiston, FL metro area       — RMSE: $61,156, MAE: $56,002\n",
            "Clinton, IA metro area         — RMSE: $40,215, MAE: $25,851\n",
            "Clovis, NM metro area          — RMSE: $61,524, MAE: $43,411\n",
            "Coeur d'Alene, ID metro area   — RMSE: $106,306, MAE: $79,418\n",
            "Coffeyville, KS metro area     — RMSE: $20,974, MAE: $17,450\n",
            "Coldwater, MI metro area       — RMSE: $30,988, MAE: $23,790\n",
            "College Station, TX metro area — RMSE: $54,354, MAE: $44,372\n",
            "Columbia, MO metro area        — RMSE: $91,330, MAE: $77,979\n",
            "Columbus, IN metro area        — RMSE: $43,551, MAE: $37,117\n",
            "Columbus, MS metro area        — RMSE: $90,142, MAE: $64,205\n",
            "Columbus, NE metro area        — RMSE: $40,595, MAE: $29,316\n",
            "Columbus, OH metro area        — RMSE: $72,203, MAE: $65,883\n",
            "Concord, NH metro area         — RMSE: $53,680, MAE: $46,839\n",
            "Connersville, IN metro area    — RMSE: $25,697, MAE: $21,459\n",
            "Cookeville, TN metro area      — RMSE: $109,260, MAE: $80,212\n",
            "Coos Bay, OR metro area        — RMSE: $68,912, MAE: $54,366\n",
            "Cordele, GA metro area         — RMSE: $118,474, MAE: $87,633\n",
            "Corinth, MS metro area         — RMSE: $19,650, MAE: $17,082\n",
            "Cornelia, GA metro area        — RMSE: $204,291, MAE: $128,233\n",
            "Corning, NY metro area         — RMSE: $132,464, MAE: $102,579\n",
            "Corsicana, TX metro area       — RMSE: $18,345, MAE: $15,918\n",
            "Cortland, NY metro area        — RMSE: $39,157, MAE: $29,930\n",
            "Corvallis, OR metro area       — RMSE: $125,477, MAE: $103,764\n",
            "Coshocton, OH metro area       — RMSE: $28,294, MAE: $23,172\n",
            "Craig, CO metro area           — RMSE: $102,824, MAE: $81,618\n",
            "Crawfordsville, IN metro area  — RMSE: $22,642, MAE: $18,293\n",
            "Crescent City, CA metro area   — RMSE: $159,702, MAE: $125,374\n",
            "Crestview, FL metro area       — RMSE: $84,999, MAE: $70,659\n",
            "Crossville, TN metro area      — RMSE: $102,343, MAE: $76,783\n",
            "Cullman, AL metro area         — RMSE: $82,755, MAE: $63,064\n",
            "Cullowhee, NC metro area       — RMSE: $109,267, MAE: $86,392\n",
            "Cumberland, MD metro area      — RMSE: $61,436, MAE: $55,816\n",
            "Dallas, TX metro area          — RMSE: $63,597, MAE: $45,443\n",
            "Dalton, GA metro area          — RMSE: $54,945, MAE: $41,540\n",
            "Danville, IL metro area        — RMSE: $36,532, MAE: $26,779\n",
            "Danville, KY metro area        — RMSE: $65,077, MAE: $47,439\n",
            "Danville, VA metro area        — RMSE: $48,381, MAE: $38,424\n",
            "Daphne, AL metro area          — RMSE: $74,237, MAE: $60,918\n",
            "Davenport, IA metro area       — RMSE: $98,674, MAE: $67,197\n",
            "Dayton, OH metro area          — RMSE: $51,430, MAE: $38,751\n",
            "Dayton, TN metro area          — RMSE: $57,229, MAE: $45,662\n",
            "DeRidder, LA metro area        — RMSE: $66,734, MAE: $44,872\n",
            "Decatur, AL metro area         — RMSE: $101,371, MAE: $75,749\n",
            "Decatur, IL metro area         — RMSE: $65,262, MAE: $54,848\n",
            "Decatur, IN metro area         — RMSE: $33,438, MAE: $25,563\n",
            "Defiance, OH metro area        — RMSE: $46,470, MAE: $40,482\n",
            "Del Rio, TX metro area         — RMSE: $98,175, MAE: $65,314\n",
            "Deltona, FL metro area         — RMSE: $54,690, MAE: $47,055\n",
            "Deming, NM metro area          — RMSE: $19,194, MAE: $15,527\n",
            "Denver, CO metro area          — RMSE: $119,299, MAE: $97,885\n",
            "Des Moines, IA metro area      — RMSE: $39,989, MAE: $33,860\n",
            "Detroit, MI metro area         — RMSE: $107,413, MAE: $69,554\n",
            "Dickinson, ND metro area       — RMSE: $81,017, MAE: $62,082\n",
            "Dixon, IL metro area           — RMSE: $33,941, MAE: $23,486\n",
            "Dodge City, KS metro area      — RMSE: $53,192, MAE: $39,584\n",
            "Dothan, AL metro area          — RMSE: $73,615, MAE: $63,979\n",
            "Douglas, GA metro area         — RMSE: $80,929, MAE: $55,612\n",
            "Dover, DE metro area           — RMSE: $89,923, MAE: $75,697\n",
            "DuBois, PA metro area          — RMSE: $36,230, MAE: $25,377\n",
            "Dublin, GA metro area          — RMSE: $30,043, MAE: $25,676\n",
            "Dubuque, IA metro area         — RMSE: $94,807, MAE: $60,830\n",
            "Dumas, TX metro area           — RMSE: $34,608, MAE: $21,660\n",
            "Duncan, OK metro area          — RMSE: $48,701, MAE: $38,856\n",
            "Durango, CO metro area         — RMSE: $185,652, MAE: $148,906\n",
            "Durant, OK metro area          — RMSE: $25,900, MAE: $20,130\n",
            "Durham, NC metro area          — RMSE: $92,283, MAE: $79,008\n",
            "Dyersburg, TN metro area       — RMSE: $44,330, MAE: $36,988\n",
            "Eagle Pass, TX metro area      — RMSE: $122,856, MAE: $79,275\n",
            "East Stroudsburg, PA metro are — RMSE: $77,013, MAE: $61,171\n",
            "Easton, MD metro area          — RMSE: $143,265, MAE: $100,437\n",
            "Eau Claire, WI metro area      — RMSE: $54,119, MAE: $40,587\n",
            "Edwards, CO metro area         — RMSE: $825,102, MAE: $695,083\n",
            "Effingham, IL metro area       — RMSE: $47,977, MAE: $34,710\n",
            "El Campo, TX metro area        — RMSE: $53,087, MAE: $34,932\n",
            "El Centro, CA metro area       — RMSE: $101,771, MAE: $71,763\n",
            "El Dorado, AR metro area       — RMSE: $21,571, MAE: $14,282\n",
            "El Paso, TX metro area         — RMSE: $44,964, MAE: $39,704\n",
            "Elgin, IL metro area           — RMSE: $52,923, MAE: $46,745\n",
            "Elizabeth City, NC metro area  — RMSE: $48,664, MAE: $36,850\n",
            "Elizabethtown, KY metro area   — RMSE: $51,227, MAE: $45,923\n",
            "Elk City, OK metro area        — RMSE: $53,417, MAE: $39,581\n",
            "Elkhart, IN metro area         — RMSE: $38,045, MAE: $32,257\n",
            "Elkins, WV metro area          — RMSE: $31,948, MAE: $26,378\n",
            "Elko, NV metro area            — RMSE: $113,449, MAE: $69,408\n",
            "Ellensburg, WA metro area      — RMSE: $267,653, MAE: $151,225\n",
            "Elmira, NY metro area          — RMSE: $47,203, MAE: $38,138\n",
            "Emporia, KS metro area         — RMSE: $85,482, MAE: $57,024\n",
            "Enid, OK metro area            — RMSE: $48,082, MAE: $31,802\n",
            "Enterprise, AL metro area      — RMSE: $62,145, MAE: $52,044\n",
            "Erie, PA metro area            — RMSE: $61,146, MAE: $50,194\n",
            "Escanaba, MI metro area        — RMSE: $64,053, MAE: $56,507\n",
            "Española, NM metro area        — RMSE: $67,419, MAE: $48,159\n",
            "Eufaula, AL metro area         — RMSE: $26,362, MAE: $20,844\n",
            "Eugene, OR metro area          — RMSE: $105,126, MAE: $86,799\n",
            "Eureka, CA metro area          — RMSE: $70,004, MAE: $58,120\n",
            "Evanston, WY metro area        — RMSE: $78,647, MAE: $59,435\n",
            "Evansville, IN metro area      — RMSE: $39,080, MAE: $33,262\n",
            "Fairbanks, AK metro area       — RMSE: $94,237, MAE: $81,338\n",
            "Fairfield, IA metro area       — RMSE: $32,160, MAE: $23,250\n",
            "Fairmont, MN metro area        — RMSE: $84,613, MAE: $53,621\n",
            "Fairmont, WV metro area        — RMSE: $43,819, MAE: $37,912\n",
            "Fallon, NV metro area          — RMSE: $63,129, MAE: $46,690\n",
            "Faribault, MN metro area       — RMSE: $68,708, MAE: $54,923\n",
            "Farmington, MO metro area      — RMSE: $52,006, MAE: $33,725\n",
            "Farmington, NM metro area      — RMSE: $59,975, MAE: $48,378\n",
            "Fayetteville, AR metro area    — RMSE: $54,495, MAE: $42,191\n",
            "Fayetteville, NC metro area    — RMSE: $91,084, MAE: $78,961\n",
            "Fergus Falls, MN metro area    — RMSE: $85,175, MAE: $66,434\n",
            "Fernley, NV metro area         — RMSE: $36,457, MAE: $28,938\n",
            "Findlay, OH metro area         — RMSE: $51,337, MAE: $44,563\n",
            "Fitzgerald, GA metro area      — RMSE: $48,554, MAE: $33,835\n",
            "Flagstaff, AZ metro area       — RMSE: $403,035, MAE: $229,453\n",
            "Flint, MI metro area           — RMSE: $58,888, MAE: $44,698\n",
            "Florence, AL metro area        — RMSE: $43,662, MAE: $34,641\n",
            "Florence, SC metro area        — RMSE: $65,255, MAE: $54,516\n",
            "Fond du Lac, WI metro area     — RMSE: $66,547, MAE: $47,312\n",
            "Forest City, NC metro area     — RMSE: $51,331, MAE: $36,178\n",
            "Forrest City, AR metro area    — RMSE: $33,974, MAE: $23,789\n",
            "Fort Collins, CO metro area    — RMSE: $99,969, MAE: $83,095\n",
            "Fort Dodge, IA metro area      — RMSE: $45,221, MAE: $34,324\n",
            "Fort Lauderdale, FL metro area — RMSE: $176,663, MAE: $131,908\n",
            "Fort Leonard Wood, MO metro ar — RMSE: $44,013, MAE: $35,051\n",
            "Fort Madison, IA metro area    — RMSE: $21,134, MAE: $18,892\n",
            "Fort Morgan, CO metro area     — RMSE: $80,235, MAE: $58,483\n",
            "Fort Payne, AL metro area      — RMSE: $30,038, MAE: $20,850\n",
            "Fort Polk South, LA metro area — RMSE: $27,989, MAE: $19,686\n",
            "Fort Smith, AR metro area      — RMSE: $53,741, MAE: $37,915\n",
            "Fort Wayne, IN metro area      — RMSE: $51,733, MAE: $42,920\n",
            "Fort Worth, TX metro area      — RMSE: $76,343, MAE: $62,722\n",
            "Frankfort, IN metro area       — RMSE: $66,250, MAE: $49,638\n",
            "Frankfort, KY metro area       — RMSE: $112,559, MAE: $71,625\n",
            "Frederick, MD metro area       — RMSE: $176,040, MAE: $149,771\n",
            "Fredericksburg, TX metro area  — RMSE: $159,969, MAE: $130,318\n",
            "Freeport, IL metro area        — RMSE: $34,041, MAE: $25,607\n",
            "Fremont, NE metro area         — RMSE: $46,583, MAE: $34,989\n",
            "Fremont, OH metro area         — RMSE: $52,053, MAE: $44,923\n",
            "Fresno, CA metro area          — RMSE: $99,657, MAE: $87,454\n",
            "Gadsden, AL metro area         — RMSE: $76,701, MAE: $48,029\n",
            "Gaffney, SC metro area         — RMSE: $75,986, MAE: $44,834\n",
            "Gainesville, FL metro area     — RMSE: $67,022, MAE: $62,113\n",
            "Gainesville, GA metro area     — RMSE: $73,195, MAE: $64,739\n",
            "Gainesville, TX metro area     — RMSE: $182,204, MAE: $100,890\n",
            "Galesburg, IL metro area       — RMSE: $42,180, MAE: $32,383\n",
            "Gallup, NM metro area          — RMSE: $62,334, MAE: $53,683\n",
            "Garden City, KS metro area     — RMSE: $58,081, MAE: $45,101\n",
            "Gardnerville Ranchos, NV metro — RMSE: $139,312, MAE: $123,466\n",
            "Gary, IN metro area            — RMSE: $39,180, MAE: $30,170\n",
            "Georgetown, SC metro area      — RMSE: $117,094, MAE: $93,156\n",
            "Gettysburg, PA metro area      — RMSE: $58,497, MAE: $45,483\n",
            "Gillette, WY metro area        — RMSE: $231,731, MAE: $165,819\n",
            "Glasgow, KY metro area         — RMSE: $117,123, MAE: $58,867\n",
            "Glens Falls, NY metro area     — RMSE: $78,908, MAE: $54,680\n",
            "Glenwood Springs, CO metro are — RMSE: $802,270, MAE: $501,795\n",
            "Gloversville, NY metro area    — RMSE: $53,202, MAE: $47,917\n",
            "Goldsboro, NC metro area       — RMSE: $97,139, MAE: $73,546\n",
            "Granbury, TX metro area        — RMSE: $78,107, MAE: $61,548\n",
            "Grand Island, NE metro area    — RMSE: $29,671, MAE: $23,398\n",
            "Grand Junction, CO metro area  — RMSE: $89,838, MAE: $77,202\n",
            "Grand Rapids, MI metro area    — RMSE: $33,007, MAE: $26,712\n",
            "Grand Rapids, MN metro area    — RMSE: $44,803, MAE: $35,068\n",
            "Grants Pass, OR metro area     — RMSE: $98,983, MAE: $80,791\n",
            "Grants, NM metro area          — RMSE: $44,615, MAE: $33,793\n",
            "Great Bend, KS metro area      — RMSE: $59,450, MAE: $42,875\n",
            "Great Falls, MT metro area     — RMSE: $41,863, MAE: $32,542\n",
            "Greeley, CO metro area         — RMSE: $125,479, MAE: $109,764\n",
            "Green Bay, WI metro area       — RMSE: $49,372, MAE: $42,690\n",
            "Greeneville, TN metro area     — RMSE: $38,247, MAE: $35,471\n",
            "Greensboro, NC metro area      — RMSE: $73,880, MAE: $61,989\n",
            "Greensburg, IN metro area      — RMSE: $51,848, MAE: $40,386\n",
            "Greenville, MS metro area      — RMSE: $30,118, MAE: $23,608\n",
            "Greenville, NC metro area      — RMSE: $81,270, MAE: $67,544\n",
            "Greenville, OH metro area      — RMSE: $30,263, MAE: $22,123\n",
            "Greenville, SC metro area      — RMSE: $66,134, MAE: $57,052\n",
            "Greenwood, MS metro area       — RMSE: $62,312, MAE: $47,874\n",
            "Greenwood, SC metro area       — RMSE: $69,307, MAE: $48,996\n",
            "Grenada, MS metro area         — RMSE: $46,343, MAE: $36,365\n",
            "Gulfport, MS metro area        — RMSE: $24,365, MAE: $18,965\n",
            "Guymon, OK metro area          — RMSE: $56,750, MAE: $39,856\n",
            "Hagerstown, MD metro area      — RMSE: $62,627, MAE: $52,257\n",
            "Hailey, ID metro area          — RMSE: $705,716, MAE: $472,831\n",
            "Hammond, LA metro area         — RMSE: $78,065, MAE: $63,795\n",
            "Hanford, CA metro area         — RMSE: $255,510, MAE: $113,271\n",
            "Hannibal, MO metro area        — RMSE: $30,094, MAE: $26,764\n",
            "Harrisburg, PA metro area      — RMSE: $56,197, MAE: $48,443\n",
            "Harrison, AR metro area        — RMSE: $33,311, MAE: $23,148\n",
            "Harrisonburg, VA metro area    — RMSE: $86,038, MAE: $72,600\n",
            "Hartford, CT metro area        — RMSE: $65,882, MAE: $53,152\n",
            "Hastings, NE metro area        — RMSE: $150,365, MAE: $67,405\n",
            "Hays, KS metro area            — RMSE: $77,858, MAE: $62,911\n",
            "Heber, UT metro area           — RMSE: $396,139, MAE: $347,175\n",
            "Helena, AR metro area          — RMSE: $56,572, MAE: $39,432\n",
            "Helena, MT metro area          — RMSE: $125,761, MAE: $90,976\n",
            "Henderson, NC metro area       — RMSE: $56,267, MAE: $41,362\n",
            "Hereford, TX metro area        — RMSE: $50,008, MAE: $40,318\n",
            "Hermiston, OR metro area       — RMSE: $60,747, MAE: $49,017\n",
            "Hickory, NC metro area         — RMSE: $51,092, MAE: $37,263\n",
            "Hillsdale, MI metro area       — RMSE: $137,260, MAE: $81,282\n",
            "Hilo, HI metro area            — RMSE: $512,507, MAE: $359,712\n",
            "Hilton Head Island, SC metro a — RMSE: $78,561, MAE: $69,866\n",
            "Hinesville, GA metro area      — RMSE: $97,635, MAE: $90,505\n",
            "Hobbs, NM metro area           — RMSE: $79,172, MAE: $71,708\n",
            "Holland, MI metro area         — RMSE: $86,366, MAE: $65,946\n",
            "Homosassa Springs, FL metro ar — RMSE: $55,256, MAE: $46,127\n",
            "Honolulu, HI metro area        — RMSE: $309,868, MAE: $269,304\n",
            "Hood River, OR metro area      — RMSE: $298,722, MAE: $217,926\n",
            "Hope, AR metro area            — RMSE: $31,565, MAE: $22,389\n",
            "Hot Springs, AR metro area     — RMSE: $186,615, MAE: $108,422\n",
            "Houghton, MI metro area        — RMSE: $47,089, MAE: $40,033\n",
            "Houma, LA metro area           — RMSE: $130,215, MAE: $90,354\n",
            "Houston, TX metro area         — RMSE: $81,155, MAE: $63,228\n",
            "Hudson, NY metro area          — RMSE: $373,098, MAE: $216,321\n",
            "Huntington, IN metro area      — RMSE: $68,201, MAE: $56,165\n",
            "Huntington, WV metro area      — RMSE: $129,162, MAE: $74,863\n",
            "Huntsville, AL metro area      — RMSE: $78,660, MAE: $70,799\n",
            "Huntsville, TX metro area      — RMSE: $75,196, MAE: $71,217\n",
            "Huron, SD metro area           — RMSE: $41,781, MAE: $27,126\n",
            "Hutchinson, KS metro area      — RMSE: $37,933, MAE: $28,923\n",
            "Hutchinson, MN metro area      — RMSE: $23,716, MAE: $18,587\n",
            "Idaho Falls, ID metro area     — RMSE: $124,348, MAE: $72,737\n",
            "Indiana, PA metro area         — RMSE: $42,006, MAE: $31,773\n",
            "Indianapolis, IN metro area    — RMSE: $52,302, MAE: $45,612\n",
            "Indianola, MS metro area       — RMSE: $165,640, MAE: $124,726\n",
            "Iowa City, IA metro area       — RMSE: $59,859, MAE: $53,821\n",
            "Iron Mountain, MI metro area   — RMSE: $51,144, MAE: $31,099\n",
            "Ithaca, NY metro area          — RMSE: $65,892, MAE: $56,967\n",
            "Jackson, MI metro area         — RMSE: $71,891, MAE: $56,872\n",
            "Jackson, MS metro area         — RMSE: $88,736, MAE: $75,798\n",
            "Jackson, OH metro area         — RMSE: $35,079, MAE: $27,564\n",
            "Jackson, TN metro area         — RMSE: $54,020, MAE: $46,260\n",
            "Jackson, WY metro area         — RMSE: $557,917, MAE: $473,085\n",
            "Jacksonville, FL metro area    — RMSE: $134,103, MAE: $92,020\n",
            "Jacksonville, IL metro area    — RMSE: $71,939, MAE: $46,064\n",
            "Jacksonville, NC metro area    — RMSE: $53,099, MAE: $45,804\n",
            "Jacksonville, TX metro area    — RMSE: $43,880, MAE: $32,621\n",
            "Jamestown, ND metro area       — RMSE: $44,061, MAE: $37,461\n",
            "Jamestown, NY metro area       — RMSE: $62,109, MAE: $53,850\n",
            "Janesville, WI metro area      — RMSE: $54,860, MAE: $51,252\n",
            "Jasper, AL metro area          — RMSE: $26,149, MAE: $22,262\n",
            "Jasper, IN metro area          — RMSE: $41,216, MAE: $32,339\n",
            "Jefferson City, MO metro area  — RMSE: $83,901, MAE: $61,149\n",
            "Jefferson, GA metro area       — RMSE: $73,848, MAE: $59,583\n",
            "Jennings, LA metro area        — RMSE: $23,596, MAE: $14,727\n",
            "Jesup, GA metro area           — RMSE: $62,906, MAE: $52,717\n",
            "Johnson City, TN metro area    — RMSE: $45,312, MAE: $37,749\n",
            "Johnstown, PA metro area       — RMSE: $113,039, MAE: $58,574\n",
            "Jonesboro, AR metro area       — RMSE: $66,018, MAE: $47,824\n",
            "Joplin, MO metro area          — RMSE: $107,099, MAE: $77,135\n",
            "Juneau, AK metro area          — RMSE: $152,603, MAE: $129,692\n",
            "Kahului, HI metro area         — RMSE: $939,096, MAE: $555,144\n",
            "Kalamazoo, MI metro area       — RMSE: $65,033, MAE: $54,290\n",
            "Kalispell, MT metro area       — RMSE: $337,421, MAE: $167,208\n",
            "Kankakee, IL metro area        — RMSE: $34,684, MAE: $29,281\n",
            "Kansas City, MO metro area     — RMSE: $49,699, MAE: $38,224\n",
            "Kapaa, HI metro area           — RMSE: $280,125, MAE: $212,807\n",
            "Kearney, NE metro area         — RMSE: $45,048, MAE: $35,028\n",
            "Keene, NH metro area           — RMSE: $79,641, MAE: $60,667\n",
            "Kendallville, IN metro area    — RMSE: $36,930, MAE: $32,838\n",
            "Kennett, MO metro area         — RMSE: $39,097, MAE: $27,633\n",
            "Kennewick, WA metro area       — RMSE: $84,988, MAE: $60,063\n",
            "Kerrville, TX metro area       — RMSE: $94,463, MAE: $75,448\n",
            "Ketchikan, AK metro area       — RMSE: $139,104, MAE: $120,213\n",
            "Key West, FL metro area        — RMSE: $302,577, MAE: $253,545\n",
            "Kill Devil Hills, NC metro are — RMSE: $170,377, MAE: $144,247\n",
            "Killeen, TX metro area         — RMSE: $71,368, MAE: $54,706\n",
            "Kingsport, TN metro area       — RMSE: $91,826, MAE: $73,416\n",
            "Kingston, NY metro area        — RMSE: $85,568, MAE: $50,469\n",
            "Kingsville, TX metro area      — RMSE: $61,572, MAE: $59,578\n",
            "Kinston, NC metro area         — RMSE: $46,950, MAE: $40,140\n",
            "Kirksville, MO metro area      — RMSE: $58,559, MAE: $42,488\n",
            "Klamath Falls, OR metro area   — RMSE: $60,710, MAE: $50,796\n",
            "Knoxville, TN metro area       — RMSE: $48,618, MAE: $41,104\n",
            "Kokomo, IN metro area          — RMSE: $48,943, MAE: $40,958\n",
            "La Crosse, WI metro area       — RMSE: $49,905, MAE: $42,091\n",
            "La Grande, OR metro area       — RMSE: $57,727, MAE: $40,320\n",
            "LaGrange, GA metro area        — RMSE: $55,214, MAE: $45,374\n",
            "Laconia, NH metro area         — RMSE: $54,597, MAE: $44,898\n",
            "Lafayette, IN metro area       — RMSE: $52,553, MAE: $41,177\n",
            "Lafayette, LA metro area       — RMSE: $71,100, MAE: $61,806\n",
            "Lake Charles, LA metro area    — RMSE: $206,434, MAE: $122,239\n",
            "Lake City, FL metro area       — RMSE: $94,956, MAE: $64,252\n",
            "Lake County, IL metro area     — RMSE: $56,651, MAE: $38,109\n",
            "Lake Havasu City, AZ metro are — RMSE: $98,661, MAE: $77,389\n",
            "Lakeland, FL metro area        — RMSE: $64,621, MAE: $45,772\n",
            "Lamesa, TX metro area          — RMSE: $46,934, MAE: $29,680\n",
            "Lancaster, PA metro area       — RMSE: $78,258, MAE: $58,022\n",
            "Lansing, MI metro area         — RMSE: $32,687, MAE: $23,044\n",
            "Laramie, WY metro area         — RMSE: $60,598, MAE: $53,175\n",
            "Laredo, TX metro area          — RMSE: $176,562, MAE: $115,750\n",
            "Las Cruces, NM metro area      — RMSE: $55,890, MAE: $50,017\n",
            "Las Vegas, NM metro area       — RMSE: $94,292, MAE: $79,771\n",
            "Las Vegas, NV metro area       — RMSE: $129,847, MAE: $106,782\n",
            "Laurinburg, NC metro area      — RMSE: $40,793, MAE: $33,973\n",
            "Lawrence, KS metro area        — RMSE: $82,818, MAE: $69,689\n",
            "Lawrenceburg, TN metro area    — RMSE: $29,038, MAE: $21,200\n",
            "Lawton, OK metro area          — RMSE: $75,049, MAE: $50,055\n",
            "Lebanon, MO metro area         — RMSE: $39,554, MAE: $30,605\n",
            "Lebanon, NH metro area         — RMSE: $60,519, MAE: $50,081\n",
            "Lebanon, PA metro area         — RMSE: $55,048, MAE: $46,998\n",
            "Levelland, TX metro area       — RMSE: $19,358, MAE: $18,721\n",
            "Lewisburg, PA metro area       — RMSE: $74,992, MAE: $66,837\n",
            "Lewisburg, TN metro area       — RMSE: $42,208, MAE: $32,902\n",
            "Lewiston, ID metro area        — RMSE: $44,647, MAE: $37,604\n",
            "Lewiston, ME metro area        — RMSE: $72,558, MAE: $52,836\n",
            "Lewistown, PA metro area       — RMSE: $50,626, MAE: $46,274\n",
            "Lexington, KY metro area       — RMSE: $76,210, MAE: $63,698\n",
            "Lexington, NE metro area       — RMSE: $30,866, MAE: $24,702\n",
            "Liberal, KS metro area         — RMSE: $33,820, MAE: $24,883\n",
            "Lima, OH metro area            — RMSE: $48,689, MAE: $41,509\n",
            "Lincoln, IL metro area         — RMSE: $29,776, MAE: $21,542\n",
            "Lincoln, NE metro area         — RMSE: $63,672, MAE: $55,099\n",
            "Little Rock, AR metro area     — RMSE: $52,817, MAE: $42,135\n",
            "Lock Haven, PA metro area      — RMSE: $37,931, MAE: $33,606\n",
            "Logan, UT metro area           — RMSE: $154,207, MAE: $97,465\n",
            "Logansport, IN metro area      — RMSE: $29,688, MAE: $24,555\n",
            "London, KY metro area          — RMSE: $26,893, MAE: $23,585\n",
            "Longview, TX metro area        — RMSE: $67,447, MAE: $54,573\n",
            "Longview, WA metro area        — RMSE: $90,757, MAE: $77,576\n",
            "Los Alamos, NM metro area      — RMSE: $122,830, MAE: $98,044\n",
            "Los Angeles, CA metro area     — RMSE: $199,241, MAE: $169,429\n",
            "Louisville, KY metro area      — RMSE: $45,789, MAE: $39,874\n",
            "Lubbock, TX metro area         — RMSE: $51,019, MAE: $38,730\n",
            "Ludington, MI metro area       — RMSE: $62,380, MAE: $44,495\n",
            "Lufkin, TX metro area          — RMSE: $84,287, MAE: $44,817\n",
            "Lumberton, NC metro area       — RMSE: $39,277, MAE: $30,933\n",
            "Lynchburg, VA metro area       — RMSE: $74,438, MAE: $63,532\n",
            "Macomb, IL metro area          — RMSE: $19,444, MAE: $16,005\n",
            "Macon, GA metro area           — RMSE: $84,684, MAE: $75,953\n",
            "Madera, CA metro area          — RMSE: $76,058, MAE: $68,154\n",
            "Madison, IN metro area         — RMSE: $27,798, MAE: $19,280\n",
            "Madison, WI metro area         — RMSE: $81,406, MAE: $69,158\n",
            "Madisonville, KY metro area    — RMSE: $154,065, MAE: $59,674\n",
            "Magnolia, AR metro area        — RMSE: $54,297, MAE: $40,553\n",
            "Malone, NY metro area          — RMSE: $59,485, MAE: $50,752\n",
            "Malvern, AR metro area         — RMSE: $103,995, MAE: $44,569\n",
            "Manchester, NH metro area      — RMSE: $62,057, MAE: $58,070\n",
            "Manhattan, KS metro area       — RMSE: $69,036, MAE: $47,833\n",
            "Manitowoc, WI metro area       — RMSE: $62,562, MAE: $40,821\n",
            "Mansfield, OH metro area       — RMSE: $96,413, MAE: $70,958\n",
            "Marietta, OH metro area        — RMSE: $72,118, MAE: $43,576\n",
            "Marinette, WI metro area       — RMSE: $44,389, MAE: $37,832\n",
            "Marion, IN metro area          — RMSE: $37,280, MAE: $32,466\n",
            "Marion, NC metro area          — RMSE: $32,772, MAE: $29,626\n",
            "Marion, OH metro area          — RMSE: $29,427, MAE: $22,977\n",
            "Marquette, MI metro area       — RMSE: $127,998, MAE: $98,454\n",
            "Marshall, MN metro area        — RMSE: $78,194, MAE: $48,861\n",
            "Marshall, MO metro area        — RMSE: $46,304, MAE: $38,997\n",
            "Marshalltown, IA metro area    — RMSE: $46,844, MAE: $36,340\n",
            "Martin, TN metro area          — RMSE: $86,032, MAE: $59,880\n",
            "Martinsville, VA metro area    — RMSE: $50,404, MAE: $36,151\n",
            "Maryville, MO metro area       — RMSE: $31,330, MAE: $24,538\n",
            "Mason City, IA metro area      — RMSE: $45,300, MAE: $36,536\n",
            "Mayfield, KY metro area        — RMSE: $20,536, MAE: $14,907\n",
            "Maysville, KY metro area       — RMSE: $105,096, MAE: $83,849\n",
            "McAlester, OK metro area       — RMSE: $64,910, MAE: $47,609\n",
            "McAllen, TX metro area         — RMSE: $142,042, MAE: $113,292\n",
            "McComb, MS metro area          — RMSE: $37,243, MAE: $26,855\n",
            "McMinnville, TN metro area     — RMSE: $28,233, MAE: $23,961\n",
            "McPherson, KS metro area       — RMSE: $55,945, MAE: $34,615\n",
            "Meadville, PA metro area       — RMSE: $71,059, MAE: $50,152\n",
            "Medford, OR metro area         — RMSE: $87,477, MAE: $77,622\n",
            "Memphis, TN metro area         — RMSE: $64,569, MAE: $55,949\n",
            "Menomonie, WI metro area       — RMSE: $445,811, MAE: $166,293\n",
            "Merced, CA metro area          — RMSE: $122,132, MAE: $89,379\n",
            "Meridian, MS metro area        — RMSE: $81,048, MAE: $66,039\n",
            "Mexico, MO metro area          — RMSE: $31,272, MAE: $24,688\n",
            "Miami, FL metro area           — RMSE: $127,946, MAE: $115,982\n",
            "Miami, OK metro area           — RMSE: $157,116, MAE: $92,044\n",
            "Michigan City, IN metro area   — RMSE: $161,366, MAE: $101,217\n",
            "Middlesborough, KY metro area  — RMSE: $35,591, MAE: $27,456\n",
            "Midland, MI metro area         — RMSE: $62,781, MAE: $44,720\n",
            "Midland, TX metro area         — RMSE: $93,220, MAE: $49,636\n",
            "Milledgeville, GA metro area   — RMSE: $75,070, MAE: $60,440\n",
            "Milwaukee, WI metro area       — RMSE: $65,808, MAE: $56,850\n",
            "Minden, LA metro area          — RMSE: $22,804, MAE: $16,726\n",
            "Mineral Wells, TX metro area   — RMSE: $201,554, MAE: $150,935\n",
            "Minneapolis, MN metro area     — RMSE: $99,584, MAE: $82,767\n",
            "Minot, ND metro area           — RMSE: $52,845, MAE: $43,989\n",
            "Missoula, MT metro area        — RMSE: $266,979, MAE: $153,181\n",
            "Mitchell, SD metro area        — RMSE: $32,940, MAE: $23,441\n",
            "Moberly, MO metro area         — RMSE: $96,590, MAE: $63,576\n",
            "Mobile, AL metro area          — RMSE: $66,526, MAE: $57,352\n",
            "Modesto, CA metro area         — RMSE: $121,170, MAE: $99,341\n",
            "Monroe, LA metro area          — RMSE: $560,585, MAE: $322,441\n",
            "Monroe, MI metro area          — RMSE: $55,652, MAE: $45,779\n",
            "Montgomery County, PA metro ar — RMSE: $81,771, MAE: $67,220\n",
            "Montgomery, AL metro area      — RMSE: $81,372, MAE: $69,643\n",
            "Montrose, CO metro area        — RMSE: $306,502, MAE: $156,876\n",
            "Morehead City, NC metro area   — RMSE: $92,162, MAE: $74,573\n",
            "Morgan City, LA metro area     — RMSE: $69,659, MAE: $44,562\n",
            "Morgantown, WV metro area      — RMSE: $80,908, MAE: $72,620\n",
            "Morristown, TN metro area      — RMSE: $44,117, MAE: $38,021\n",
            "Moscow, ID metro area          — RMSE: $84,419, MAE: $64,270\n",
            "Moses Lake, WA metro area      — RMSE: $120,572, MAE: $94,869\n",
            "Moultrie, GA metro area        — RMSE: $53,274, MAE: $47,040\n",
            "Mount Airy, NC metro area      — RMSE: $44,806, MAE: $32,568\n",
            "Mount Gay, WV metro area       — RMSE: $41,600, MAE: $26,588\n",
            "Mount Pleasant, MI metro area  — RMSE: $46,094, MAE: $37,428\n",
            "Mount Pleasant, TX metro area  — RMSE: $129,828, MAE: $58,778\n",
            "Mount Sterling, KY metro area  — RMSE: $68,914, MAE: $53,332\n",
            "Mount Vernon, IL metro area    — RMSE: $47,855, MAE: $37,739\n",
            "Mount Vernon, OH metro area    — RMSE: $53,664, MAE: $43,123\n",
            "Mount Vernon, WA metro area    — RMSE: $535,878, MAE: $251,855\n",
            "Mountain Home, AR metro area   — RMSE: $51,613, MAE: $36,127\n",
            "Mountain Home, ID metro area   — RMSE: $50,451, MAE: $37,396\n",
            "Muncie, IN metro area          — RMSE: $37,651, MAE: $28,012\n",
            "Murray, KY metro area          — RMSE: $83,855, MAE: $63,064\n",
            "Muscatine, IA metro area       — RMSE: $44,095, MAE: $35,166\n",
            "Muskegon, MI metro area        — RMSE: $61,352, MAE: $44,796\n",
            "Muskogee, OK metro area        — RMSE: $39,454, MAE: $21,566\n",
            "Myrtle Beach, SC metro area    — RMSE: $91,732, MAE: $73,045\n",
            "Nacogdoches, TX metro area     — RMSE: $85,392, MAE: $79,799\n",
            "Napa, CA metro area            — RMSE: $331,147, MAE: $268,054\n",
            "Naples, FL metro area          — RMSE: $180,797, MAE: $155,525\n",
            "Nashville, TN metro area       — RMSE: $53,303, MAE: $48,417\n",
            "Nassau County, NY metro area   — RMSE: $134,118, MAE: $117,388\n",
            "Natchez, MS metro area         — RMSE: $101,140, MAE: $61,361\n",
            "Natchitoches, LA metro area    — RMSE: $32,465, MAE: $22,492\n",
            "New Bern, NC metro area        — RMSE: $153,503, MAE: $97,228\n",
            "New Brunswick, NJ metro area   — RMSE: $95,278, MAE: $77,270\n",
            "New Castle, IN metro area      — RMSE: $55,546, MAE: $43,694\n",
            "New Castle, PA metro area      — RMSE: $43,102, MAE: $32,676\n",
            "New Haven, CT metro area       — RMSE: $55,782, MAE: $47,024\n",
            "New Orleans, LA metro area     — RMSE: $38,451, MAE: $30,795\n",
            "New Philadelphia, OH metro are — RMSE: $44,599, MAE: $38,364\n",
            "New Ulm, MN metro area         — RMSE: $50,592, MAE: $34,024\n",
            "New York, NY metro area        — RMSE: $229,699, MAE: $186,465\n",
            "Newark, NJ metro area          — RMSE: $135,681, MAE: $118,821\n",
            "Newberry, SC metro area        — RMSE: $180,827, MAE: $84,764\n",
            "Newport, OR metro area         — RMSE: $126,163, MAE: $106,839\n",
            "Newport, TN metro area         — RMSE: $46,101, MAE: $40,955\n",
            "Niles, MI metro area           — RMSE: $59,306, MAE: $38,133\n",
            "Nogales, AZ metro area         — RMSE: $91,448, MAE: $72,711\n",
            "Norfolk, NE metro area         — RMSE: $190,615, MAE: $102,942\n",
            "North Platte, NE metro area    — RMSE: $24,880, MAE: $18,242\n",
            "North Port, FL metro area      — RMSE: $48,958, MAE: $43,595\n",
            "North Vernon, IN metro area    — RMSE: $52,857, MAE: $37,311\n",
            "North Wilkesboro, NC metro are — RMSE: $64,611, MAE: $46,248\n",
            "Norwalk, OH metro area         — RMSE: $61,058, MAE: $53,027\n",
            "Norwich, CT metro area         — RMSE: $64,472, MAE: $59,921\n",
            "Oak Harbor, WA metro area      — RMSE: $178,483, MAE: $161,882\n",
            "Oakland, CA metro area         — RMSE: $191,614, MAE: $157,760\n",
            "Ocala, FL metro area           — RMSE: $109,624, MAE: $92,488\n",
            "Ocean City, NJ metro area      — RMSE: $291,857, MAE: $214,170\n",
            "Odessa, TX metro area          — RMSE: $35,123, MAE: $30,036\n",
            "Ogden, UT metro area           — RMSE: $96,260, MAE: $75,651\n",
            "Ogdensburg, NY metro area      — RMSE: $51,514, MAE: $36,870\n",
            "Oil City, PA metro area        — RMSE: $40,044, MAE: $35,179\n",
            "Okeechobee, FL metro area      — RMSE: $71,013, MAE: $64,228\n",
            "Oklahoma City, OK metro area   — RMSE: $78,971, MAE: $64,544\n",
            "Olean, NY metro area           — RMSE: $115,009, MAE: $78,746\n",
            "Olympia, WA metro area         — RMSE: $96,807, MAE: $76,959\n",
            "Omaha, NE metro area           — RMSE: $31,079, MAE: $24,866\n",
            "Oneonta, NY metro area         — RMSE: $41,212, MAE: $31,021\n",
            "Ontario, OR metro area         — RMSE: $148,442, MAE: $92,443\n",
            "Opelousas, LA metro area       — RMSE: $23,406, MAE: $21,218\n",
            "Orangeburg, SC metro area      — RMSE: $74,348, MAE: $58,443\n",
            "Orlando, FL metro area         — RMSE: $85,459, MAE: $76,385\n",
            "Oshkosh, WI metro area         — RMSE: $50,126, MAE: $41,852\n",
            "Oskaloosa, IA metro area       — RMSE: $68,120, MAE: $48,282\n",
            "Othello, WA metro area         — RMSE: $44,229, MAE: $35,746\n",
            "Ottawa, IL metro area          — RMSE: $90,099, MAE: $59,735\n",
            "Ottawa, KS metro area          — RMSE: $35,456, MAE: $26,182\n",
            "Ottumwa, IA metro area         — RMSE: $42,614, MAE: $35,584\n",
            "Owatonna, MN metro area        — RMSE: $34,616, MAE: $28,694\n",
            "Owensboro, KY metro area       — RMSE: $130,073, MAE: $73,949\n",
            "Oxford, MS metro area          — RMSE: $116,849, MAE: $88,093\n",
            "Oxnard, CA metro area          — RMSE: $235,354, MAE: $176,697\n",
            "Ozark, AL metro area           — RMSE: $60,666, MAE: $53,115\n",
            "Paducah, KY metro area         — RMSE: $72,421, MAE: $51,768\n",
            "Pahrump, NV metro area         — RMSE: $108,161, MAE: $85,249\n",
            "Palatka, FL metro area         — RMSE: $23,622, MAE: $17,558\n",
            "Palestine, TX metro area       — RMSE: $57,243, MAE: $41,175\n",
            "Palm Bay, FL metro area        — RMSE: $103,458, MAE: $67,025\n",
            "Pampa, TX metro area           — RMSE: $38,667, MAE: $22,686\n",
            "Panama City, FL metro area     — RMSE: $62,422, MAE: $49,786\n",
            "Paragould, AR metro area       — RMSE: $42,666, MAE: $33,078\n",
            "Paris, TN metro area           — RMSE: $44,572, MAE: $31,342\n",
            "Paris, TX metro area           — RMSE: $79,498, MAE: $59,644\n",
            "Parkersburg, WV metro area     — RMSE: $30,128, MAE: $21,913\n",
            "Parsons, KS metro area         — RMSE: $47,333, MAE: $43,459\n",
            "Payson, AZ metro area          — RMSE: $112,465, MAE: $103,696\n",
            "Pearsall, TX metro area        — RMSE: $48,125, MAE: $37,339\n",
            "Pecos, TX metro area           — RMSE: $64,755, MAE: $48,370\n",
            "Pella, IA metro area           — RMSE: $59,452, MAE: $44,072\n",
            "Pensacola, FL metro area       — RMSE: $131,910, MAE: $80,748\n",
            "Peoria, IL metro area          — RMSE: $65,396, MAE: $44,967\n",
            "Peru, IN metro area            — RMSE: $52,188, MAE: $43,661\n",
            "Philadelphia, PA metro area    — RMSE: $70,745, MAE: $49,605\n",
            "Phoenix, AZ metro area         — RMSE: $109,898, MAE: $94,966\n",
            "Picayune, MS metro area        — RMSE: $69,973, MAE: $49,761\n",
            "Pierre, SD metro area          — RMSE: $52,882, MAE: $42,807\n",
            "Pine Bluff, AR metro area      — RMSE: $36,157, MAE: $27,506\n",
            "Pinehurst, NC metro area       — RMSE: $87,649, MAE: $67,080\n",
            "Pittsburg, KS metro area       — RMSE: $113,261, MAE: $59,711\n",
            "Pittsburgh, PA metro area      — RMSE: $64,788, MAE: $53,523\n",
            "Pittsfield, MA metro area      — RMSE: $65,254, MAE: $50,082\n",
            "Plainview, TX metro area       — RMSE: $39,692, MAE: $31,294\n",
            "Platteville, WI metro area     — RMSE: $31,401, MAE: $26,056\n",
            "Plattsburgh, NY metro area     — RMSE: $152,320, MAE: $73,004\n",
            "Plymouth, IN metro area        — RMSE: $94,218, MAE: $61,880\n",
            "Pocatello, ID metro area       — RMSE: $40,931, MAE: $34,348\n",
            "Point Pleasant, WV metro area  — RMSE: $40,990, MAE: $29,600\n",
            "Ponca City, OK metro area      — RMSE: $293,003, MAE: $99,966\n",
            "Pontiac, IL metro area         — RMSE: $44,257, MAE: $37,045\n",
            "Poplar Bluff, MO metro area    — RMSE: $38,359, MAE: $23,879\n",
            "Port Angeles, WA metro area    — RMSE: $81,891, MAE: $67,811\n",
            "Port Lavaca, TX metro area     — RMSE: $35,288, MAE: $27,212\n",
            "Port St. Lucie, FL metro area  — RMSE: $138,282, MAE: $92,880\n",
            "Portales, NM metro area        — RMSE: $95,970, MAE: $51,039\n",
            "Portland, ME metro area        — RMSE: $160,880, MAE: $92,337\n",
            "Portland, OR metro area        — RMSE: $119,868, MAE: $106,883\n",
            "Portsmouth, OH metro area      — RMSE: $55,715, MAE: $37,791\n",
            "Pottsville, PA metro area      — RMSE: $45,838, MAE: $35,926\n",
            "Poughkeepsie, NY metro area    — RMSE: $61,138, MAE: $54,455\n",
            "Prescott Valley, AZ metro area — RMSE: $85,427, MAE: $72,933\n",
            "Price, UT metro area           — RMSE: $52,700, MAE: $36,343\n",
            "Prineville, OR metro area      — RMSE: $46,137, MAE: $31,746\n",
            "Providence, RI metro area      — RMSE: $85,313, MAE: $74,806\n",
            "Provo, UT metro area           — RMSE: $132,195, MAE: $118,439\n",
            "Pueblo, CO metro area          — RMSE: $79,619, MAE: $65,155\n",
            "Pullman, WA metro area         — RMSE: $83,579, MAE: $73,519\n",
            "Punta Gorda, FL metro area     — RMSE: $82,822, MAE: $63,715\n",
            "Quincy, IL metro area          — RMSE: $54,530, MAE: $39,217\n",
            "Racine, WI metro area          — RMSE: $55,179, MAE: $47,818\n",
            "Raleigh, NC metro area         — RMSE: $100,068, MAE: $69,753\n",
            "Rapid City, SD metro area      — RMSE: $73,276, MAE: $58,784\n",
            "Raymondville, TX metro area    — RMSE: $99,938, MAE: $80,568\n",
            "Reading, PA metro area         — RMSE: $58,065, MAE: $48,769\n",
            "Red Bluff, CA metro area       — RMSE: $35,243, MAE: $27,346\n",
            "Red Wing, MN metro area        — RMSE: $62,785, MAE: $49,855\n",
            "Redding, CA metro area         — RMSE: $142,264, MAE: $85,599\n",
            "Reno, NV metro area            — RMSE: $197,506, MAE: $164,805\n",
            "Rexburg, ID metro area         — RMSE: $67,232, MAE: $49,732\n",
            "Richmond, IN metro area        — RMSE: $38,868, MAE: $31,770\n",
            "Richmond, KY metro area        — RMSE: $46,557, MAE: $33,256\n",
            "Richmond, VA metro area        — RMSE: $53,548, MAE: $39,485\n",
            "Rio Grande City, TX metro area — RMSE: $31,961, MAE: $25,827\n",
            "Riverside, CA metro area       — RMSE: $40,233, MAE: $34,107\n",
            "Riverton, WY metro area        — RMSE: $85,160, MAE: $69,026\n",
            "Roanoke Rapids, NC metro area  — RMSE: $18,443, MAE: $14,295\n",
            "Roanoke, VA metro area         — RMSE: $58,239, MAE: $49,591\n",
            "Rochelle, IL metro area        — RMSE: $49,985, MAE: $40,292\n",
            "Rochester, MN metro area       — RMSE: $74,827, MAE: $63,409\n",
            "Rochester, NY metro area       — RMSE: $41,325, MAE: $36,447\n",
            "Rock Springs, WY metro area    — RMSE: $27,844, MAE: $24,463\n",
            "Rockford, IL metro area        — RMSE: $17,587, MAE: $15,745\n",
            "Rockingham County, NH metro ar — RMSE: $83,007, MAE: $65,744\n",
            "Rockingham, NC metro area      — RMSE: $54,985, MAE: $43,084\n",
            "Rockport, TX metro area        — RMSE: $89,204, MAE: $64,740\n",
            "Rocky Mount, NC metro area     — RMSE: $55,296, MAE: $43,291\n",
            "Rolla, MO metro area           — RMSE: $90,751, MAE: $74,752\n",
            "Rome, GA metro area            — RMSE: $55,816, MAE: $29,938\n",
            "Roseburg, OR metro area        — RMSE: $87,694, MAE: $70,729\n",
            "Roswell, NM metro area         — RMSE: $52,690, MAE: $37,837\n",
            "Ruidoso, NM metro area         — RMSE: $143,547, MAE: $112,238\n",
            "Russellville, AR metro area    — RMSE: $52,039, MAE: $42,941\n",
            "Ruston, LA metro area          — RMSE: $41,497, MAE: $31,671\n",
            "Rutland, VT metro area         — RMSE: $78,740, MAE: $63,567\n",
            "Sacramento, CA metro area      — RMSE: $135,010, MAE: $123,649\n",
            "Safford, AZ metro area         — RMSE: $32,161, MAE: $26,666\n",
            "Saginaw, MI metro area         — RMSE: $51,365, MAE: $39,182\n",
            "Salem, OH metro area           — RMSE: $26,613, MAE: $20,472\n",
            "Salem, OR metro area           — RMSE: $108,855, MAE: $94,491\n",
            "Salina, KS metro area          — RMSE: $48,699, MAE: $34,461\n",
            "Salinas, CA metro area         — RMSE: $202,290, MAE: $145,730\n",
            "Salt Lake City, UT metro area  — RMSE: $136,488, MAE: $122,479\n",
            "San Angelo, TX metro area      — RMSE: $124,028, MAE: $96,799\n",
            "San Antonio, TX metro area     — RMSE: $83,360, MAE: $71,523\n",
            "San Diego, CA metro area       — RMSE: $217,921, MAE: $196,875\n",
            "San Francisco, CA metro area   — RMSE: $257,596, MAE: $208,751\n",
            "San Jose, CA metro area        — RMSE: $381,854, MAE: $337,297\n",
            "San Luis Obispo, CA metro area — RMSE: $203,841, MAE: $194,079\n",
            "San Rafael, CA metro area      — RMSE: $390,539, MAE: $325,384\n",
            "Sandpoint, ID metro area       — RMSE: $149,099, MAE: $112,339\n",
            "Sandusky, OH metro area        — RMSE: $90,226, MAE: $70,047\n",
            "Sanford, NC metro area         — RMSE: $60,435, MAE: $47,596\n",
            "Santa Cruz, CA metro area      — RMSE: $220,013, MAE: $184,174\n",
            "Santa Fe, NM metro area        — RMSE: $97,149, MAE: $91,463\n",
            "Santa Maria, CA metro area     — RMSE: $295,322, MAE: $254,685\n",
            "Santa Rosa, CA metro area      — RMSE: $212,649, MAE: $183,532\n",
            "Sault Ste. Marie, MI metro are — RMSE: $41,592, MAE: $37,205\n",
            "Savannah, GA metro area        — RMSE: $70,588, MAE: $53,742\n",
            "Sayre, PA metro area           — RMSE: $57,190, MAE: $43,341\n",
            "Scottsbluff, NE metro area     — RMSE: $50,391, MAE: $42,061\n",
            "Scottsboro, AL metro area      — RMSE: $53,864, MAE: $43,215\n",
            "Scottsburg, IN metro area      — RMSE: $46,928, MAE: $23,861\n",
            "Scranton, PA metro area        — RMSE: $38,547, MAE: $31,882\n",
            "Searcy, AR metro area          — RMSE: $37,938, MAE: $31,389\n",
            "Seattle, WA metro area         — RMSE: $137,015, MAE: $110,992\n",
            "Sebastian, FL metro area       — RMSE: $125,517, MAE: $106,404\n",
            "Sebring, FL metro area         — RMSE: $57,900, MAE: $46,683\n",
            "Sedalia, MO metro area         — RMSE: $70,706, MAE: $54,846\n",
            "Selinsgrove, PA metro area     — RMSE: $48,809, MAE: $41,493\n",
            "Selma, AL metro area           — RMSE: $41,449, MAE: $32,920\n",
            "Seneca Falls, NY metro area    — RMSE: $51,291, MAE: $39,910\n",
            "Seneca, SC metro area          — RMSE: $54,094, MAE: $40,933\n",
            "Sevierville, TN metro area     — RMSE: $72,658, MAE: $61,520\n",
            "Seymour, IN metro area         — RMSE: $43,327, MAE: $28,722\n",
            "Shawano, WI metro area         — RMSE: $63,704, MAE: $56,606\n",
            "Shawnee, OK metro area         — RMSE: $68,631, MAE: $53,955\n",
            "Sheboygan, WI metro area       — RMSE: $54,539, MAE: $48,910\n",
            "Shelby, NC metro area          — RMSE: $98,735, MAE: $70,556\n",
            "Shelbyville, TN metro area     — RMSE: $48,810, MAE: $36,536\n",
            "Shelton, WA metro area         — RMSE: $55,147, MAE: $47,207\n",
            "Sheridan, WY metro area        — RMSE: $190,162, MAE: $94,754\n",
            "Sherman, TX metro area         — RMSE: $33,344, MAE: $24,049\n",
            "Show Low, AZ metro area        — RMSE: $75,488, MAE: $65,997\n",
            "Shreveport, LA metro area      — RMSE: $104,574, MAE: $86,939\n",
            "Sidney, OH metro area          — RMSE: $89,210, MAE: $57,585\n",
            "Sierra Vista, AZ metro area    — RMSE: $69,812, MAE: $61,982\n",
            "Sikeston, MO metro area        — RMSE: $28,394, MAE: $21,689\n",
            "Silver City, NM metro area     — RMSE: $56,506, MAE: $43,778\n",
            "Sioux City, IA metro area      — RMSE: $58,315, MAE: $40,606\n",
            "Sioux Falls, SD metro area     — RMSE: $61,895, MAE: $48,989\n",
            "Snyder, TX metro area          — RMSE: $71,010, MAE: $58,950\n",
            "Somerset, KY metro area        — RMSE: $53,588, MAE: $38,111\n",
            "Somerset, PA metro area        — RMSE: $266,794, MAE: $158,898\n",
            "Sonora, CA metro area          — RMSE: $64,027, MAE: $50,095\n",
            "South Bend, IN metro area      — RMSE: $442,179, MAE: $219,788\n",
            "Spartanburg, SC metro area     — RMSE: $74,437, MAE: $57,503\n",
            "Spearfish, SD metro area       — RMSE: $183,638, MAE: $162,461\n",
            "Spencer, IA metro area         — RMSE: $66,804, MAE: $46,124\n",
            "Spirit Lake, IA metro area     — RMSE: $84,954, MAE: $71,608\n",
            "Spokane, WA metro area         — RMSE: $108,850, MAE: $83,593\n",
            "Springfield, IL metro area     — RMSE: $61,137, MAE: $48,979\n",
            "Springfield, MA metro area     — RMSE: $49,700, MAE: $44,556\n",
            "Springfield, MO metro area     — RMSE: $65,488, MAE: $50,328\n",
            "Springfield, OH metro area     — RMSE: $52,149, MAE: $47,814\n",
            "St. Cloud, MN metro area       — RMSE: $76,275, MAE: $63,583\n",
            "St. George, UT metro area      — RMSE: $78,135, MAE: $70,785\n",
            "St. Joseph, MO metro area      — RMSE: $80,769, MAE: $68,784\n",
            "St. Louis, MO metro area       — RMSE: $68,787, MAE: $46,652\n",
            "St. Marys, GA metro area       — RMSE: $120,429, MAE: $85,773\n",
            "St. Marys, PA metro area       — RMSE: $34,710, MAE: $27,502\n",
            "Starkville, MS metro area      — RMSE: $112,674, MAE: $92,257\n",
            "State College, PA metro area   — RMSE: $73,730, MAE: $60,875\n",
            "Statesboro, GA metro area      — RMSE: $135,416, MAE: $121,633\n",
            "Staunton, VA metro area        — RMSE: $29,636, MAE: $22,972\n",
            "Steamboat Springs, CO metro ar — RMSE: $706,793, MAE: $491,412\n",
            "Stephenville, TX metro area    — RMSE: $61,019, MAE: $48,702\n",
            "Sterling, CO metro area        — RMSE: $63,023, MAE: $41,139\n",
            "Sterling, IL metro area        — RMSE: $33,760, MAE: $27,132\n",
            "Stevens Point, WI metro area   — RMSE: $52,093, MAE: $45,535\n",
            "Stillwater, OK metro area      — RMSE: $205,656, MAE: $117,478\n",
            "Stockton, CA metro area        — RMSE: $106,833, MAE: $93,447\n",
            "Storm Lake, IA metro area      — RMSE: $61,797, MAE: $53,426\n",
            "Sturgis, MI metro area         — RMSE: $38,219, MAE: $32,148\n",
            "Sulphur Springs, TX metro area — RMSE: $58,971, MAE: $36,504\n",
            "Summerville, GA metro area     — RMSE: $38,909, MAE: $31,547\n",
            "Sumter, SC metro area          — RMSE: $66,661, MAE: $53,112\n",
            "Sunbury, PA metro area         — RMSE: $47,365, MAE: $39,123\n",
            "Susanville, CA metro area      — RMSE: $57,635, MAE: $52,286\n",
            "Sweetwater, TX metro area      — RMSE: $45,947, MAE: $31,009\n",
            "Syracuse, NY metro area        — RMSE: $41,553, MAE: $37,487\n",
            "Tacoma, WA metro area          — RMSE: $83,494, MAE: $68,860\n",
            "Tahlequah, OK metro area       — RMSE: $90,675, MAE: $73,258\n",
            "Talladega, AL metro area       — RMSE: $55,560, MAE: $42,725\n",
            "Tallahassee, FL metro area     — RMSE: $72,644, MAE: $59,654\n",
            "Tampa, FL metro area           — RMSE: $90,294, MAE: $68,940\n",
            "Taos, NM metro area            — RMSE: $452,691, MAE: $343,469\n",
            "Taylorville, IL metro area     — RMSE: $24,794, MAE: $17,544\n",
            "Terre Haute, IN metro area     — RMSE: $22,658, MAE: $18,240\n",
            "Texarkana, TX metro area       — RMSE: $26,199, MAE: $22,100\n",
            "The Dalles, OR metro area      — RMSE: $82,779, MAE: $63,945\n",
            "The Villages, FL metro area    — RMSE: $120,522, MAE: $93,399\n",
            "Thomaston, GA metro area       — RMSE: $39,360, MAE: $33,137\n",
            "Thomasville, GA metro area     — RMSE: $61,765, MAE: $47,666\n",
            "Tiffin, OH metro area          — RMSE: $72,064, MAE: $43,182\n",
            "Tifton, GA metro area          — RMSE: $24,154, MAE: $20,204\n",
            "Toccoa, GA metro area          — RMSE: $77,621, MAE: $53,890\n",
            "Toledo, OH metro area          — RMSE: $62,965, MAE: $53,197\n",
            "Topeka, KS metro area          — RMSE: $89,916, MAE: $73,332\n",
            "Torrington, CT metro area      — RMSE: $82,491, MAE: $71,915\n",
            "Traverse City, MI metro area   — RMSE: $50,923, MAE: $44,524\n",
            "Trenton, NJ metro area         — RMSE: $101,061, MAE: $82,084\n",
            "Troy, AL metro area            — RMSE: $68,349, MAE: $50,904\n",
            "Truckee, CA metro area         — RMSE: $375,289, MAE: $265,253\n",
            "Tucson, AZ metro area          — RMSE: $79,358, MAE: $71,822\n",
            "Tullahoma, TN metro area       — RMSE: $50,043, MAE: $44,891\n",
            "Tulsa, OK metro area           — RMSE: $65,914, MAE: $58,259\n",
            "Tupelo, MS metro area          — RMSE: $85,287, MAE: $71,511\n",
            "Tuscaloosa, AL metro area      — RMSE: $686,171, MAE: $232,556\n",
            "Twin Falls, ID metro area      — RMSE: $105,288, MAE: $78,994\n",
            "Tyler, TX metro area           — RMSE: $85,146, MAE: $72,118\n",
            "Ukiah, CA metro area           — RMSE: $413,403, MAE: $197,046\n",
            "Union City, TN metro area      — RMSE: $53,667, MAE: $47,483\n",
            "Union, SC metro area           — RMSE: $29,519, MAE: $24,244\n",
            "Urbana, OH metro area          — RMSE: $44,714, MAE: $40,361\n",
            "Utica, NY metro area           — RMSE: $68,857, MAE: $61,626\n",
            "Uvalde, TX metro area          — RMSE: $85,200, MAE: $68,398\n",
            "Valdosta, GA metro area        — RMSE: $60,028, MAE: $52,053\n",
            "Vallejo, CA metro area         — RMSE: $106,872, MAE: $84,113\n",
            "Van Wert, OH metro area        — RMSE: $29,510, MAE: $22,384\n",
            "Vermillion, SD metro area      — RMSE: $72,942, MAE: $58,680\n",
            "Vernal, UT metro area          — RMSE: $123,900, MAE: $92,479\n",
            "Vernon, TX metro area          — RMSE: $43,395, MAE: $34,772\n",
            "Vicksburg, MS metro area       — RMSE: $42,910, MAE: $35,771\n",
            "Victoria, TX metro area        — RMSE: $48,031, MAE: $32,110\n",
            "Vidalia, GA metro area         — RMSE: $70,997, MAE: $53,512\n",
            "Vincennes, IN metro area       — RMSE: $32,386, MAE: $23,358\n",
            "Vineland, NJ metro area        — RMSE: $62,249, MAE: $55,964\n",
            "Vineyard Haven, MA metro area  — RMSE: $696,849, MAE: $460,852\n",
            "Virginia Beach, VA metro area  — RMSE: $35,589, MAE: $29,133\n",
            "Visalia, CA metro area         — RMSE: $924,542, MAE: $378,779\n",
            "Wabash, IN metro area          — RMSE: $35,241, MAE: $29,149\n",
            "Waco, TX metro area            — RMSE: $64,507, MAE: $54,754\n",
            "Wahpeton, ND metro area        — RMSE: $49,779, MAE: $40,816\n",
            "Walla Walla, WA metro area     — RMSE: $166,433, MAE: $123,033\n",
            "Wapakoneta, OH metro area      — RMSE: $30,101, MAE: $22,931\n",
            "Warner Robins, GA metro area   — RMSE: $89,951, MAE: $83,141\n",
            "Warren, MI metro area          — RMSE: $68,446, MAE: $56,312\n",
            "Warren, PA metro area          — RMSE: $22,391, MAE: $18,987\n",
            "Warrensburg, MO metro area     — RMSE: $35,715, MAE: $30,149\n",
            "Warsaw, IN metro area          — RMSE: $119,851, MAE: $69,323\n",
            "Washington Court House, OH met — RMSE: $85,860, MAE: $60,178\n",
            "Washington, DC metro area      — RMSE: $254,175, MAE: $170,028\n",
            "Washington, IN metro area      — RMSE: $50,208, MAE: $36,641\n",
            "Washington, NC metro area      — RMSE: $105,829, MAE: $67,801\n",
            "Waterloo, IA metro area        — RMSE: $53,399, MAE: $39,034\n",
            "Watertown, NY metro area       — RMSE: $85,623, MAE: $62,181\n",
            "Watertown, SD metro area       — RMSE: $69,361, MAE: $53,542\n",
            "Watertown, WI metro area       — RMSE: $75,686, MAE: $57,021\n",
            "Wauchula, FL metro area        — RMSE: $48,059, MAE: $31,896\n",
            "Wausau, WI metro area          — RMSE: $54,937, MAE: $40,980\n",
            "Waycross, GA metro area        — RMSE: $148,657, MAE: $104,767\n",
            "Weatherford, OK metro area     — RMSE: $72,242, MAE: $61,364\n",
            "Weirton, WV metro area         — RMSE: $41,242, MAE: $33,183\n",
            "Wenatchee, WA metro area       — RMSE: $86,528, MAE: $69,297\n",
            "West Palm Beach, FL metro area — RMSE: $154,977, MAE: $132,993\n",
            "West Plains, MO metro area     — RMSE: $99,629, MAE: $70,094\n",
            "West Point, MS metro area      — RMSE: $127,671, MAE: $102,004\n",
            "Wheeling, WV metro area        — RMSE: $32,784, MAE: $25,955\n",
            "Whitewater, WI metro area      — RMSE: $113,688, MAE: $85,696\n",
            "Wichita Falls, TX metro area   — RMSE: $54,462, MAE: $44,797\n",
            "Wichita, KS metro area         — RMSE: $97,799, MAE: $74,754\n",
            "Williamsport, PA metro area    — RMSE: $293,228, MAE: $152,056\n",
            "Williston, ND metro area       — RMSE: $75,690, MAE: $63,304\n",
            "Willmar, MN metro area         — RMSE: $97,345, MAE: $81,662\n",
            "Wilmington, DE metro area      — RMSE: $59,229, MAE: $49,603\n",
            "Wilmington, NC metro area      — RMSE: $127,792, MAE: $82,663\n",
            "Wilmington, OH metro area      — RMSE: $93,645, MAE: $64,029\n",
            "Wilson, NC metro area          — RMSE: $64,338, MAE: $53,179\n",
            "Winchester, VA metro area      — RMSE: $83,647, MAE: $74,999\n",
            "Winfield, KS metro area        — RMSE: $33,237, MAE: $25,586\n",
            "Winnemucca, NV metro area      — RMSE: $55,740, MAE: $47,977\n",
            "Winona, MN metro area          — RMSE: $26,820, MAE: $23,078\n",
            "Winston-Salem, NC metro area   — RMSE: $51,693, MAE: $46,854\n",
            "Wisconsin Rapids, WI metro are — RMSE: $41,612, MAE: $34,124\n",
            "Woodward, OK metro area        — RMSE: $24,595, MAE: $18,444\n",
            "Wooster, OH metro area         — RMSE: $31,997, MAE: $28,372\n",
            "Worcester, MA metro area       — RMSE: $54,554, MAE: $45,136\n",
            "Worthington, MN metro area     — RMSE: $46,168, MAE: $38,591\n",
            "Yakima, WA metro area          — RMSE: $33,252, MAE: $29,053\n",
            "Yankton, SD metro area         — RMSE: $80,590, MAE: $62,757\n",
            "York, PA metro area            — RMSE: $58,800, MAE: $48,964\n",
            "Youngstown, OH metro area      — RMSE: $42,925, MAE: $35,229\n",
            "Yuba City, CA metro area       — RMSE: $135,863, MAE: $99,181\n",
            "Yuma, AZ metro area            — RMSE: $47,512, MAE: $26,764\n",
            "Zanesville, OH metro area      — RMSE: $69,160, MAE: $52,847\n",
            "Zapata, TX metro area          — RMSE: $31,647, MAE: $25,237\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Save data to start app ##"
      ],
      "metadata": {
        "id": "yltTMoHRzQlr"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# (1) Zip the models folder so you can download it\n",
        "!zip -r metro_models.zip metro_models\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wEKefFF6zV7y",
        "outputId": "3862e59a-740f-46a7-8b81-e66be659b0dc"
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "  adding: metro_models/ (stored 0%)\n",
            "  adding: metro_models/Macon_GA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Michigan_City_IN_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/London_KY_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Corvallis_OR_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Spartanburg_SC_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Albany_NY_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Brookings_OR_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Olympia_WA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Cañon_City_CO_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Raleigh_NC_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Green_Bay_WI_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Pittsfield_MA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Peoria_IL_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Meadville_PA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Paragould_AR_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Albemarle_NC_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Bluffton_IN_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Las_Cruces_NM_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/New_Castle_IN_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/McMinnville_TN_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/St._Louis_MO_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Oskaloosa_IA_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Taylorville_IL_metro_area.pkl (deflated 81%)\n",
            "  adding: metro_models/Del_Rio_TX_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Jefferson_City_MO_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Mount_Vernon_OH_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Texarkana_TX_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Spirit_Lake_IA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Platteville_WI_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Abilene_TX_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Stockton_CA_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Indianola_MS_metro_area.pkl (deflated 81%)\n",
            "  adding: metro_models/Vicksburg_MS_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Knoxville_TN_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Bemidji_MN_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Wheeling_WV_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/North_Port_FL_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Washington_DC_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Amsterdam_NY_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Waco_TX_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Sherman_TX_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Beckley_WV_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Seneca_SC_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Faribault_MN_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Vidalia_GA_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Tulsa_OK_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Ozark_AL_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Pierre_SD_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/California_MD_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Mitchell_SD_metro_area.pkl (deflated 81%)\n",
            "  adding: metro_models/Reno_NV_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Greenwood_SC_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Hagerstown_MD_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/New_Brunswick_NJ_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Amarillo_TX_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Las_Vegas_NV_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Gadsden_AL_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Murray_KY_metro_area.pkl (deflated 81%)\n",
            "  adding: metro_models/Bremerton_WA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Carbondale_IL_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Pottsville_PA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Buffalo_NY_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Fredericksburg_TX_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Greenwood_MS_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Denver_CO_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Columbia_MO_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Hutchinson_MN_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Lawrence_KS_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Natchitoches_LA_metro_area.pkl (deflated 81%)\n",
            "  adding: metro_models/Blacksburg_VA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Bucyrus_OH_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Montgomery_County_PA_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Dothan_AL_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Maryville_MO_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Lafayette_IN_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Batesville_AR_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Houma_LA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Los_Alamos_NM_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Beatrice_NE_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Evansville_IN_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Fort_Lauderdale_FL_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Shreveport_LA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Fernley_NV_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Bennettsville_SC_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Sacramento_CA_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Wichita_KS_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Truckee_CA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Santa_Maria_CA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Glenwood_Springs_CO_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Salem_OR_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Hudson_NY_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Ada_OK_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Grenada_MS_metro_area.pkl (deflated 81%)\n",
            "  adding: metro_models/Cookeville_TN_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Enid_OK_metro_area.pkl (deflated 81%)\n",
            "  adding: metro_models/Nogales_AZ_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Silver_City_NM_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Pampa_TX_metro_area.pkl (deflated 81%)\n",
            "  adding: metro_models/McComb_MS_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Fort_Morgan_CO_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Pahrump_NV_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Janesville_WI_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Terre_Haute_IN_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/El_Centro_CA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Johnstown_PA_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Fond_du_Lac_WI_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Frankfort_IN_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Tyler_TX_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Memphis_TN_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Wausau_WI_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Middlesborough_KY_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Juneau_AK_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Bartlesville_OK_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Scottsbluff_NE_metro_area.pkl (deflated 81%)\n",
            "  adding: metro_models/Bradford_PA_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Great_Falls_MT_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Sterling_CO_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Brownsville_TN_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Macomb_IL_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Chillicothe_OH_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Fayetteville_NC_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Salem_OH_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Henderson_NC_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Craig_CO_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Springfield_MA_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/St._Marys_GA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Malvern_AR_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Wabash_IN_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/South_Bend_IN_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/El_Dorado_AR_metro_area.pkl (deflated 81%)\n",
            "  adding: metro_models/Durant_OK_metro_area.pkl (deflated 81%)\n",
            "  adding: metro_models/Ellensburg_WA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Camden_NJ_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Jennings_LA_metro_area.pkl (deflated 81%)\n",
            "  adding: metro_models/Toccoa_GA_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Fort_Wayne_IN_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Columbus_IN_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Moscow_ID_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Sidney_OH_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Cedar_Rapids_IA_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Sedalia_MO_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Ashtabula_OH_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Columbus_MS_metro_area.pkl (deflated 81%)\n",
            "  adding: metro_models/Mason_City_IA_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Kokomo_IN_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/DuBois_PA_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/New_Bern_NC_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Ottawa_IL_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Toledo_OH_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Charleston_SC_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Jacksonville_NC_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Wisconsin_Rapids_WI_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Branson_MO_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Omaha_NE_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Jackson_MS_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Sweetwater_TX_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/McAlester_OK_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Saginaw_MI_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/North_Vernon_IN_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Norwich_CT_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Idaho_Falls_ID_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Worcester_MA_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Pine_Bluff_AR_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Niles_MI_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Little_Rock_AR_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Forest_City_NC_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Somerset_KY_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Winnemucca_NV_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Campbellsville_KY_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Washington_NC_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Glens_Falls_NY_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Barre_VT_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Lake_Charles_LA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/San_Diego_CA_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Vineyard_Haven_MA_metro_area.pkl (deflated 78%)\n",
            "  adding: metro_models/Riverside_CA_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Lewiston_ME_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Greenville_OH_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Dumas_TX_metro_area.pkl (deflated 81%)\n",
            "  adding: metro_models/Detroit_MI_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Goldsboro_NC_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Rockingham_NC_metro_area.pkl (deflated 81%)\n",
            "  adding: metro_models/Ashland_OH_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Deming_NM_metro_area.pkl (deflated 81%)\n",
            "  adding: metro_models/Watertown_NY_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Anniston_AL_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Roswell_NM_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Oil_City_PA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/New_Ulm_MN_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Mobile_AL_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Bedford_IN_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Hermiston_OR_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Maysville_KY_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Elizabethtown_KY_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Marion_OH_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Price_UT_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/College_Station_TX_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Missoula_MT_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Fairfield_IA_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Gillette_WY_metro_area.pkl (deflated 81%)\n",
            "  adding: metro_models/Valdosta_GA_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Battle_Creek_MI_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Pearsall_TX_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/North_Platte_NE_metro_area.pkl (deflated 81%)\n",
            "  adding: metro_models/Poplar_Bluff_MO_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Steamboat_Springs_CO_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Dayton_OH_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Torrington_CT_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Ann_Arbor_MI_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Tiffin_OH_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Dixon_IL_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Bloomington_IL_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Lawrenceburg_TN_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Butte_MT_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Crestview_FL_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Marshalltown_IA_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/LaGrange_GA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Gulfport_MS_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/San_Luis_Obispo_CA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Palatka_FL_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Camden_AR_metro_area.pkl (deflated 81%)\n",
            "  adding: metro_models/Duncan_OK_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Ukiah_CA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Topeka_KS_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Madison_IN_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Freeport_IL_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Huntsville_AL_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Durango_CO_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Minot_ND_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Portales_NM_metro_area.pkl (deflated 81%)\n",
            "  adding: metro_models/Rockford_IL_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Seattle_WA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Lake_City_FL_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Kirksville_MO_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Georgetown_SC_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Bangor_ME_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Watertown_WI_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Houghton_MI_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Yuma_AZ_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/New_Castle_PA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Manchester_NH_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Hereford_TX_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Burley_ID_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Barnstable_Town_MA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Salt_Lake_City_UT_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Adrian_MI_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Salinas_CA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Enterprise_AL_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Milledgeville_GA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Kingsville_TX_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Florence_AL_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Talladega_AL_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Harrison_AR_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Kendallville_IN_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Selinsgrove_PA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Punta_Gorda_FL_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Albany_GA_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Logansport_IN_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Eureka_CA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Auburn_IN_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Jackson_TN_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Beaver_Dam_WI_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Sierra_Vista_AZ_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Bay_City_MI_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/McAllen_TX_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Fremont_OH_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Manhattan_KS_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Kill_Devil_Hills_NC_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Red_Bluff_CA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Canton_OH_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Storm_Lake_IA_metro_area.pkl (deflated 81%)\n",
            "  adding: metro_models/Chico_CA_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Corinth_MS_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Raymondville_TX_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Bloomington_IN_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Celina_OH_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Eau_Claire_WI_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Martin_TN_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Jackson_MI_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Hammond_LA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Grand_Rapids_MI_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Rockingham_County_NH_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Mountain_Home_ID_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Portland_OR_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Cullman_AL_metro_area.pkl (deflated 78%)\n",
            "  adding: metro_models/Cullowhee_NC_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Waycross_GA_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Gallup_NM_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Clinton_IA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Mount_Vernon_WA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Huntsville_TX_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Greenville_NC_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Shelbyville_TN_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Tupelo_MS_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Borger_TX_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Lock_Haven_PA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Grand_Rapids_MN_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Altoona_PA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Sterling_IL_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Vernon_TX_metro_area.pkl (deflated 81%)\n",
            "  adding: metro_models/Davenport_IA_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Seymour_IN_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Allentown_PA_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Corsicana_TX_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Morristown_TN_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Big_Spring_TX_metro_area.pkl (deflated 81%)\n",
            "  adding: metro_models/Mineral_Wells_TX_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Statesboro_GA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Erie_PA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Charleston_WV_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Lewisburg_TN_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Dyersburg_TN_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Tucson_AZ_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Port_Angeles_WA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Gary_IN_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/New_York_NY_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Laramie_WY_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Newport_OR_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Jackson_OH_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Mount_Sterling_KY_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Baton_Rouge_LA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Rockport_TX_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Findlay_OH_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Morgan_City_LA_metro_area.pkl (deflated 81%)\n",
            "  adding: metro_models/Pinehurst_NC_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Walla_Walla_WA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Newport_TN_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Russellville_AR_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Rio_Grande_City_TX_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Coeur_d'Alene_ID_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Payson_AZ_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Wauchula_FL_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Laurinburg_NC_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Richmond_KY_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Decatur_IN_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Hanford_CA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Selma_AL_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Cortland_NY_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Jacksonville_TX_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Mansfield_OH_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Show_Low_AZ_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Victoria_TX_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Poughkeepsie_NY_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Fort_Smith_AR_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Farmington_MO_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Clearlake_CA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Glasgow_KY_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Portsmouth_OH_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Fort_Polk_South_LA_metro_area.pkl (deflated 81%)\n",
            "  adding: metro_models/Sault_Ste._Marie_MI_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Plattsburgh_NY_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Muscatine_IA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Norfolk_NE_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Safford_AZ_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Boulder_CO_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Elko_NV_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Hot_Springs_AR_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Gainesville_FL_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Sturgis_MI_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Longview_WA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Brevard_NC_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Martinsville_VA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Atlanta_GA_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Huron_SD_metro_area.pkl (deflated 81%)\n",
            "  adding: metro_models/Durham_NC_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Modesto_CA_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Wilmington_NC_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Midland_TX_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Miami_FL_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Dublin_GA_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Thomaston_GA_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Parkersburg_WV_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Malone_NY_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Marshall_MN_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Lumberton_NC_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Bluefield_WV_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Central_City_KY_metro_area.pkl (deflated 81%)\n",
            "  adding: metro_models/Anchorage_AK_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Rochelle_IL_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Nashville_TN_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Odessa_TX_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Fitzgerald_GA_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Americus_GA_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Plymouth_IN_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Beaumont_TX_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Alexandria_LA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Manitowoc_WI_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Astoria_OR_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Lufkin_TX_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Calhoun_GA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Scottsboro_AL_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Arcadia_FL_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Ludington_MI_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Clewiston_FL_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Van_Wert_OH_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Lake_Havasu_City_AZ_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Lincoln_NE_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Prineville_OR_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Bay_City_TX_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Brenham_TX_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Ocala_FL_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Ocean_City_NJ_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Weirton_WV_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Medford_OR_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Lima_OH_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Wooster_OH_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Effingham_IL_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Cape_Girardeau_MO_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Sioux_City_IA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Fresno_CA_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Mount_Pleasant_TX_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Kennett_MO_metro_area.pkl (deflated 81%)\n",
            "  adding: metro_models/Starkville_MS_metro_area.pkl (deflated 81%)\n",
            "  adding: metro_models/Lexington_NE_metro_area.pkl (deflated 81%)\n",
            "  adding: metro_models/Charleston_IL_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Providence_RI_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Nacogdoches_TX_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Harrisburg_PA_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Brookhaven_MS_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Holland_MI_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Yankton_SD_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Cheyenne_WY_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Port_St._Lucie_FL_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Winston-Salem_NC_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Redding_CA_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Sioux_Falls_SD_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Brunswick_GA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Troy_AL_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Elmira_NY_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Homosassa_Springs_FL_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Washington_Court_House_OH_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Greeneville_TN_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Williamsport_PA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Emporia_KS_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Panama_City_FL_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Oxford_MS_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Marinette_WI_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Greensburg_IN_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/State_College_PA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Dodge_City_KS_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Rolla_MO_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Austin_TX_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Garden_City_KS_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Warsaw_IN_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Springfield_MO_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Tallahassee_FL_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Crawfordsville_IN_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Muskegon_MI_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Owensboro_KY_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Kankakee_IL_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Norwalk_OH_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Ruston_LA_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Big_Rapids_MI_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Cape_Coral_FL_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/McPherson_KS_metro_area.pkl (deflated 81%)\n",
            "  adding: metro_models/Miami_OK_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/St._Joseph_MO_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Granbury_TX_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Ogden_UT_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Lewisburg_PA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Menomonie_WI_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Fairbanks_AK_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Tacoma_WA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Jacksonville_IL_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Roanoke_Rapids_NC_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Indianapolis_IN_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Kansas_City_MO_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Alma_MI_metro_area.pkl (deflated 81%)\n",
            "  adding: metro_models/Jesup_GA_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Ithaca_NY_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Jamestown_NY_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Merced_CA_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Iowa_City_IA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Berlin_NH_metro_area.pkl (deflated 78%)\n",
            "  adding: metro_models/Montrose_CO_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Palm_Bay_FL_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Burlington_IA_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Clarksburg_WV_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Mount_Vernon_IL_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Oxnard_CA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/El_Paso_TX_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Moberly_MO_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Coffeyville_KS_metro_area.pkl (deflated 81%)\n",
            "  adding: metro_models/Sebastian_FL_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Houston_TX_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Alpena_MI_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Alamogordo_NM_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Fairmont_WV_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Carson_City_NV_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Bogalusa_LA_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Lafayette_LA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Watertown_SD_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Kingston_NY_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Spencer_IA_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Cleveland_TN_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Greeley_CO_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Pecos_TX_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Shelton_WA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Boone_NC_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Bloomsburg_PA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Cumberland_MD_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Cornelia_GA_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Cordele_GA_metro_area.pkl (deflated 81%)\n",
            "  adding: metro_models/Sanford_NC_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Dallas_TX_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/St._George_UT_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Eugene_OR_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Wapakoneta_OH_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Pontiac_IL_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/_National.pkl (deflated 83%)\n",
            "  adding: metro_models/Wilmington_DE_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Logan_UT_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Danville_VA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Klamath_Falls_OR_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Kinston_NC_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Pittsburgh_PA_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Kearney_NE_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/San_Jose_CA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Montgomery_AL_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Hillsdale_MI_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/El_Campo_TX_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Ruidoso_NM_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Alexander_City_AL_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Washington_IN_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Athens_OH_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Pullman_WA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Dalton_GA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/The_Villages_FL_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Seneca_Falls_NY_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Chicago_IL_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Philadelphia_PA_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Danville_KY_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Thomasville_GA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Rome_GA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Vincennes_IN_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Magnolia_AR_metro_area.pkl (deflated 81%)\n",
            "  adding: metro_models/Galesburg_IL_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Pueblo_CO_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Prescott_Valley_AZ_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Boston_MA_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Concord_NH_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/San_Antonio_TX_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Eagle_Pass_TX_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/San_Francisco_CA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Aberdeen_SD_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Picayune_MS_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Santa_Fe_NM_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Clarksdale_MS_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Iron_Mountain_MI_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Aberdeen_WA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Cedar_City_UT_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Visalia_CA_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Hannibal_MO_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Lexington_KY_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Oakland_CA_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Hartford_CT_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Yuba_City_CA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Easton_MD_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Summerville_GA_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/San_Rafael_CA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Fairmont_MN_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Decatur_AL_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Spokane_WA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Kapaa_HI_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Charlottesville_VA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Fayetteville_AR_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Minden_LA_metro_area.pkl (deflated 81%)\n",
            "  adding: metro_models/Milwaukee_WI_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Lebanon_NH_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Athens_TX_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Alexandria_MN_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Phoenix_AZ_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Waterloo_IA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Auburn_AL_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Taos_NM_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/New_Orleans_LA_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Gettysburg_PA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Corning_NY_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Pella_IA_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Rutland_VT_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Roseburg_OR_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Key_West_FL_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Coshocton_OH_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Moultrie_GA_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Binghamton_NY_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Bismarck_ND_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Lansing_MI_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Stillwater_OK_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Ontario_OR_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Lynchburg_VA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Rochester_MN_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Champaign_IL_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Auburn_NY_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Marquette_MI_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Coos_Bay_OR_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Weatherford_OK_metro_area.pkl (deflated 81%)\n",
            "  adding: metro_models/Charlotte_NC_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Kingsport_TN_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Crossville_TN_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Moses_Lake_WA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Bozeman_MT_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Brownwood_TX_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Hobbs_NM_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Gainesville_GA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Sevierville_TN_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Roanoke_VA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Napa_CA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Pocatello_ID_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Rocky_Mount_NC_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Bakersfield_CA_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Cleveland_MS_metro_area.pkl (deflated 81%)\n",
            "  adding: metro_models/Huntington_WV_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Blackfoot_ID_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Santa_Cruz_CA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Cincinnati_OH_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Burlington_NC_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Lincoln_IL_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Bowling_Green_KY_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Lewistown_PA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Arkadelphia_AR_metro_area.pkl (deflated 81%)\n",
            "  adding: metro_models/Whitewater_WI_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Chambersburg_PA_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Kennewick_WA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Mayfield_KY_metro_area.pkl (deflated 81%)\n",
            "  adding: metro_models/Okeechobee_FL_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Portland_ME_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Searcy_AR_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Snyder_TX_metro_area.pkl (deflated 82%)\n",
            "  adding: metro_models/Helena_AR_metro_area.pkl (deflated 81%)\n",
            "  adding: metro_models/Port_Lavaca_TX_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Vineland_NJ_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Harrisonburg_VA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Laredo_TX_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Lubbock_TX_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Plainview_TX_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Orangeburg_SC_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Syracuse_NY_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Dubuque_IA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/West_Plains_MO_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/San_Angelo_TX_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Elizabeth_City_NC_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Española_NM_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Huntington_IN_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Frederick_MD_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Albany_OR_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Twin_Falls_ID_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Hutchinson_KS_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Vernal_UT_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Albertville_AL_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Springfield_OH_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Helena_MT_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Vermillion_SD_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Paducah_KY_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Atmore_AL_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Lewiston_ID_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Uvalde_TX_metro_area.pkl (deflated 81%)\n",
            "  adding: metro_models/Rochester_NY_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Minneapolis_MN_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Bainbridge_GA_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Vallejo_CA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Tampa_FL_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/York_PA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Ames_IA_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Willmar_MN_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Decatur_IL_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Bridgeport_CT_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Centralia_IL_metro_area.pkl (deflated 81%)\n",
            "  adding: metro_models/Asheville_NC_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Longview_TX_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Hailey_ID_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Eufaula_AL_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Savannah_GA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Grand_Junction_CO_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Fort_Dodge_IA_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Akron_OH_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Point_Pleasant_WV_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Lakeland_FL_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Winona_MN_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Columbus_NE_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Greenville_SC_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/St._Cloud_MN_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Santa_Rosa_CA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/La_Grande_OR_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Ogdensburg_NY_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Ottumwa_IA_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Lebanon_PA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Springfield_IL_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Staunton_VA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Austin_MN_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Bardstown_KY_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Joplin_MO_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Lawton_OK_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Mexico_MO_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Madera_CA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Jamestown_ND_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Albert_Lea_MN_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Clovis_NM_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Great_Bend_KS_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Bellefontaine_OH_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Daphne_AL_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Altus_OK_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Evanston_WY_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Naples_FL_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Tahlequah_OK_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Grants_NM_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/West_Palm_Beach_FL_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Los_Angeles_CA_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Flint_MI_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Williston_ND_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Gloversville_NY_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Hilton_Head_Island_SC_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Defiance_OH_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Athens_TN_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Carlsbad_NM_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Warrensburg_MO_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Kahului_HI_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Birmingham_AL_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Angola_IN_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Appleton_WI_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Sonora_CA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Columbus_OH_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Woodward_OK_metro_area.pkl (deflated 81%)\n",
            "  adding: metro_models/Susanville_CA_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Scottsburg_IN_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/New_Philadelphia_OH_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Provo_UT_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Greenville_MS_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Wenatchee_WA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Kalispell_MT_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Oneonta_NY_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Richmond_VA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/The_Dalles_OR_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Paris_TX_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Othello_WA_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Grand_Island_NE_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Bennington_VT_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Douglas_GA_metro_area.pkl (deflated 81%)\n",
            "  adding: metro_models/Grants_Pass_OR_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Edwards_CO_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Burlington_VT_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Frankfort_KY_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/East_Stroudsburg_PA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Spearfish_SD_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Danville_IL_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Big_Stone_Gap_VA_metro_area.pkl (deflated 81%)\n",
            "  adding: metro_models/Madisonville_KY_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Orlando_FL_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Liberal_KS_metro_area.pkl (deflated 81%)\n",
            "  adding: metro_models/Andrews_TX_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Traverse_City_MI_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Kalamazoo_MI_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Killeen_TX_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Fort_Madison_IA_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Warner_Robins_GA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Fort_Collins_CO_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Shawnee_OK_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Cleveland_OH_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Greensboro_NC_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Elkhart_IN_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Mount_Airy_NC_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Monroe_MI_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/La_Crosse_WI_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Jasper_IN_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Warren_MI_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Heber_UT_metro_area.pkl (deflated 78%)\n",
            "  adding: metro_models/Fort_Payne_AL_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Sandusky_OH_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Brookings_SD_metro_area.pkl (deflated 81%)\n",
            "  adding: metro_models/Louisville_KY_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Union_City_TN_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Dickinson_ND_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Lake_County_IL_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Beeville_TX_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Clarksville_TN_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Kerrville_TX_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Elkins_WV_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/St._Marys_PA_metro_area.pkl (deflated 81%)\n",
            "  adding: metro_models/Ponca_City_OK_metro_area.pkl (deflated 81%)\n",
            "  adding: metro_models/Stevens_Point_WI_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Crescent_City_CA_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Hickory_NC_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Augusta_GA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Honolulu_HI_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Quincy_IL_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Boise_City_ID_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Jackson_WY_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Cadillac_MI_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Hope_AR_metro_area.pkl (deflated 81%)\n",
            "  adding: metro_models/Rapid_City_SD_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Muskogee_OK_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Mount_Gay_WV_metro_area.pkl (deflated 81%)\n",
            "  adding: metro_models/Winfield_KS_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Hays_KS_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Palestine_TX_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Sebring_FL_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Farmington_NM_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Gardnerville_Ranchos_NV_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Marion_IN_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Elk_City_OK_metro_area.pkl (deflated 81%)\n",
            "  adding: metro_models/Natchez_MS_metro_area.pkl (deflated 81%)\n",
            "  adding: metro_models/Atlantic_City_NJ_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Oak_Harbor_WA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Sunbury_PA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Carroll_IA_metro_area.pkl (deflated 81%)\n",
            "  adding: metro_models/Marion_NC_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Red_Wing_MN_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Indiana_PA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/DeRidder_LA_metro_area.pkl (deflated 81%)\n",
            "  adding: metro_models/Somerset_PA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Florence_SC_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Brainerd_MN_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Forrest_City_AR_metro_area.pkl (deflated 81%)\n",
            "  adding: metro_models/Shawano_WI_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Flagstaff_AZ_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Opelousas_LA_metro_area.pkl (deflated 81%)\n",
            "  adding: metro_models/Lebanon_MO_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Cambridge_MD_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Riverton_WY_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Salina_KS_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Sayre_PA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Marshall_MO_metro_area.pkl (deflated 81%)\n",
            "  adding: metro_models/Rock_Springs_WY_metro_area.pkl (deflated 81%)\n",
            "  adding: metro_models/Sulphur_Springs_TX_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Midland_MI_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Cedartown_GA_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Lancaster_PA_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Jonesboro_AR_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Alice_TX_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Trenton_NJ_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Madison_WI_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Newark_NJ_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Tifton_GA_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Elgin_IL_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Blytheville_AR_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Racine_WI_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Levelland_TX_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Batavia_NY_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Casper_WY_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Mountain_Home_AR_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Hastings_NE_metro_area.pkl (deflated 81%)\n",
            "  adding: metro_models/Atchison_KS_metro_area.pkl (deflated 81%)\n",
            "  adding: metro_models/Breckenridge_CO_metro_area.pkl (deflated 78%)\n",
            "  adding: metro_models/Anaheim_CA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Ketchikan_AK_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Worthington_MN_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Owatonna_MN_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Wilmington_OH_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Gainesville_TX_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Fremont_NE_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Marietta_OH_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Baltimore_MD_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Mount_Pleasant_MI_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Shelby_NC_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Morgantown_WV_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Yakima_WA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Fort_Worth_TX_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Oshkosh_WI_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Hinesville_GA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Muncie_IN_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/West_Point_MS_metro_area.pkl (deflated 85%)\n",
            "  adding: metro_models/Brownsville_TX_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Nassau_County_NY_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Johnson_City_TN_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Sheridan_WY_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Coldwater_MI_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Richmond_IN_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Oklahoma_City_OK_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Cambridge_OH_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Myrtle_Beach_SC_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Ardmore_OK_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Connersville_IN_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Escanaba_MI_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Dayton_TN_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Deltona_FL_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Paris_TN_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Wichita_Falls_TX_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Reading_PA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Rexburg_ID_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Jasper_AL_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Sheboygan_WI_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Warren_PA_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Morehead_City_NC_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Fort_Leonard_Wood_MO_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Meridian_MS_metro_area.pkl (deflated 81%)\n",
            "  adding: metro_models/Urbana_OH_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Hood_River_OR_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Laconia_NH_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Union_SC_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Olean_NY_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Zanesville_OH_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Sumter_SC_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Fallon_NV_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Virginia_Beach_VA_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Zapata_TX_metro_area.pkl (deflated 81%)\n",
            "  adding: metro_models/Bellingham_WA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Hilo_HI_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Wilson_NC_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Des_Moines_IA_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Sikeston_MO_metro_area.pkl (deflated 81%)\n",
            "  adding: metro_models/Wahpeton_ND_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Las_Vegas_NM_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/New_Haven_CT_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Augusta_ME_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Youngstown_OH_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Stephenville_TX_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Jefferson_GA_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Sandpoint_ID_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Gaffney_SC_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Pensacola_FL_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Tuscaloosa_AL_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Keene_NH_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Ottawa_KS_metro_area.pkl (deflated 81%)\n",
            "  adding: metro_models/Utica_NY_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Peru_IN_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Baraboo_WI_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Billings_MT_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Parsons_KS_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Newberry_SC_metro_area.pkl (deflated 81%)\n",
            "  adding: metro_models/Jacksonville_FL_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Bonham_TX_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Guymon_OK_metro_area.pkl (deflated 82%)\n",
            "  adding: metro_models/North_Wilkesboro_NC_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Centralia_WA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Dover_DE_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Monroe_LA_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Pittsburg_KS_metro_area.pkl (deflated 80%)\n",
            "  adding: metro_models/Lamesa_TX_metro_area.pkl (deflated 81%)\n",
            "  adding: metro_models/Scranton_PA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Winchester_VA_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Tullahoma_TN_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Bend_OR_metro_area.pkl (deflated 79%)\n",
            "  adding: metro_models/Fergus_Falls_MN_metro_area.pkl (deflated 79%)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "app_code = \"\"\"\n",
        "import streamlit as st\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import joblib\n",
        "import os\n",
        "\n",
        "# Load and clean data\n",
        "@st.cache_data\n",
        "def load_data():\n",
        "    df = pd.read_csv('metro.tsv.gz', sep='\\\\t', compression='gzip')\n",
        "    df.columns = df.columns.str.strip().str.lower().str.replace(\" \", \"_\")\n",
        "    df['period_begin'] = pd.to_datetime(df['period_begin'])\n",
        "    df['median_sale_price'] = pd.to_numeric(df['median_sale_price'], errors='coerce')\n",
        "    df = df[df['region_type'] == 'metro']\n",
        "    df = df.dropna(subset=['region', 'period_begin', 'median_sale_price'])\n",
        "    return df\n",
        "\n",
        "df = load_data()\n",
        "\n",
        "# Sidebar for metro selection\n",
        "st.sidebar.title(\"🏙️ Metro Selection\")\n",
        "metros = sorted(df['region'].unique().tolist())\n",
        "selected = st.sidebar.selectbox(\"Choose a metro area\", metros)\n",
        "\n",
        "# Filter and prepare data for the selected metro\n",
        "sub = df[df['region'] == selected].copy().sort_values('period_begin')\n",
        "sub['rolling_avg_price'] = sub['median_sale_price'].rolling(3).mean()\n",
        "sub['yoy_price_change'] = sub['median_sale_price'].pct_change(12)\n",
        "sub['lag_1'] = sub['median_sale_price'].shift(1)\n",
        "\n",
        "# Display chart\n",
        "st.title(f\"📊 Median Sale Price in {selected}\")\n",
        "st.line_chart(sub.set_index('period_begin')['median_sale_price'])\n",
        "\n",
        "# Load model\n",
        "safe_name = selected.replace(\",\", \"\").replace(\" \", \"_\").replace(\"/\", \"_\")\n",
        "model_path = f'metro_models/{safe_name}.pkl'\n",
        "\n",
        "if not os.path.exists(model_path):\n",
        "    st.error(\"🚫 Model not found for this metro.\")\n",
        "    st.stop()\n",
        "\n",
        "model = joblib.load(model_path)\n",
        "\n",
        "# Prediction features (last row)\n",
        "latest = sub.dropna().iloc[-1]\n",
        "f1 = st.sidebar.number_input(\"Current Median Price\", value=float(latest['median_sale_price']), step=1000.0)\n",
        "f2 = st.sidebar.number_input(\"3-Month Avg Price\", value=float(latest['rolling_avg_price']), step=1000.0)\n",
        "f3 = st.sidebar.number_input(\"YoY % Change\", value=float(latest['yoy_price_change']), step=0.01, format=\"%.3f\")\n",
        "f4 = st.sidebar.number_input(\"Last Month's Price\", value=float(latest['lag_1']), step=1000.0)\n",
        "\n",
        "X_pred = np.array([[f1, f2, f3, f4]])\n",
        "pred = model.predict(X_pred)[0]\n",
        "\n",
        "st.header(\"💰 Predicted Price Next Month\")\n",
        "st.success(f\"${pred:,.0f}\")\n",
        "\n",
        "if st.sidebar.checkbox(\"Show prediction inputs\"):\n",
        "    st.write(pd.DataFrame(X_pred, columns=['median_sale_price', 'rolling_avg_price', 'yoy_price_change', 'lag_1']))\n",
        "\"\"\"\n",
        "\n",
        "# Save to file\n",
        "with open(\"app.py\", \"w\") as f:\n",
        "    f.write(app_code)\n"
      ],
      "metadata": {
        "id": "EtsGmTUi7QBU"
      },
      "execution_count": 41,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import files\n",
        "files.download(\"app.py\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 17
        },
        "id": "F-zOv0Ng7V2b",
        "outputId": "b4c80c46-d4a2-4032-c72e-c8c3dcd2c1bc"
      },
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "download(\"download_4afb0e90-0fa9-4929-bec7-0e98c0beded8\", \"app.py\", 2267)"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import files\n",
        "files.download(\"metro.tsv.gz\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 17
        },
        "id": "upXIALr87p30",
        "outputId": "c0b3ac60-4cab-4d9d-a8bd-9fc90d6c659c"
      },
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "download(\"download_392bd790-ce9a-4f20-8892-39d1cba46dfa\", \"metro.tsv.gz\", 91685421)"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Zip the folder first\n",
        "!zip -r metro_models.zip metro_models\n",
        "\n",
        "# Then download the zip file\n",
        "files.download(\"metro_models.zip\")\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "FX9KGX_57uA-",
        "outputId": "4be17b23-5237-475f-e79f-f87d927693d1"
      },
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "updating: metro_models/ (stored 0%)\n",
            "updating: metro_models/Macon_GA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Michigan_City_IN_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/London_KY_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Corvallis_OR_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Spartanburg_SC_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Albany_NY_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Brookings_OR_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Olympia_WA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Cañon_City_CO_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Raleigh_NC_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Green_Bay_WI_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Pittsfield_MA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Peoria_IL_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Meadville_PA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Paragould_AR_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Albemarle_NC_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Bluffton_IN_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Las_Cruces_NM_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/New_Castle_IN_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/McMinnville_TN_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/St._Louis_MO_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Oskaloosa_IA_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Taylorville_IL_metro_area.pkl (deflated 81%)\n",
            "updating: metro_models/Del_Rio_TX_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Jefferson_City_MO_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Mount_Vernon_OH_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Texarkana_TX_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Spirit_Lake_IA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Platteville_WI_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Abilene_TX_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Stockton_CA_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Indianola_MS_metro_area.pkl (deflated 81%)\n",
            "updating: metro_models/Vicksburg_MS_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Knoxville_TN_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Bemidji_MN_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Wheeling_WV_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/North_Port_FL_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Washington_DC_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Amsterdam_NY_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Waco_TX_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Sherman_TX_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Beckley_WV_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Seneca_SC_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Faribault_MN_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Vidalia_GA_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Tulsa_OK_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Ozark_AL_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Pierre_SD_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/California_MD_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Mitchell_SD_metro_area.pkl (deflated 81%)\n",
            "updating: metro_models/Reno_NV_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Greenwood_SC_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Hagerstown_MD_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/New_Brunswick_NJ_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Amarillo_TX_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Las_Vegas_NV_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Gadsden_AL_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Murray_KY_metro_area.pkl (deflated 81%)\n",
            "updating: metro_models/Bremerton_WA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Carbondale_IL_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Pottsville_PA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Buffalo_NY_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Fredericksburg_TX_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Greenwood_MS_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Denver_CO_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Columbia_MO_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Hutchinson_MN_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Lawrence_KS_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Natchitoches_LA_metro_area.pkl (deflated 81%)\n",
            "updating: metro_models/Blacksburg_VA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Bucyrus_OH_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Montgomery_County_PA_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Dothan_AL_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Maryville_MO_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Lafayette_IN_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Batesville_AR_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Houma_LA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Los_Alamos_NM_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Beatrice_NE_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Evansville_IN_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Fort_Lauderdale_FL_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Shreveport_LA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Fernley_NV_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Bennettsville_SC_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Sacramento_CA_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Wichita_KS_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Truckee_CA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Santa_Maria_CA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Glenwood_Springs_CO_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Salem_OR_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Hudson_NY_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Ada_OK_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Grenada_MS_metro_area.pkl (deflated 81%)\n",
            "updating: metro_models/Cookeville_TN_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Enid_OK_metro_area.pkl (deflated 81%)\n",
            "updating: metro_models/Nogales_AZ_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Silver_City_NM_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Pampa_TX_metro_area.pkl (deflated 81%)\n",
            "updating: metro_models/McComb_MS_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Fort_Morgan_CO_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Pahrump_NV_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Janesville_WI_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Terre_Haute_IN_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/El_Centro_CA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Johnstown_PA_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Fond_du_Lac_WI_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Frankfort_IN_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Tyler_TX_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Memphis_TN_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Wausau_WI_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Middlesborough_KY_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Juneau_AK_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Bartlesville_OK_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Scottsbluff_NE_metro_area.pkl (deflated 81%)\n",
            "updating: metro_models/Bradford_PA_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Great_Falls_MT_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Sterling_CO_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Brownsville_TN_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Macomb_IL_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Chillicothe_OH_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Fayetteville_NC_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Salem_OH_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Henderson_NC_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Craig_CO_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Springfield_MA_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/St._Marys_GA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Malvern_AR_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Wabash_IN_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/South_Bend_IN_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/El_Dorado_AR_metro_area.pkl (deflated 81%)\n",
            "updating: metro_models/Durant_OK_metro_area.pkl (deflated 81%)\n",
            "updating: metro_models/Ellensburg_WA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Camden_NJ_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Jennings_LA_metro_area.pkl (deflated 81%)\n",
            "updating: metro_models/Toccoa_GA_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Fort_Wayne_IN_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Columbus_IN_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Moscow_ID_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Sidney_OH_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Cedar_Rapids_IA_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Sedalia_MO_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Ashtabula_OH_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Columbus_MS_metro_area.pkl (deflated 81%)\n",
            "updating: metro_models/Mason_City_IA_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Kokomo_IN_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/DuBois_PA_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/New_Bern_NC_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Ottawa_IL_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Toledo_OH_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Charleston_SC_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Jacksonville_NC_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Wisconsin_Rapids_WI_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Branson_MO_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Omaha_NE_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Jackson_MS_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Sweetwater_TX_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/McAlester_OK_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Saginaw_MI_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/North_Vernon_IN_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Norwich_CT_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Idaho_Falls_ID_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Worcester_MA_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Pine_Bluff_AR_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Niles_MI_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Little_Rock_AR_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Forest_City_NC_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Somerset_KY_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Winnemucca_NV_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Campbellsville_KY_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Washington_NC_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Glens_Falls_NY_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Barre_VT_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Lake_Charles_LA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/San_Diego_CA_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Vineyard_Haven_MA_metro_area.pkl (deflated 78%)\n",
            "updating: metro_models/Riverside_CA_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Lewiston_ME_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Greenville_OH_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Dumas_TX_metro_area.pkl (deflated 81%)\n",
            "updating: metro_models/Detroit_MI_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Goldsboro_NC_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Rockingham_NC_metro_area.pkl (deflated 81%)\n",
            "updating: metro_models/Ashland_OH_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Deming_NM_metro_area.pkl (deflated 81%)\n",
            "updating: metro_models/Watertown_NY_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Anniston_AL_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Roswell_NM_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Oil_City_PA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/New_Ulm_MN_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Mobile_AL_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Bedford_IN_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Hermiston_OR_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Maysville_KY_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Elizabethtown_KY_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Marion_OH_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Price_UT_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/College_Station_TX_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Missoula_MT_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Fairfield_IA_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Gillette_WY_metro_area.pkl (deflated 81%)\n",
            "updating: metro_models/Valdosta_GA_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Battle_Creek_MI_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Pearsall_TX_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/North_Platte_NE_metro_area.pkl (deflated 81%)\n",
            "updating: metro_models/Poplar_Bluff_MO_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Steamboat_Springs_CO_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Dayton_OH_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Torrington_CT_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Ann_Arbor_MI_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Tiffin_OH_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Dixon_IL_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Bloomington_IL_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Lawrenceburg_TN_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Butte_MT_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Crestview_FL_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Marshalltown_IA_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/LaGrange_GA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Gulfport_MS_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/San_Luis_Obispo_CA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Palatka_FL_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Camden_AR_metro_area.pkl (deflated 81%)\n",
            "updating: metro_models/Duncan_OK_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Ukiah_CA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Topeka_KS_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Madison_IN_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Freeport_IL_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Huntsville_AL_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Durango_CO_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Minot_ND_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Portales_NM_metro_area.pkl (deflated 81%)\n",
            "updating: metro_models/Rockford_IL_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Seattle_WA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Lake_City_FL_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Kirksville_MO_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Georgetown_SC_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Bangor_ME_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Watertown_WI_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Houghton_MI_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Yuma_AZ_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/New_Castle_PA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Manchester_NH_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Hereford_TX_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Burley_ID_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Barnstable_Town_MA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Salt_Lake_City_UT_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Adrian_MI_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Salinas_CA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Enterprise_AL_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Milledgeville_GA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Kingsville_TX_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Florence_AL_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Talladega_AL_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Harrison_AR_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Kendallville_IN_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Selinsgrove_PA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Punta_Gorda_FL_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Albany_GA_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Logansport_IN_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Eureka_CA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Auburn_IN_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Jackson_TN_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Beaver_Dam_WI_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Sierra_Vista_AZ_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Bay_City_MI_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/McAllen_TX_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Fremont_OH_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Manhattan_KS_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Kill_Devil_Hills_NC_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Red_Bluff_CA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Canton_OH_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Storm_Lake_IA_metro_area.pkl (deflated 81%)\n",
            "updating: metro_models/Chico_CA_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Corinth_MS_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Raymondville_TX_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Bloomington_IN_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Celina_OH_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Eau_Claire_WI_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Martin_TN_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Jackson_MI_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Hammond_LA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Grand_Rapids_MI_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Rockingham_County_NH_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Mountain_Home_ID_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Portland_OR_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Cullman_AL_metro_area.pkl (deflated 78%)\n",
            "updating: metro_models/Cullowhee_NC_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Waycross_GA_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Gallup_NM_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Clinton_IA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Mount_Vernon_WA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Huntsville_TX_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Greenville_NC_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Shelbyville_TN_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Tupelo_MS_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Borger_TX_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Lock_Haven_PA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Grand_Rapids_MN_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Altoona_PA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Sterling_IL_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Vernon_TX_metro_area.pkl (deflated 81%)\n",
            "updating: metro_models/Davenport_IA_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Seymour_IN_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Allentown_PA_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Corsicana_TX_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Morristown_TN_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Big_Spring_TX_metro_area.pkl (deflated 81%)\n",
            "updating: metro_models/Mineral_Wells_TX_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Statesboro_GA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Erie_PA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Charleston_WV_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Lewisburg_TN_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Dyersburg_TN_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Tucson_AZ_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Port_Angeles_WA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Gary_IN_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/New_York_NY_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Laramie_WY_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Newport_OR_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Jackson_OH_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Mount_Sterling_KY_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Baton_Rouge_LA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Rockport_TX_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Findlay_OH_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Morgan_City_LA_metro_area.pkl (deflated 81%)\n",
            "updating: metro_models/Pinehurst_NC_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Walla_Walla_WA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Newport_TN_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Russellville_AR_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Rio_Grande_City_TX_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Coeur_d'Alene_ID_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Payson_AZ_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Wauchula_FL_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Laurinburg_NC_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Richmond_KY_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Decatur_IN_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Hanford_CA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Selma_AL_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Cortland_NY_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Jacksonville_TX_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Mansfield_OH_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Show_Low_AZ_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Victoria_TX_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Poughkeepsie_NY_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Fort_Smith_AR_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Farmington_MO_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Clearlake_CA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Glasgow_KY_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Portsmouth_OH_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Fort_Polk_South_LA_metro_area.pkl (deflated 81%)\n",
            "updating: metro_models/Sault_Ste._Marie_MI_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Plattsburgh_NY_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Muscatine_IA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Norfolk_NE_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Safford_AZ_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Boulder_CO_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Elko_NV_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Hot_Springs_AR_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Gainesville_FL_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Sturgis_MI_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Longview_WA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Brevard_NC_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Martinsville_VA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Atlanta_GA_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Huron_SD_metro_area.pkl (deflated 81%)\n",
            "updating: metro_models/Durham_NC_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Modesto_CA_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Wilmington_NC_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Midland_TX_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Miami_FL_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Dublin_GA_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Thomaston_GA_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Parkersburg_WV_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Malone_NY_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Marshall_MN_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Lumberton_NC_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Bluefield_WV_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Central_City_KY_metro_area.pkl (deflated 81%)\n",
            "updating: metro_models/Anchorage_AK_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Rochelle_IL_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Nashville_TN_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Odessa_TX_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Fitzgerald_GA_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Americus_GA_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Plymouth_IN_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Beaumont_TX_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Alexandria_LA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Manitowoc_WI_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Astoria_OR_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Lufkin_TX_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Calhoun_GA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Scottsboro_AL_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Arcadia_FL_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Ludington_MI_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Clewiston_FL_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Van_Wert_OH_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Lake_Havasu_City_AZ_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Lincoln_NE_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Prineville_OR_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Bay_City_TX_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Brenham_TX_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Ocala_FL_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Ocean_City_NJ_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Weirton_WV_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Medford_OR_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Lima_OH_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Wooster_OH_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Effingham_IL_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Cape_Girardeau_MO_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Sioux_City_IA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Fresno_CA_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Mount_Pleasant_TX_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Kennett_MO_metro_area.pkl (deflated 81%)\n",
            "updating: metro_models/Starkville_MS_metro_area.pkl (deflated 81%)\n",
            "updating: metro_models/Lexington_NE_metro_area.pkl (deflated 81%)\n",
            "updating: metro_models/Charleston_IL_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Providence_RI_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Nacogdoches_TX_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Harrisburg_PA_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Brookhaven_MS_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Holland_MI_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Yankton_SD_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Cheyenne_WY_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Port_St._Lucie_FL_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Winston-Salem_NC_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Redding_CA_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Sioux_Falls_SD_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Brunswick_GA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Troy_AL_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Elmira_NY_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Homosassa_Springs_FL_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Washington_Court_House_OH_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Greeneville_TN_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Williamsport_PA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Emporia_KS_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Panama_City_FL_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Oxford_MS_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Marinette_WI_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Greensburg_IN_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/State_College_PA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Dodge_City_KS_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Rolla_MO_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Austin_TX_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Garden_City_KS_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Warsaw_IN_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Springfield_MO_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Tallahassee_FL_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Crawfordsville_IN_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Muskegon_MI_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Owensboro_KY_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Kankakee_IL_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Norwalk_OH_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Ruston_LA_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Big_Rapids_MI_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Cape_Coral_FL_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/McPherson_KS_metro_area.pkl (deflated 81%)\n",
            "updating: metro_models/Miami_OK_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/St._Joseph_MO_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Granbury_TX_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Ogden_UT_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Lewisburg_PA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Menomonie_WI_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Fairbanks_AK_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Tacoma_WA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Jacksonville_IL_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Roanoke_Rapids_NC_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Indianapolis_IN_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Kansas_City_MO_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Alma_MI_metro_area.pkl (deflated 81%)\n",
            "updating: metro_models/Jesup_GA_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Ithaca_NY_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Jamestown_NY_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Merced_CA_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Iowa_City_IA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Berlin_NH_metro_area.pkl (deflated 78%)\n",
            "updating: metro_models/Montrose_CO_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Palm_Bay_FL_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Burlington_IA_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Clarksburg_WV_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Mount_Vernon_IL_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Oxnard_CA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/El_Paso_TX_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Moberly_MO_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Coffeyville_KS_metro_area.pkl (deflated 81%)\n",
            "updating: metro_models/Sebastian_FL_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Houston_TX_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Alpena_MI_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Alamogordo_NM_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Fairmont_WV_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Carson_City_NV_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Bogalusa_LA_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Lafayette_LA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Watertown_SD_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Kingston_NY_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Spencer_IA_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Cleveland_TN_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Greeley_CO_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Pecos_TX_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Shelton_WA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Boone_NC_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Bloomsburg_PA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Cumberland_MD_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Cornelia_GA_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Cordele_GA_metro_area.pkl (deflated 81%)\n",
            "updating: metro_models/Sanford_NC_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Dallas_TX_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/St._George_UT_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Eugene_OR_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Wapakoneta_OH_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Pontiac_IL_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/_National.pkl (deflated 83%)\n",
            "updating: metro_models/Wilmington_DE_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Logan_UT_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Danville_VA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Klamath_Falls_OR_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Kinston_NC_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Pittsburgh_PA_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Kearney_NE_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/San_Jose_CA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Montgomery_AL_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Hillsdale_MI_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/El_Campo_TX_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Ruidoso_NM_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Alexander_City_AL_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Washington_IN_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Athens_OH_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Pullman_WA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Dalton_GA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/The_Villages_FL_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Seneca_Falls_NY_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Chicago_IL_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Philadelphia_PA_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Danville_KY_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Thomasville_GA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Rome_GA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Vincennes_IN_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Magnolia_AR_metro_area.pkl (deflated 81%)\n",
            "updating: metro_models/Galesburg_IL_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Pueblo_CO_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Prescott_Valley_AZ_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Boston_MA_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Concord_NH_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/San_Antonio_TX_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Eagle_Pass_TX_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/San_Francisco_CA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Aberdeen_SD_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Picayune_MS_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Santa_Fe_NM_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Clarksdale_MS_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Iron_Mountain_MI_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Aberdeen_WA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Cedar_City_UT_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Visalia_CA_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Hannibal_MO_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Lexington_KY_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Oakland_CA_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Hartford_CT_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Yuba_City_CA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Easton_MD_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Summerville_GA_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/San_Rafael_CA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Fairmont_MN_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Decatur_AL_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Spokane_WA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Kapaa_HI_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Charlottesville_VA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Fayetteville_AR_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Minden_LA_metro_area.pkl (deflated 81%)\n",
            "updating: metro_models/Milwaukee_WI_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Lebanon_NH_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Athens_TX_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Alexandria_MN_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Phoenix_AZ_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Waterloo_IA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Auburn_AL_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Taos_NM_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/New_Orleans_LA_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Gettysburg_PA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Corning_NY_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Pella_IA_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Rutland_VT_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Roseburg_OR_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Key_West_FL_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Coshocton_OH_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Moultrie_GA_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Binghamton_NY_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Bismarck_ND_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Lansing_MI_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Stillwater_OK_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Ontario_OR_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Lynchburg_VA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Rochester_MN_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Champaign_IL_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Auburn_NY_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Marquette_MI_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Coos_Bay_OR_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Weatherford_OK_metro_area.pkl (deflated 81%)\n",
            "updating: metro_models/Charlotte_NC_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Kingsport_TN_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Crossville_TN_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Moses_Lake_WA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Bozeman_MT_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Brownwood_TX_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Hobbs_NM_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Gainesville_GA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Sevierville_TN_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Roanoke_VA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Napa_CA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Pocatello_ID_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Rocky_Mount_NC_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Bakersfield_CA_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Cleveland_MS_metro_area.pkl (deflated 81%)\n",
            "updating: metro_models/Huntington_WV_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Blackfoot_ID_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Santa_Cruz_CA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Cincinnati_OH_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Burlington_NC_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Lincoln_IL_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Bowling_Green_KY_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Lewistown_PA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Arkadelphia_AR_metro_area.pkl (deflated 81%)\n",
            "updating: metro_models/Whitewater_WI_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Chambersburg_PA_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Kennewick_WA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Mayfield_KY_metro_area.pkl (deflated 81%)\n",
            "updating: metro_models/Okeechobee_FL_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Portland_ME_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Searcy_AR_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Snyder_TX_metro_area.pkl (deflated 82%)\n",
            "updating: metro_models/Helena_AR_metro_area.pkl (deflated 81%)\n",
            "updating: metro_models/Port_Lavaca_TX_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Vineland_NJ_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Harrisonburg_VA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Laredo_TX_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Lubbock_TX_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Plainview_TX_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Orangeburg_SC_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Syracuse_NY_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Dubuque_IA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/West_Plains_MO_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/San_Angelo_TX_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Elizabeth_City_NC_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Española_NM_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Huntington_IN_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Frederick_MD_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Albany_OR_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Twin_Falls_ID_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Hutchinson_KS_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Vernal_UT_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Albertville_AL_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Springfield_OH_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Helena_MT_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Vermillion_SD_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Paducah_KY_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Atmore_AL_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Lewiston_ID_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Uvalde_TX_metro_area.pkl (deflated 81%)\n",
            "updating: metro_models/Rochester_NY_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Minneapolis_MN_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Bainbridge_GA_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Vallejo_CA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Tampa_FL_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/York_PA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Ames_IA_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Willmar_MN_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Decatur_IL_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Bridgeport_CT_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Centralia_IL_metro_area.pkl (deflated 81%)\n",
            "updating: metro_models/Asheville_NC_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Longview_TX_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Hailey_ID_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Eufaula_AL_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Savannah_GA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Grand_Junction_CO_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Fort_Dodge_IA_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Akron_OH_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Point_Pleasant_WV_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Lakeland_FL_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Winona_MN_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Columbus_NE_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Greenville_SC_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/St._Cloud_MN_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Santa_Rosa_CA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/La_Grande_OR_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Ogdensburg_NY_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Ottumwa_IA_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Lebanon_PA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Springfield_IL_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Staunton_VA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Austin_MN_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Bardstown_KY_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Joplin_MO_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Lawton_OK_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Mexico_MO_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Madera_CA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Jamestown_ND_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Albert_Lea_MN_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Clovis_NM_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Great_Bend_KS_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Bellefontaine_OH_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Daphne_AL_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Altus_OK_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Evanston_WY_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Naples_FL_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Tahlequah_OK_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Grants_NM_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/West_Palm_Beach_FL_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Los_Angeles_CA_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Flint_MI_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Williston_ND_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Gloversville_NY_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Hilton_Head_Island_SC_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Defiance_OH_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Athens_TN_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Carlsbad_NM_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Warrensburg_MO_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Kahului_HI_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Birmingham_AL_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Angola_IN_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Appleton_WI_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Sonora_CA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Columbus_OH_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Woodward_OK_metro_area.pkl (deflated 81%)\n",
            "updating: metro_models/Susanville_CA_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Scottsburg_IN_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/New_Philadelphia_OH_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Provo_UT_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Greenville_MS_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Wenatchee_WA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Kalispell_MT_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Oneonta_NY_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Richmond_VA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/The_Dalles_OR_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Paris_TX_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Othello_WA_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Grand_Island_NE_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Bennington_VT_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Douglas_GA_metro_area.pkl (deflated 81%)\n",
            "updating: metro_models/Grants_Pass_OR_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Edwards_CO_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Burlington_VT_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Frankfort_KY_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/East_Stroudsburg_PA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Spearfish_SD_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Danville_IL_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Big_Stone_Gap_VA_metro_area.pkl (deflated 81%)\n",
            "updating: metro_models/Madisonville_KY_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Orlando_FL_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Liberal_KS_metro_area.pkl (deflated 81%)\n",
            "updating: metro_models/Andrews_TX_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Traverse_City_MI_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Kalamazoo_MI_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Killeen_TX_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Fort_Madison_IA_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Warner_Robins_GA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Fort_Collins_CO_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Shawnee_OK_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Cleveland_OH_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Greensboro_NC_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Elkhart_IN_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Mount_Airy_NC_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Monroe_MI_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/La_Crosse_WI_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Jasper_IN_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Warren_MI_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Heber_UT_metro_area.pkl (deflated 78%)\n",
            "updating: metro_models/Fort_Payne_AL_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Sandusky_OH_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Brookings_SD_metro_area.pkl (deflated 81%)\n",
            "updating: metro_models/Louisville_KY_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Union_City_TN_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Dickinson_ND_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Lake_County_IL_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Beeville_TX_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Clarksville_TN_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Kerrville_TX_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Elkins_WV_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/St._Marys_PA_metro_area.pkl (deflated 81%)\n",
            "updating: metro_models/Ponca_City_OK_metro_area.pkl (deflated 81%)\n",
            "updating: metro_models/Stevens_Point_WI_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Crescent_City_CA_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Hickory_NC_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Augusta_GA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Honolulu_HI_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Quincy_IL_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Boise_City_ID_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Jackson_WY_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Cadillac_MI_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Hope_AR_metro_area.pkl (deflated 81%)\n",
            "updating: metro_models/Rapid_City_SD_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Muskogee_OK_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Mount_Gay_WV_metro_area.pkl (deflated 81%)\n",
            "updating: metro_models/Winfield_KS_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Hays_KS_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Palestine_TX_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Sebring_FL_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Farmington_NM_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Gardnerville_Ranchos_NV_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Marion_IN_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Elk_City_OK_metro_area.pkl (deflated 81%)\n",
            "updating: metro_models/Natchez_MS_metro_area.pkl (deflated 81%)\n",
            "updating: metro_models/Atlantic_City_NJ_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Oak_Harbor_WA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Sunbury_PA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Carroll_IA_metro_area.pkl (deflated 81%)\n",
            "updating: metro_models/Marion_NC_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Red_Wing_MN_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Indiana_PA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/DeRidder_LA_metro_area.pkl (deflated 81%)\n",
            "updating: metro_models/Somerset_PA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Florence_SC_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Brainerd_MN_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Forrest_City_AR_metro_area.pkl (deflated 81%)\n",
            "updating: metro_models/Shawano_WI_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Flagstaff_AZ_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Opelousas_LA_metro_area.pkl (deflated 81%)\n",
            "updating: metro_models/Lebanon_MO_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Cambridge_MD_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Riverton_WY_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Salina_KS_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Sayre_PA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Marshall_MO_metro_area.pkl (deflated 81%)\n",
            "updating: metro_models/Rock_Springs_WY_metro_area.pkl (deflated 81%)\n",
            "updating: metro_models/Sulphur_Springs_TX_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Midland_MI_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Cedartown_GA_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Lancaster_PA_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Jonesboro_AR_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Alice_TX_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Trenton_NJ_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Madison_WI_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Newark_NJ_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Tifton_GA_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Elgin_IL_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Blytheville_AR_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Racine_WI_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Levelland_TX_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Batavia_NY_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Casper_WY_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Mountain_Home_AR_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Hastings_NE_metro_area.pkl (deflated 81%)\n",
            "updating: metro_models/Atchison_KS_metro_area.pkl (deflated 81%)\n",
            "updating: metro_models/Breckenridge_CO_metro_area.pkl (deflated 78%)\n",
            "updating: metro_models/Anaheim_CA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Ketchikan_AK_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Worthington_MN_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Owatonna_MN_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Wilmington_OH_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Gainesville_TX_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Fremont_NE_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Marietta_OH_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Baltimore_MD_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Mount_Pleasant_MI_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Shelby_NC_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Morgantown_WV_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Yakima_WA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Fort_Worth_TX_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Oshkosh_WI_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Hinesville_GA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Muncie_IN_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/West_Point_MS_metro_area.pkl (deflated 85%)\n",
            "updating: metro_models/Brownsville_TX_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Nassau_County_NY_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Johnson_City_TN_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Sheridan_WY_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Coldwater_MI_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Richmond_IN_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Oklahoma_City_OK_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Cambridge_OH_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Myrtle_Beach_SC_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Ardmore_OK_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Connersville_IN_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Escanaba_MI_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Dayton_TN_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Deltona_FL_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Paris_TN_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Wichita_Falls_TX_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Reading_PA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Rexburg_ID_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Jasper_AL_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Sheboygan_WI_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Warren_PA_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Morehead_City_NC_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Fort_Leonard_Wood_MO_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Meridian_MS_metro_area.pkl (deflated 81%)\n",
            "updating: metro_models/Urbana_OH_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Hood_River_OR_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Laconia_NH_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Union_SC_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Olean_NY_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Zanesville_OH_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Sumter_SC_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Fallon_NV_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Virginia_Beach_VA_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Zapata_TX_metro_area.pkl (deflated 81%)\n",
            "updating: metro_models/Bellingham_WA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Hilo_HI_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Wilson_NC_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Des_Moines_IA_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Sikeston_MO_metro_area.pkl (deflated 81%)\n",
            "updating: metro_models/Wahpeton_ND_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Las_Vegas_NM_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/New_Haven_CT_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Augusta_ME_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Youngstown_OH_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Stephenville_TX_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Jefferson_GA_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Sandpoint_ID_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Gaffney_SC_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Pensacola_FL_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Tuscaloosa_AL_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Keene_NH_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Ottawa_KS_metro_area.pkl (deflated 81%)\n",
            "updating: metro_models/Utica_NY_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Peru_IN_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Baraboo_WI_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Billings_MT_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Parsons_KS_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Newberry_SC_metro_area.pkl (deflated 81%)\n",
            "updating: metro_models/Jacksonville_FL_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Bonham_TX_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Guymon_OK_metro_area.pkl (deflated 82%)\n",
            "updating: metro_models/North_Wilkesboro_NC_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Centralia_WA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Dover_DE_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Monroe_LA_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Pittsburg_KS_metro_area.pkl (deflated 80%)\n",
            "updating: metro_models/Lamesa_TX_metro_area.pkl (deflated 81%)\n",
            "updating: metro_models/Scranton_PA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Winchester_VA_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Tullahoma_TN_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Bend_OR_metro_area.pkl (deflated 79%)\n",
            "updating: metro_models/Fergus_Falls_MN_metro_area.pkl (deflated 79%)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "download(\"download_180445ce-1ba6-493d-b489-33eac1f31587\", \"metro_models.zip\", 869930629)"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "with open(\"requirements.txt\", \"w\") as f:\n",
        "    f.write(\"\"\"\\\n",
        "streamlit\n",
        "pandas\n",
        "numpy\n",
        "scikit-learn\n",
        "joblib\n",
        "\"\"\")\n"
      ],
      "metadata": {
        "id": "4EgvfoeqNAHg"
      },
      "execution_count": 45,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "files.download(\"requirements.txt\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 17
        },
        "id": "IyRCJljANCYG",
        "outputId": "a03e1673-cdcd-44e1-a69d-d9055d4c566d"
      },
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "download(\"download_398c0552-5b78-42f7-8726-d3cf1c4cc049\", \"requirements.txt\", 43)"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install joblib\n",
        "\n",
        "import requests\n",
        "\n",
        "# Replace this with any other metro model file if needed\n",
        "url = \"https://raw.githubusercontent.com/tylermaire/housing-price-streamlit/main/metro_models/Aberdeen_SD_metro_area.pkl\"\n",
        "filename = \"test_model.pkl\"\n",
        "\n",
        "r = requests.get(url)\n",
        "with open(filename, \"wb\") as f:\n",
        "    f.write(r.content)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "K2Q10aN5uXQF",
        "outputId": "0efa11f6-4135-41f2-bdb4-e9edee9c1db4"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: joblib in /usr/local/lib/python3.11/dist-packages (1.4.2)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import joblib\n",
        "\n",
        "try:\n",
        "    model = joblib.load(\"test_model.pkl\")\n",
        "    print(\"✅ Model loaded successfully:\", model)\n",
        "except Exception as e:\n",
        "    print(\"❌ Error loading model:\", e)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NVOnULmeueXj",
        "outputId": "53746981-1e7d-449c-da07-93ee341708d3"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "❌ Error loading model: 118\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "url = \"https://raw.githubusercontent.com/tylermaire/housing-price-streamlit/main/metro_models/Aberdeen_SD_metro_area.pkl\"\n",
        "\n"
      ],
      "metadata": {
        "id": "-FyfEMHauvLr"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import requests\n",
        "\n",
        "url = \"https://raw.githubusercontent.com/tylermaire/housing-price-streamlit/main/metro_models/Aberdeen_SD_metro_area.pkl\"\n",
        "filename = \"test_model.pkl\"\n",
        "\n",
        "r = requests.get(url)\n",
        "with open(filename, \"wb\") as f:\n",
        "    f.write(r.content)\n"
      ],
      "metadata": {
        "id": "f6R1NmrW0EAM"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "EOr9WCs80HYT"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Trying to load model...\")\n",
        "\n",
        "import joblib\n",
        "try:\n",
        "    model = joblib.load(\"test_model.pkl\")\n",
        "    print(\"✅ Model loaded successfully:\", model)\n",
        "except Exception as e:\n",
        "    print(\"❌ Error loading model:\", e)\n",
        "\n",
        "print(\"Done\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zdpahjox0G5L",
        "outputId": "0d559fe2-c93b-4f4e-884b-abe96f77464e"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Trying to load model...\n",
            "❌ Error loading model: 118\n",
            "Done\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Install dependencies (if not already available)\n",
        "!pip install pandas scikit-learn joblib\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5l9E8nUEOHtw",
        "outputId": "0fd4a522-793e-46bd-999c-19d48e9c3fd3"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (2.2.2)\n",
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.11/dist-packages (1.6.1)\n",
            "Requirement already satisfied: joblib in /usr/local/lib/python3.11/dist-packages (1.4.2)\n",
            "Requirement already satisfied: numpy>=1.23.2 in /usr/local/lib/python3.11/dist-packages (from pandas) (2.0.2)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas) (2.9.0.post0)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.2)\n",
            "Requirement already satisfied: scipy>=1.6.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (1.15.2)\n",
            "Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (3.6.0)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas) (1.17.0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import files\n",
        "uploaded = files.upload()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 73
        },
        "id": "bCo1lF6ROKWG",
        "outputId": "5cbb4b8f-fcba-492b-813b-3098671e79ec"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-d8164a49-dc91-414f-b39f-518a8c31901d\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-d8164a49-dc91-414f-b39f-518a8c31901d\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving metro.tsv.gz to metro.tsv.gz\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import os\n",
        "from sklearn.linear_model import LinearRegression\n",
        "import joblib\n",
        "\n",
        "# Load uploaded data\n",
        "df = pd.read_csv(\"metro.tsv.gz\", sep=\"\\t\")\n",
        "df.columns = df.columns.str.strip().str.lower().str.replace(\" \", \"_\")\n",
        "\n",
        "# Filter for metro-level regions\n",
        "df = df[df['region_type'] == 'metro'].copy()\n",
        "df['period_begin'] = pd.to_datetime(df['period_begin'])\n",
        "df['median_sale_price'] = pd.to_numeric(df['median_sale_price'], errors='coerce')\n",
        "\n",
        "# Create directory to store models\n",
        "output_dir = \"/content/metro_models\"\n",
        "os.makedirs(output_dir, exist_ok=True)\n",
        "\n",
        "# Loop through each unique metro\n",
        "metros = df['region'].dropna().unique()\n",
        "print(f\"Found {len(metros)} metros.\")\n",
        "\n",
        "for metro in metros:\n",
        "    try:\n",
        "        metro_df = df[df['region'] == metro].copy()\n",
        "        metro_df.sort_values('period_begin', inplace=True)\n",
        "\n",
        "        # Feature engineering\n",
        "        metro_df['rolling_avg_price'] = metro_df['median_sale_price'].rolling(3).mean()\n",
        "        metro_df['yoy_price_change'] = metro_df['median_sale_price'].pct_change(12)\n",
        "        metro_df['lag_1'] = metro_df['median_sale_price'].shift(1)\n",
        "        metro_df.dropna(subset=['median_sale_price', 'rolling_avg_price', 'yoy_price_change', 'lag_1'], inplace=True)\n",
        "\n",
        "        # Prepare X and y\n",
        "        X = metro_df[['median_sale_price', 'rolling_avg_price', 'yoy_price_change', 'lag_1']]\n",
        "        y = metro_df['median_sale_price'].shift(-1).dropna()\n",
        "        X = X.iloc[:-1, :]\n",
        "\n",
        "        # Skip if not enough data\n",
        "        if len(X) < 12:\n",
        "            print(f\"Skipping {metro} — too few rows.\")\n",
        "            continue\n",
        "\n",
        "        # Train model\n",
        "        model = LinearRegression()\n",
        "        model.fit(X, y)\n",
        "\n",
        "        # Clean filename and save model\n",
        "        safe_name = metro.replace(\",\", \"\").replace(\" \", \"_\").replace(\"/\", \"_\")\n",
        "        filename = os.path.join(output_dir, f\"{safe_name}.pkl\")\n",
        "        joblib.dump(model, filename)\n",
        "        print(f\"✅ Saved model for {metro}\")\n",
        "\n",
        "    except Exception as e:\n",
        "        print(f\"❌ Error processing {metro}: {e}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "308p_b8TRmRt",
        "outputId": "3f968e59-4220-458b-ad32-b910816add36"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Found 932 metros.\n",
            "✅ Saved model for Lewisburg, PA metro area\n",
            "✅ Saved model for Philadelphia, PA metro area\n",
            "✅ Saved model for California, MD metro area\n",
            "✅ Saved model for Corvallis, OR metro area\n",
            "✅ Saved model for Hartford, CT metro area\n",
            "✅ Saved model for Lincoln, NE metro area\n",
            "✅ Saved model for Defiance, OH metro area\n",
            "✅ Saved model for Houston, TX metro area\n",
            "✅ Saved model for New Ulm, MN metro area\n",
            "✅ Saved model for Port St. Lucie, FL metro area\n",
            "✅ Saved model for Salt Lake City, UT metro area\n",
            "✅ Saved model for Merced, CA metro area\n",
            "✅ Saved model for Springfield, OH metro area\n",
            "✅ Saved model for Eufaula, AL metro area\n",
            "✅ Saved model for Muskogee, OK metro area\n",
            "✅ Saved model for Coffeyville, KS metro area\n",
            "✅ Saved model for Levelland, TX metro area\n",
            "✅ Saved model for Brookings, OR metro area\n",
            "✅ Saved model for Lebanon, NH metro area\n",
            "✅ Saved model for West Plains, MO metro area\n",
            "✅ Saved model for Scottsburg, IN metro area\n",
            "✅ Saved model for Las Cruces, NM metro area\n",
            "✅ Saved model for Cedar City, UT metro area\n",
            "✅ Saved model for Farmington, NM metro area\n",
            "✅ Saved model for Fort Morgan, CO metro area\n",
            "✅ Saved model for Myrtle Beach, SC metro area\n",
            "✅ Saved model for Warsaw, IN metro area\n",
            "✅ Saved model for Rockford, IL metro area\n",
            "✅ Saved model for Gallup, NM metro area\n",
            "✅ Saved model for Maryville, MO metro area\n",
            "✅ Saved model for Jonesboro, AR metro area\n",
            "✅ Saved model for Wilmington, NC metro area\n",
            "✅ Saved model for Richmond, KY metro area\n",
            "✅ Saved model for Pittsfield, MA metro area\n",
            "✅ Saved model for Cullman, AL metro area\n",
            "✅ Saved model for Kahului, HI metro area\n",
            "✅ Saved model for Helena, MT metro area\n",
            "✅ Saved model for Binghamton, NY metro area\n",
            "✅ Saved model for Batesville, AR metro area\n",
            "✅ Saved model for Springfield, IL metro area\n",
            "✅ Saved model for Baltimore, MD metro area\n",
            "✅ Saved model for Blytheville, AR metro area\n",
            "✅ Saved model for Flint, MI metro area\n",
            "✅ Saved model for Goldsboro, NC metro area\n",
            "✅ Saved model for Vallejo, CA metro area\n",
            "✅ Saved model for Idaho Falls, ID metro area\n",
            "✅ Saved model for Findlay, OH metro area\n",
            "✅ Saved model for Allentown, PA metro area\n",
            "✅ Saved model for McAlester, OK metro area\n",
            "✅ Saved model for Sterling, CO metro area\n",
            "✅ Saved model for Nogales, AZ metro area\n",
            "✅ Saved model for Valdosta, GA metro area\n",
            "✅ Saved model for Durant, OK metro area\n",
            "✅ Saved model for Portales, NM metro area\n",
            "✅ Saved model for Wilson, NC metro area\n",
            "✅ Saved model for North Wilkesboro, NC metro area\n",
            "✅ Saved model for Iron Mountain, MI metro area\n",
            "✅ Saved model for Lake County, IL metro area\n",
            "✅ Saved model for Cheyenne, WY metro area\n",
            "✅ Saved model for St. Joseph, MO metro area\n",
            "✅ Saved model for Faribault, MN metro area\n",
            "✅ Saved model for Fairbanks, AK metro area\n",
            "✅ Saved model for Edwards, CO metro area\n",
            "✅ Saved model for Cambridge, MD metro area\n",
            "✅ Saved model for Little Rock, AR metro area\n",
            "✅ Saved model for Trenton, NJ metro area\n",
            "✅ Saved model for Hastings, NE metro area\n",
            "✅ Saved model for Springfield, MA metro area\n",
            "✅ Saved model for Washington, DC metro area\n",
            "✅ Saved model for Sikeston, MO metro area\n",
            "✅ Saved model for Gettysburg, PA metro area\n",
            "✅ Saved model for Jamestown, ND metro area\n",
            "✅ Saved model for Provo, UT metro area\n",
            "✅ Saved model for Tiffin, OH metro area\n",
            "✅ Saved model for LaGrange, GA metro area\n",
            "✅ Saved model for Canton, OH metro area\n",
            "✅ Saved model for Janesville, WI metro area\n",
            "✅ Saved model for Syracuse, NY metro area\n",
            "✅ Saved model for Des Moines, IA metro area\n",
            "✅ Saved model for Logansport, IN metro area\n",
            "✅ Saved model for Warren, PA metro area\n",
            "✅ Saved model for Weirton, WV metro area\n",
            "✅ Saved model for Rapid City, SD metro area\n",
            "✅ Saved model for Naples, FL metro area\n",
            "✅ Saved model for Jacksonville, IL metro area\n",
            "✅ Saved model for Casper, WY metro area\n",
            "✅ Saved model for Red Bluff, CA metro area\n",
            "✅ Saved model for Ann Arbor, MI metro area\n",
            "✅ Saved model for Brunswick, GA metro area\n",
            "✅ Saved model for Willmar, MN metro area\n",
            "✅ Saved model for Miami, FL metro area\n",
            "✅ Saved model for New Castle, PA metro area\n",
            "✅ Saved model for Red Wing, MN metro area\n",
            "✅ Saved model for Mount Pleasant, TX metro area\n",
            "✅ Saved model for Warren, MI metro area\n",
            "✅ Saved model for Bismarck, ND metro area\n",
            "✅ Saved model for Oklahoma City, OK metro area\n",
            "✅ Saved model for Milwaukee, WI metro area\n",
            "✅ Saved model for Manitowoc, WI metro area\n",
            "✅ Saved model for Cumberland, MD metro area\n",
            "✅ Saved model for Norfolk, NE metro area\n",
            "✅ Saved model for Winfield, KS metro area\n",
            "✅ Saved model for Barre, VT metro area\n",
            "✅ Saved model for Jackson, MS metro area\n",
            "✅ Saved model for Logan, UT metro area\n",
            "✅ Saved model for Augusta, ME metro area\n",
            "✅ Saved model for Utica, NY metro area\n",
            "✅ Saved model for Morehead City, NC metro area\n",
            "✅ Saved model for Ozark, AL metro area\n",
            "✅ Saved model for Mount Vernon, WA metro area\n",
            "✅ Saved model for Grenada, MS metro area\n",
            "✅ Saved model for Bogalusa, LA metro area\n",
            "✅ Saved model for New Bern, NC metro area\n",
            "✅ Saved model for Quincy, IL metro area\n",
            "✅ Saved model for Shelbyville, TN metro area\n",
            "✅ Saved model for Abilene, TX metro area\n",
            "✅ Saved model for Jamestown, NY metro area\n",
            "✅ Saved model for Lansing, MI metro area\n",
            "✅ Saved model for Nassau County, NY metro area\n",
            "✅ Saved model for Wilmington, DE metro area\n",
            "✅ Saved model for Ogdensburg, NY metro area\n",
            "✅ Saved model for Phoenix, AZ metro area\n",
            "✅ Saved model for Flagstaff, AZ metro area\n",
            "✅ Saved model for Klamath Falls, OR metro area\n",
            "✅ Saved model for Fairmont, MN metro area\n",
            "✅ Saved model for Athens, OH metro area\n",
            "✅ Saved model for Youngstown, OH metro area\n",
            "✅ Saved model for Louisville, KY metro area\n",
            "✅ Saved model for Frankfort, IN metro area\n",
            "✅ Saved model for Greenville, MS metro area\n",
            "✅ Saved model for Watertown, SD metro area\n",
            "✅ Saved model for Bloomington, IL metro area\n",
            "✅ Saved model for Columbus, OH metro area\n",
            "✅ Saved model for Hilo, HI metro area\n",
            "✅ Saved model for Zanesville, OH metro area\n",
            "✅ Saved model for Chico, CA metro area\n",
            "✅ Saved model for Los Alamos, NM metro area\n",
            "✅ Saved model for Magnolia, AR metro area\n",
            "✅ Saved model for Bonham, TX metro area\n",
            "✅ Saved model for Cookeville, TN metro area\n",
            "✅ Saved model for Brownsville, TX metro area\n",
            "✅ Saved model for Pinehurst, NC metro area\n",
            "✅ Saved model for Crestview, FL metro area\n",
            "✅ Saved model for Reading, PA metro area\n",
            "✅ Saved model for Santa Cruz, CA metro area\n",
            "✅ Saved model for Minneapolis, MN metro area\n",
            "✅ Saved model for Brenham, TX metro area\n",
            "✅ Saved model for Holland, MI metro area\n",
            "✅ Saved model for Georgetown, SC metro area\n",
            "✅ Saved model for Olean, NY metro area\n",
            "✅ Saved model for Great Falls, MT metro area\n",
            "✅ Saved model for Virginia Beach, VA metro area\n",
            "✅ Saved model for Poughkeepsie, NY metro area\n",
            "✅ Saved model for St. Cloud, MN metro area\n",
            "✅ Saved model for Riverside, CA metro area\n",
            "✅ Saved model for Spartanburg, SC metro area\n",
            "✅ Saved model for Coeur d'Alene, ID metro area\n",
            "✅ Saved model for Auburn, IN metro area\n",
            "✅ Saved model for Greenville, NC metro area\n",
            "✅ Saved model for Selinsgrove, PA metro area\n",
            "✅ Saved model for Elizabethtown, KY metro area\n",
            "✅ Saved model for Branson, MO metro area\n",
            "✅ Saved model for Jackson, OH metro area\n",
            "✅ Saved model for Spirit Lake, IA metro area\n",
            "✅ Saved model for Pottsville, PA metro area\n",
            "✅ Saved model for Sault Ste. Marie, MI metro area\n",
            "✅ Saved model for Clearlake, CA metro area\n",
            "✅ Saved model for Roanoke, VA metro area\n",
            "✅ Saved model for Manchester, NH metro area\n",
            "✅ Saved model for Charleston, IL metro area\n",
            "✅ Saved model for Heber, UT metro area\n",
            "✅ Saved model for Ithaca, NY metro area\n",
            "✅ Saved model for Yakima, WA metro area\n",
            "✅ Saved model for Tulsa, OK metro area\n",
            "✅ Saved model for Watertown, NY metro area\n",
            "✅ Saved model for Hope, AR metro area\n",
            "✅ Saved model for Spokane, WA metro area\n",
            "✅ Saved model for Jasper, AL metro area\n",
            "✅ Saved model for Tullahoma, TN metro area\n",
            "✅ Saved model for Escanaba, MI metro area\n",
            "✅ Saved model for Celina, OH metro area\n",
            "✅ Saved model for Somerset, KY metro area\n",
            "✅ Saved model for Washington Court House, OH metro area\n",
            "✅ Saved model for Selma, AL metro area\n",
            "✅ Saved model for Sacramento, CA metro area\n",
            "✅ Saved model for Coldwater, MI metro area\n",
            "✅ Saved model for Clarksville, TN metro area\n",
            "✅ Saved model for Greenville, SC metro area\n",
            "✅ Saved model for Charlotte, NC metro area\n",
            "✅ Saved model for Seymour, IN metro area\n",
            "✅ Saved model for Lubbock, TX metro area\n",
            "✅ Saved model for Brainerd, MN metro area\n",
            "✅ Saved model for Springfield, MO metro area\n",
            "✅ Saved model for Burlington, VT metro area\n",
            "✅ Saved model for Kansas City, MO metro area\n",
            "✅ Saved model for Salem, OR metro area\n",
            "✅ Saved model for Macon, GA metro area\n",
            "✅ Saved model for Boulder, CO metro area\n",
            "✅ Saved model for Bennington, VT metro area\n",
            "✅ Saved model for Savannah, GA metro area\n",
            "✅ Saved model for Sevierville, TN metro area\n",
            "✅ Saved model for Okeechobee, FL metro area\n",
            "✅ Saved model for Cleveland, TN metro area\n",
            "✅ Saved model for Lynchburg, VA metro area\n",
            "✅ Saved model for Middlesborough, KY metro area\n",
            "✅ Saved model for Seneca Falls, NY metro area\n",
            "✅ Saved model for Spencer, IA metro area\n",
            "✅ Saved model for Thomasville, GA metro area\n",
            "✅ Saved model for Poplar Bluff, MO metro area\n",
            "✅ Saved model for Atlantic City, NJ metro area\n",
            "✅ Saved model for Odessa, TX metro area\n",
            "✅ Saved model for Ashland, OH metro area\n",
            "✅ Saved model for Opelousas, LA metro area\n",
            "✅ Saved model for Coos Bay, OR metro area\n",
            "✅ Saved model for Muncie, IN metro area\n",
            "✅ Saved model for Nacogdoches, TX metro area\n",
            "✅ Saved model for Evanston, WY metro area\n",
            "✅ Saved model for Carbondale, IL metro area\n",
            "✅ Saved model for Warner Robins, GA metro area\n",
            "✅ Saved model for Los Angeles, CA metro area\n",
            "✅ Saved model for Bay City, TX metro area\n",
            "✅ Saved model for Monroe, MI metro area\n",
            "✅ Saved model for Statesboro, GA metro area\n",
            "✅ Saved model for Atchison, KS metro area\n",
            "✅ Saved model for Johnson City, TN metro area\n",
            "✅ Saved model for Fort Polk South, LA metro area\n",
            "✅ Saved model for Hutchinson, MN metro area\n",
            "✅ Saved model for Victoria, TX metro area\n",
            "✅ Saved model for New Castle, IN metro area\n",
            "✅ Saved model for Greenville, OH metro area\n",
            "✅ Saved model for Dodge City, KS metro area\n",
            "✅ Saved model for Marietta, OH metro area\n",
            "✅ Saved model for Decatur, IN metro area\n",
            "✅ Saved model for Oxnard, CA metro area\n",
            "✅ Saved model for Grants Pass, OR metro area\n",
            "✅ Saved model for Houghton, MI metro area\n",
            "✅ Saved model for Bardstown, KY metro area\n",
            "✅ Saved model for Hot Springs, AR metro area\n",
            "✅ Saved model for Alice, TX metro area\n",
            "✅ Saved model for Blackfoot, ID metro area\n",
            "✅ Saved model for Oxford, MS metro area\n",
            "✅ Saved model for Williamsport, PA metro area\n",
            "✅ Saved model for State College, PA metro area\n",
            "✅ Saved model for Fort Worth, TX metro area\n",
            "✅ Saved model for Wapakoneta, OH metro area\n",
            "✅ Saved model for Van Wert, OH metro area\n",
            "✅ Saved model for Adrian, MI metro area\n",
            "✅ Saved model for Beaver Dam, WI metro area\n",
            "✅ Saved model for Mason City, IA metro area\n",
            "✅ Saved model for Prineville, OR metro area\n",
            "✅ Saved model for Dothan, AL metro area\n",
            "✅ Saved model for Cleveland, OH metro area\n",
            "✅ Saved model for Sherman, TX metro area\n",
            "✅ Saved model for Lincoln, IL metro area\n",
            "✅ Saved model for Key West, FL metro area\n",
            "✅ Saved model for Meridian, MS metro area\n",
            "✅ Saved model for Marshall, MO metro area\n",
            "✅ Saved model for Wichita, KS metro area\n",
            "✅ Saved model for Grand Rapids, MN metro area\n",
            "✅ Saved model for Grants, NM metro area\n",
            "✅ Saved model for Asheville, NC metro area\n",
            "✅ Saved model for Manhattan, KS metro area\n",
            "✅ Saved model for Rockingham County, NH metro area\n",
            "✅ Saved model for Kearney, NE metro area\n",
            "✅ Saved model for Susanville, CA metro area\n",
            "✅ Saved model for Oshkosh, WI metro area\n",
            "✅ Saved model for Albany, NY metro area\n",
            "✅ Saved model for Salinas, CA metro area\n",
            "✅ Saved model for Wausau, WI metro area\n",
            "✅ Saved model for Tuscaloosa, AL metro area\n",
            "✅ Saved model for Taos, NM metro area\n",
            "✅ Saved model for Santa Rosa, CA metro area\n",
            "✅ Saved model for Marquette, MI metro area\n",
            "✅ Saved model for Madisonville, KY metro area\n",
            "✅ Saved model for Moscow, ID metro area\n",
            "✅ Saved model for Terre Haute, IN metro area\n",
            "✅ Saved model for Cincinnati, OH metro area\n",
            "✅ Saved model for Waco, TX metro area\n",
            "✅ Saved model for Lake City, FL metro area\n",
            "✅ Saved model for Ruston, LA metro area\n",
            "✅ Saved model for Scranton, PA metro area\n",
            "✅ Saved model for Palatka, FL metro area\n",
            "✅ Saved model for Pontiac, IL metro area\n",
            "✅ Saved model for Knoxville, TN metro area\n",
            "✅ Saved model for Malvern, AR metro area\n",
            "✅ Saved model for Marinette, WI metro area\n",
            "✅ Saved model for Deltona, FL metro area\n",
            "✅ Saved model for West Palm Beach, FL metro area\n",
            "✅ Saved model for Emporia, KS metro area\n",
            "✅ Saved model for Rochelle, IL metro area\n",
            "✅ Saved model for Paris, TX metro area\n",
            "✅ Saved model for Auburn, AL metro area\n",
            "✅ Saved model for Shelby, NC metro area\n",
            "✅ Saved model for Elgin, IL metro area\n",
            "✅ Saved model for Lake Charles, LA metro area\n",
            "✅ Saved model for Mineral Wells, TX metro area\n",
            "✅ Saved model for Chicago, IL metro area\n",
            "✅ Saved model for Gulfport, MS metro area\n",
            "✅ Saved model for Jackson, WY metro area\n",
            "✅ Saved model for Americus, GA metro area\n",
            "✅ Saved model for Erie, PA metro area\n",
            "✅ Saved model for Harrisonburg, VA metro area\n",
            "✅ Saved model for Modesto, CA metro area\n",
            "✅ Saved model for Duncan, OK metro area\n",
            "✅ Saved model for New Haven, CT metro area\n",
            "✅ Saved model for Othello, WA metro area\n",
            "✅ Saved model for Craig, CO metro area\n",
            "✅ Saved model for Frederick, MD metro area\n",
            "✅ Saved model for Muscatine, IA metro area\n",
            "✅ Saved model for Chambersburg, PA metro area\n",
            "✅ Saved model for Ottawa, KS metro area\n",
            "✅ Saved model for Fort Collins, CO metro area\n",
            "✅ Saved model for Truckee, CA metro area\n",
            "✅ Saved model for Lawrence, KS metro area\n",
            "✅ Saved model for Hailey, ID metro area\n",
            "✅ Saved model for Enterprise, AL metro area\n",
            "✅ Saved model for Sebring, FL metro area\n",
            "✅ Saved model for Rochester, MN metro area\n",
            "✅ Saved model for Glens Falls, NY metro area\n",
            "✅ Saved model for Newark, NJ metro area\n",
            "✅ Saved model for Portsmouth, OH metro area\n",
            "✅ Saved model for Walla Walla, WA metro area\n",
            "✅ Saved model for Davenport, IA metro area\n",
            "✅ Saved model for Tupelo, MS metro area\n",
            "✅ Saved model for The Villages, FL metro area\n",
            "✅ Saved model for Charlottesville, VA metro area\n",
            "✅ Saved model for Madison, IN metro area\n",
            "✅ Saved model for Sebastian, FL metro area\n",
            "✅ Saved model for Ocean City, NJ metro area\n",
            "✅ Saved model for Blacksburg, VA metro area\n",
            "✅ Saved model for Sumter, SC metro area\n",
            "✅ Saved model for Port Angeles, WA metro area\n",
            "✅ Saved model for College Station, TX metro area\n",
            "✅ Saved model for Santa Fe, NM metro area\n",
            "✅ Saved model for DeRidder, LA metro area\n",
            "✅ Saved model for Andrews, TX metro area\n",
            "✅ Saved model for Hood River, OR metro area\n",
            "✅ Saved model for Green Bay, WI metro area\n",
            "✅ Saved model for Reno, NV metro area\n",
            "✅ Saved model for Kokomo, IN metro area\n",
            "✅ Saved model for Altoona, PA metro area\n",
            "✅ Saved model for York, PA metro area\n",
            "✅ Saved model for Muskegon, MI metro area\n",
            "✅ Saved model for Bowling Green, KY metro area\n",
            "✅ Saved model for Malone, NY metro area\n",
            "✅ Saved model for Kingston, NY metro area\n",
            "✅ Saved model for Oskaloosa, IA metro area\n",
            "✅ Saved model for Williston, ND metro area\n",
            "✅ Saved model for Parsons, KS metro area\n",
            "✅ Saved model for Birmingham, AL metro area\n",
            "✅ Saved model for Centralia, WA metro area\n",
            "✅ Saved model for Beatrice, NE metro area\n",
            "✅ Saved model for Bridgeport, CT metro area\n",
            "✅ Saved model for Champaign, IL metro area\n",
            "✅ Saved model for Santa Maria, CA metro area\n",
            "✅ Saved model for Mountain Home, ID metro area\n",
            "✅ Saved model for Bakersfield, CA metro area\n",
            "✅ Saved model for Lafayette, IN metro area\n",
            "✅ Saved model for Racine, WI metro area\n",
            "✅ Saved model for Norwalk, OH metro area\n",
            "✅ Saved model for Toledo, OH metro area\n",
            "✅ Saved model for Topeka, KS metro area\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-10-78da0c9792d0>:31: FutureWarning: The default fill_method='pad' in Series.pct_change is deprecated and will be removed in a future version. Either fill in any non-leading NA values prior to calling pct_change or specify 'fill_method=None' to not fill NA values.\n",
            "  metro_df['yoy_price_change'] = metro_df['median_sale_price'].pct_change(12)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ Saved model for Charleston, SC metro area\n",
            "✅ Saved model for Dubuque, IA metro area\n",
            "✅ Saved model for Mountain Home, AR metro area\n",
            "✅ Saved model for Washington, IN metro area\n",
            "✅ Saved model for Kerrville, TX metro area\n",
            "✅ Saved model for Glenwood Springs, CO metro area\n",
            "✅ Saved model for Anchorage, AK metro area\n",
            "✅ Saved model for Missoula, MT metro area\n",
            "✅ Saved model for Seattle, WA metro area\n",
            "✅ Saved model for Payson, AZ metro area\n",
            "✅ Saved model for Jennings, LA metro area\n",
            "✅ Saved model for Dixon, IL metro area\n",
            "✅ Saved model for Kirksville, MO metro area\n",
            "✅ Saved model for Huntington, IN metro area\n",
            "✅ Saved model for Mount Vernon, IL metro area\n",
            "✅ Saved model for Roswell, NM metro area\n",
            "✅ Saved model for La Crosse, WI metro area\n",
            "✅ Saved model for Bellingham, WA metro area\n",
            "✅ Saved model for Juneau, AK metro area\n",
            "✅ Saved model for Atmore, AL metro area\n",
            "✅ Saved model for Easton, MD metro area\n",
            "✅ Saved model for Napa, CA metro area\n",
            "✅ Saved model for Killeen, TX metro area\n",
            "✅ Saved model for Rochester, NY metro area\n",
            "✅ Saved model for Amarillo, TX metro area\n",
            "✅ Saved model for Newport, OR metro area\n",
            "✅ Saved model for Sioux Falls, SD metro area\n",
            "✅ Saved model for Brookhaven, MS metro area\n",
            "✅ Saved model for McAllen, TX metro area\n",
            "✅ Saved model for Sandusky, OH metro area\n",
            "✅ Saved model for Hillsdale, MI metro area\n",
            "✅ Saved model for Richmond, IN metro area\n",
            "✅ Saved model for Garden City, KS metro area\n",
            "✅ Saved model for Camden, AR metro area\n",
            "✅ Saved model for San Angelo, TX metro area\n",
            "✅ Saved model for Sonora, CA metro area\n",
            "✅ Saved model for Appleton, WI metro area\n",
            "✅ Saved model for San Francisco, CA metro area\n",
            "✅ Saved model for Athens, TN metro area\n",
            "✅ Saved model for Greensburg, IN metro area\n",
            "✅ Saved model for Columbus, NE metro area\n",
            "✅ Saved model for San Antonio, TX metro area\n",
            "✅ Saved model for Fayetteville, AR metro area\n",
            "✅ Saved model for Big Spring, TX metro area\n",
            "✅ Saved model for Billings, MT metro area\n",
            "✅ Saved model for Fayetteville, NC metro area\n",
            "✅ Saved model for Fredericksburg, TX metro area\n",
            "✅ Saved model for Lumberton, NC metro area\n",
            "✅ Saved model for Detroit, MI metro area\n",
            "✅ Saved model for Pampa, TX metro area\n",
            "✅ Saved model for Paris, TN metro area\n",
            "✅ Saved model for Riverton, WY metro area\n",
            "✅ Saved model for North Platte, NE metro area\n",
            "✅ Saved model for Lexington, KY metro area\n",
            "✅ Saved model for Wenatchee, WA metro area\n",
            "✅ Saved model for Waterloo, IA metro area\n",
            "✅ Saved model for Bremerton, WA metro area\n",
            "✅ Saved model for Tallahassee, FL metro area\n",
            "✅ Saved model for Gary, IN metro area\n",
            "✅ Saved model for Albert Lea, MN metro area\n",
            "✅ Saved model for Mobile, AL metro area\n",
            "✅ Saved model for Mount Pleasant, MI metro area\n",
            "✅ Saved model for Worcester, MA metro area\n",
            "✅ Saved model for Kingsville, TX metro area\n",
            "✅ Saved model for Durham, NC metro area\n",
            "✅ Saved model for Yuba City, CA metro area\n",
            "✅ Saved model for Concord, NH metro area\n",
            "✅ Saved model for Taylorville, IL metro area\n",
            "✅ Saved model for Pueblo, CO metro area\n",
            "✅ Saved model for New York, NY metro area\n",
            "✅ Saved model for Harrisburg, PA metro area\n",
            "✅ Saved model for Danville, KY metro area\n",
            "✅ Saved model for Chillicothe, OH metro area\n",
            "✅ Saved model for Wheeling, WV metro area\n",
            "✅ Saved model for Bartlesville, OK metro area\n",
            "✅ Saved model for Wilmington, OH metro area\n",
            "✅ Saved model for Frankfort, KY metro area\n",
            "✅ Saved model for Liberal, KS metro area\n",
            "✅ Saved model for Sandpoint, ID metro area\n",
            "✅ Saved model for Brevard, NC metro area\n",
            "✅ Saved model for Ottawa, IL metro area\n",
            "✅ Saved model for San Diego, CA metro area\n",
            "✅ Saved model for Dallas, TX metro area\n",
            "✅ Saved model for Vineyard Haven, MA metro area\n",
            "✅ Saved model for Granbury, TX metro area\n",
            "✅ Saved model for Cedar Rapids, IA metro area\n",
            "✅ Saved model for Medford, OR metro area\n",
            "✅ Saved model for Greenwood, MS metro area\n",
            "✅ Saved model for Dalton, GA metro area\n",
            "✅ Saved model for Spearfish, SD metro area\n",
            "✅ Saved model for Fergus Falls, MN metro area\n",
            "✅ Saved model for Pittsburgh, PA metro area\n",
            "✅ Saved model for Sturgis, MI metro area\n",
            "✅ Saved model for Prescott Valley, AZ metro area\n",
            "✅ Saved model for Storm Lake, IA metro area\n",
            "✅ Saved model for Marion, IN metro area\n",
            "✅ Saved model for Michigan City, IN metro area\n",
            "✅ Saved model for Twin Falls, ID metro area\n",
            "✅ Saved model for Corning, NY metro area\n",
            "✅ Saved model for Bay City, MI metro area\n",
            "✅ Saved model for Union, SC metro area\n",
            "✅ Saved model for Tahlequah, OK metro area\n",
            "✅ Saved model for Fallon, NV metro area\n",
            "✅ Saved model for Scottsboro, AL metro area\n",
            "✅ Saved model for Platteville, WI metro area\n",
            "✅ Saved model for Bozeman, MT metro area\n",
            "✅ Saved model for Columbus, IN metro area\n",
            "✅ Saved model for Decatur, IL metro area\n",
            "✅ Saved model for Aberdeen, WA metro area\n",
            "✅ Saved model for Daphne, AL metro area\n",
            "✅ Saved model for Angola, IN metro area\n",
            "✅ Saved model for Carson City, NV metro area\n",
            "✅ Saved model for Florence, AL metro area\n",
            "✅ Saved model for Gainesville, GA metro area\n",
            "✅ Saved model for Talladega, AL metro area\n",
            "Skipping Colorado Springs, CO metro area — too few rows.\n",
            "✅ Saved model for Cape Girardeau, MO metro area\n",
            "✅ Saved model for Burlington, IA metro area\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-10-78da0c9792d0>:31: FutureWarning: The default fill_method='pad' in Series.pct_change is deprecated and will be removed in a future version. Either fill in any non-leading NA values prior to calling pct_change or specify 'fill_method=None' to not fill NA values.\n",
            "  metro_df['yoy_price_change'] = metro_df['median_sale_price'].pct_change(12)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ Saved model for Plymouth, IN metro area\n",
            "✅ Saved model for Rutland, VT metro area\n",
            "✅ Saved model for Jackson, MI metro area\n",
            "✅ Saved model for Yankton, SD metro area\n",
            "✅ Saved model for Uvalde, TX metro area\n",
            "✅ Saved model for Eau Claire, WI metro area\n",
            "✅ Saved model for Astoria, OR metro area\n",
            "✅ Saved model for Farmington, MO metro area\n",
            "✅ Saved model for Greensboro, NC metro area\n",
            "✅ Saved model for Clinton, IA metro area\n",
            "✅ Saved model for Hanford, CA metro area\n",
            "✅ Saved model for Somerset, PA metro area\n",
            "✅ Saved model for Elmira, NY metro area\n",
            "✅ Saved model for Hammond, LA metro area\n",
            "✅ Saved model for Huntington, WV metro area\n",
            "✅ Saved model for Enid, OK metro area\n",
            "✅ Saved model for Jefferson City, MO metro area\n",
            "✅ Saved model for Peoria, IL metro area\n",
            "✅ Saved model for Miami, OK metro area\n",
            "✅ Saved model for Torrington, CT metro area\n",
            "✅ Saved model for Laredo, TX metro area\n",
            "✅ Saved model for Homosassa Springs, FL metro area\n",
            "✅ Saved model for San Rafael, CA metro area\n",
            "✅ Saved model for Cambridge, OH metro area\n",
            "✅ Saved model for Oneonta, NY metro area\n",
            "✅ Saved model for Austin, MN metro area\n",
            "✅ Saved model for Lufkin, TX metro area\n",
            "✅ Saved model for Ellensburg, WA metro area\n",
            "✅ Saved model for Fort Madison, IA metro area\n",
            "✅ Saved model for Pine Bluff, AR metro area\n",
            "✅ Saved model for Arcadia, FL metro area\n",
            "✅ Saved model for Laconia, NH metro area\n",
            "✅ Saved model for Saginaw, MI metro area\n",
            "✅ Saved model for Atlanta, GA metro area\n",
            "✅ Saved model for Albany, OR metro area\n",
            "✅ Saved model for Laramie, WY metro area\n",
            "✅ Saved model for Richmond, VA metro area\n",
            "✅ Saved model for Brownwood, TX metro area\n",
            "✅ Saved model for Stephenville, TX metro area\n",
            "✅ Saved model for Hudson, NY metro area\n",
            "✅ Saved model for Monroe, LA metro area\n",
            "✅ Saved model for Clarksdale, MS metro area\n",
            "✅ Saved model for Silver City, NM metro area\n",
            "✅ Saved model for Mount Vernon, OH metro area\n",
            "✅ Saved model for Lakeland, FL metro area\n",
            "✅ Saved model for Pahrump, NV metro area\n",
            "✅ Saved model for Lebanon, PA metro area\n",
            "✅ Saved model for Burlington, NC metro area\n",
            "✅ Saved model for Fort Lauderdale, FL metro area\n",
            "✅ Saved model for Baton Rouge, LA metro area\n",
            "✅ Saved model for Baraboo, WI metro area\n",
            "✅ Saved model for Columbia, MO metro area\n",
            "✅ Saved model for Batavia, NY metro area\n",
            "✅ Saved model for Mount Airy, NC metro area\n",
            "✅ Saved model for Staunton, VA metro area\n",
            "✅ Saved model for Lafayette, LA metro area\n",
            "✅ Saved model for Murray, KY metro area\n",
            "✅ Saved model for Dickinson, ND metro area\n",
            "✅ Saved model for Ames, IA metro area\n",
            "✅ Saved model for Union City, TN metro area\n",
            "✅ Saved model for Kingsport, TN metro area\n",
            "✅ Saved model for Fairmont, WV metro area\n",
            "✅ Saved model for Watertown, WI metro area\n",
            "✅ Saved model for Huntsville, AL metro area\n",
            "✅ Saved model for Minot, ND metro area\n",
            "✅ Saved model for Indiana, PA metro area\n",
            "✅ Saved model for Bangor, ME metro area\n",
            "✅ Saved model for Roanoke Rapids, NC metro area\n",
            "✅ Saved model for Connersville, IN metro area\n",
            "✅ Saved model for Bellefontaine, OH metro area\n",
            "✅ Saved model for Olympia, WA metro area\n",
            "✅ Saved model for Midland, MI metro area\n",
            "✅ Saved model for Martin, TN metro area\n",
            "✅ Saved model for Tifton, GA metro area\n",
            "✅ Saved model for North Port, FL metro area\n",
            "✅ Saved model for Elkhart, IN metro area\n",
            "✅ Saved model for Searcy, AR metro area\n",
            "✅ Saved model for El Centro, CA metro area\n",
            "✅ Saved model for Rockport, TX metro area\n",
            "✅ Saved model for Beeville, TX metro area\n",
            "✅ Saved model for Cape Coral, FL metro area\n",
            "✅ Saved model for Decatur, AL metro area\n",
            "✅ Saved model for Boston, MA metro area\n",
            "✅ Saved model for Troy, AL metro area\n",
            "✅ Saved model for Lima, OH metro area\n",
            "✅ Saved model for Rock Springs, WY metro area\n",
            "✅ Saved model for Freeport, IL metro area\n",
            "✅ Saved model for Albany, GA metro area\n",
            "✅ Saved model for Bluefield, WV metro area\n",
            "✅ Saved model for Macomb, IL metro area\n",
            "✅ Saved model for Montrose, CO metro area\n",
            "✅ Saved model for Greenwood, SC metro area\n",
            "✅ Saved model for Barnstable Town, MA metro area\n",
            "✅ Saved model for Winnemucca, NV metro area\n",
            "✅ Saved model for Centralia, IL metro area\n",
            "✅ Saved model for Albertville, AL metro area\n",
            "✅ Saved model for Salem, OH metro area\n",
            "✅ Saved model for Kankakee, IL metro area\n",
            "✅ Saved model for Clarksburg, WV metro area\n",
            "✅ Saved model for Brownsville, TN metro area\n",
            "✅ Saved model for Breckenridge, CO metro area\n",
            "✅ Saved model for Vineland, NJ metro area\n",
            "✅ Saved model for Sweetwater, TX metro area\n",
            "✅ Saved model for Alpena, MI metro area\n",
            "✅ Saved model for Camden, NJ metro area\n",
            "✅ Saved model for London, KY metro area\n",
            "✅ Saved model for Sanford, NC metro area\n",
            "✅ Saved model for Steamboat Springs, CO metro area\n",
            "✅ Saved model for Huron, SD metro area\n",
            "✅ Saved model for Niles, MI metro area\n",
            "✅ Saved model for Central City, KY metro area\n",
            "✅ Saved model for Shawnee, OK metro area\n",
            "✅ Saved model for Houma, LA metro area\n",
            "✅ Saved model for San Luis Obispo, CA metro area\n",
            "✅ Saved model for Menomonie, WI metro area\n",
            "✅ Saved model for Crawfordsville, IN metro area\n",
            "✅ Saved model for Lewiston, ID metro area\n",
            "✅ Saved model for Fort Smith, AR metro area\n",
            "✅ Saved model for La Grande, OR metro area\n",
            "✅ Saved model for Rocky Mount, NC metro area\n",
            "✅ Saved model for Raleigh, NC metro area\n",
            "✅ Saved model for Hobbs, NM metro area\n",
            "✅ Saved model for Dayton, OH metro area\n",
            "✅ Saved model for Florence, SC metro area\n",
            "✅ Saved model for Forest City, NC metro area\n",
            "✅ Saved model for Evansville, IN metro area\n",
            "✅ Saved model for Gaffney, SC metro area\n",
            "✅ Saved model for Beckley, WV metro area\n",
            "✅ Saved model for Longview, TX metro area\n",
            "✅ Saved model for Morristown, TN metro area\n",
            "✅ Saved model for Deming, NM metro area\n",
            "✅ Saved model for Dover, DE metro area\n",
            "✅ Saved model for Panama City, FL metro area\n",
            "✅ Saved model for Wisconsin Rapids, WI metro area\n",
            "✅ Saved model for Gillette, WY metro area\n",
            "✅ Saved model for Weatherford, OK metro area\n",
            "✅ Saved model for Del Rio, TX metro area\n",
            "✅ Saved model for New Philadelphia, OH metro area\n",
            "✅ Saved model for Mansfield, OH metro area\n",
            "✅ Saved model for Tyler, TX metro area\n",
            "✅ Saved model for Winchester, VA metro area\n",
            "✅ Saved model for Providence, RI metro area\n",
            "✅ Saved model for Athens, TX metro area\n",
            "✅ Saved model for Plattsburgh, NY metro area\n",
            "✅ Saved model for Coshocton, OH metro area\n",
            "✅ Saved model for Madison, WI metro area\n",
            "✅ Saved model for Jackson, TN metro area\n",
            "✅ Saved model for Lewistown, PA metro area\n",
            "✅ Saved model for Great Bend, KS metro area\n",
            "✅ Saved model for Buffalo, NY metro area\n",
            "✅ Saved model for Gloversville, NY metro area\n",
            "✅ Saved model for Ashtabula, OH metro area\n",
            "✅ Saved model for San Jose, CA metro area\n",
            "✅ Saved model for Whitewater, WI metro area\n",
            "✅ Saved model for Denver, CO metro area\n",
            "✅ Saved model for Iowa City, IA metro area\n",
            "✅ Saved model for Pittsburg, KS metro area\n",
            "✅ Saved model for Battle Creek, MI metro area\n",
            "✅ Saved model for Durango, CO metro area\n",
            "✅ Saved model for Redding, CA metro area\n",
            "✅ Saved model for Natchitoches, LA metro area\n",
            "✅ Saved model for Danville, IL metro area\n",
            "✅ Saved model for Paragould, AR metro area\n",
            "✅ Saved model for Traverse City, MI metro area\n",
            "✅ Saved model for Dayton, TN metro area\n",
            "✅ Saved model for Pearsall, TX metro area\n",
            "✅ Saved model for Calhoun, GA metro area\n",
            "✅ Saved model for Bluffton, IN metro area\n",
            "✅ Saved model for St. Marys, GA metro area\n",
            "✅ Saved model for Cañon City, CO metro area\n",
            "✅ Saved model for Fort Payne, AL metro area\n",
            "✅ Saved model for Hagerstown, MD metro area\n",
            "✅ Saved model for Fort Dodge, IA metro area\n",
            "✅ Saved model for Honolulu, HI metro area\n",
            "✅ Saved model for Marshalltown, IA metro area\n",
            "✅ Saved model for Fort Wayne, IN metro area\n",
            "✅ Saved model for Jesup, GA metro area\n",
            "✅ Saved model for The Dalles, OR metro area\n",
            "✅ Saved model for Longview, WA metro area\n",
            "✅ Saved model for Pella, IA metro area\n",
            "✅ Saved model for Tucson, AZ metro area\n",
            "✅ Saved model for Jasper, IN metro area\n",
            "✅ Saved model for Roseburg, OR metro area\n",
            "✅ Saved model for DuBois, PA metro area\n",
            "✅ Saved model for Omaha, NE metro area\n",
            "✅ Saved model for Jacksonville, FL metro area\n",
            "✅ Saved model for Clovis, NM metro area\n",
            "✅ Saved model for St. Louis, MO metro area\n",
            "✅ Saved model for Fort Leonard Wood, MO metro area\n",
            "✅ Saved model for Alma, MI metro area\n",
            "✅ Saved model for Alexandria, MN metro area\n",
            "✅ Saved model for Lamesa, TX metro area\n",
            "✅ Saved model for Wabash, IN metro area\n",
            "✅ Saved model for Kill Devil Hills, NC metro area\n",
            "✅ Saved model for Marion, NC metro area\n",
            "✅ Saved model for Norwich, CT metro area\n",
            "✅ Saved model for Zapata, TX metro area\n",
            "✅ Saved model for Montgomery, AL metro area\n",
            "✅ Saved model for Shawano, WI metro area\n",
            "✅ Saved model for Cullowhee, NC metro area\n",
            "✅ Saved model for Portland, OR metro area\n",
            "✅ Saved model for Ukiah, CA metro area\n",
            "✅ Saved model for Thomaston, GA metro area\n",
            "✅ Saved model for McMinnville, TN metro area\n",
            "✅ Saved model for Cadillac, MI metro area\n",
            "✅ Saved model for Toccoa, GA metro area\n",
            "✅ Saved model for Elko, NV metro area\n",
            "✅ Saved model for Jacksonville, NC metro area\n",
            "✅ Saved model for Hickory, NC metro area\n",
            "✅ Saved model for Grand Rapids, MI metro area\n",
            "✅ Saved model for Sidney, OH metro area\n",
            "✅ Saved model for El Paso, TX metro area\n",
            "✅ Saved model for Washington, NC metro area\n",
            "✅ Saved model for Portland, ME metro area\n",
            "✅ Saved model for Peru, IN metro area\n",
            "✅ Saved model for Joplin, MO metro area\n",
            "✅ Saved model for Big Rapids, MI metro area\n",
            "✅ Saved model for Las Vegas, NV metro area\n",
            "✅ Saved model for Kapaa, HI metro area\n",
            "✅ Saved model for Hannibal, MO metro area\n",
            "✅ Saved model for St. George, UT metro area\n",
            "✅ Saved model for Alexander City, AL metro area\n",
            "✅ Saved model for Visalia, CA metro area\n",
            "✅ Saved model for Sedalia, MO metro area\n",
            "✅ Saved model for Kennewick, WA metro area\n",
            "✅ Saved model for Bloomington, IN metro area\n",
            "✅ Saved model for Wauchula, FL metro area\n",
            "✅ Saved model for Lake Havasu City, AZ metro area\n",
            "✅ Saved model for Shreveport, LA metro area\n",
            "✅ Saved model for Cedartown, GA metro area\n",
            "✅ Saved model for Milledgeville, GA metro area\n",
            "✅ Saved model for Fond du Lac, WI metro area\n",
            "✅ Saved model for Ada, OK metro area\n",
            "✅ Saved model for Auburn, NY metro area\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-10-78da0c9792d0>:31: FutureWarning: The default fill_method='pad' in Series.pct_change is deprecated and will be removed in a future version. Either fill in any non-leading NA values prior to calling pct_change or specify 'fill_method=None' to not fill NA values.\n",
            "  metro_df['yoy_price_change'] = metro_df['median_sale_price'].pct_change(12)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ Saved model for El Dorado, AR metro area\n",
            "✅ Saved model for Paducah, KY metro area\n",
            "✅ Saved model for Winston-Salem, NC metro area\n",
            "✅ Saved model for Greeneville, TN metro area\n",
            "✅ Saved model for Grand Junction, CO metro area\n",
            "✅ Saved model for Corinth, MS metro area\n",
            "✅ Saved model for Elkins, WV metro area\n",
            "✅ Saved model for Altus, OK metro area\n",
            "✅ Saved model for Lexington, NE metro area\n",
            "✅ Saved model for Beaumont, TX metro area\n",
            "✅ Saved model for Carlsbad, NM metro area\n",
            "✅ Saved model for Crescent City, CA metro area\n",
            "✅ Saved model for Forrest City, AR metro area\n",
            "✅ Saved model for Oak Harbor, WA metro area\n",
            "✅ Saved model for Corsicana, TX metro area\n",
            "✅ Saved model for Orlando, FL metro area\n",
            "✅ Saved model for Anniston, AL metro area\n",
            "✅ Saved model for Vincennes, IN metro area\n",
            "✅ Saved model for Kendallville, IN metro area\n",
            "✅ Saved model for Palm Bay, FL metro area\n",
            "✅ Saved model for Show Low, AZ metro area\n",
            "✅ Saved model for Parkersburg, WV metro area\n",
            "✅ Saved model for Meadville, PA metro area\n",
            "✅ Saved model for Borger, TX metro area\n",
            "✅ Saved model for Elizabeth City, NC metro area\n",
            "✅ Saved model for Urbana, OH metro area\n",
            "✅ Saved model for Maysville, KY metro area\n",
            "✅ Saved model for Fresno, CA metro area\n",
            "✅ Saved model for Bedford, IN metro area\n",
            "✅ Saved model for Arkadelphia, AR metro area\n",
            "✅ Saved model for Seneca, SC metro area\n",
            "✅ Saved model for Fremont, NE metro area\n",
            "✅ Saved model for Bend, OR metro area\n",
            "✅ Saved model for Sterling, IL metro area\n",
            "✅ Saved model for Sioux City, IA metro area\n",
            "✅ Saved model for Ruidoso, NM metro area\n",
            "✅ Saved model for Kalispell, MT metro area\n",
            "✅ Saved model for Hays, KS metro area\n",
            "✅ Saved model for Picayune, MS metro area\n",
            "✅ Saved model for Augusta, GA metro area\n",
            "✅ Saved model for Sheboygan, WI metro area\n",
            "✅ Saved model for Butte, MT metro area\n",
            "✅ Saved model for Gadsden, AL metro area\n",
            "✅ Saved model for Mexico, MO metro area\n",
            "✅ Saved model for Glasgow, KY metro area\n",
            "✅ Saved model for Keene, NH metro area\n",
            "✅ Saved model for Grand Island, NE metro area\n",
            "✅ Saved model for Ludington, MI metro area\n",
            "✅ Saved model for Pullman, WA metro area\n",
            "✅ Saved model for McPherson, KS metro area\n",
            "✅ Saved model for Stockton, CA metro area\n",
            "✅ Saved model for New Orleans, LA metro area\n",
            "✅ Saved model for Rockingham, NC metro area\n",
            "✅ Saved model for Worthington, MN metro area\n",
            "✅ Saved model for Ardmore, OK metro area\n",
            "✅ Saved model for Ogden, UT metro area\n",
            "✅ Saved model for Vidalia, GA metro area\n",
            "✅ Saved model for Moberly, MO metro area\n",
            "✅ Saved model for Jacksonville, TX metro area\n",
            "✅ Saved model for Eagle Pass, TX metro area\n",
            "✅ Saved model for Akron, OH metro area\n",
            "✅ Saved model for St. Marys, PA metro area\n",
            "✅ Saved model for Cleveland, MS metro area\n",
            "✅ Saved model for Bemidji, MN metro area\n",
            "✅ Saved model for Sheridan, WY metro area\n",
            "✅ Saved model for Anaheim, CA metro area\n",
            "✅ Saved model for Austin, TX metro area\n",
            "✅ Saved model for Hinesville, GA metro area\n",
            "✅ Saved model for Fernley, NV metro area\n",
            "✅ Saved model for Wooster, OH metro area\n",
            "✅ Saved model for Gainesville, FL metro area\n",
            "✅ Saved model for McComb, MS metro area\n",
            "✅ Saved model for Jefferson, GA metro area\n",
            "✅ Saved model for Kinston, NC metro area\n",
            "✅ Saved model for Aberdeen, SD metro area\n",
            "✅ Saved model for Cordele, GA metro area\n",
            "✅ Saved model for Punta Gorda, FL metro area\n",
            "✅ Saved model for Cornelia, GA metro area\n",
            "✅ Saved model for Morgan City, LA metro area\n",
            "✅ Saved model for Kennett, MO metro area\n",
            "✅ Saved model for Woodward, OK metro area\n",
            "✅ Saved model for Burley, ID metro area\n",
            "✅ Saved model for Rexburg, ID metro area\n",
            "✅ Saved model for East Stroudsburg, PA metro area\n",
            "✅ Saved model for Eugene, OR metro area\n",
            "✅ Saved model for Madera, CA metro area\n",
            "✅ Saved model for Russellville, AR metro area\n",
            "✅ Saved model for Albemarle, NC metro area\n",
            "✅ Saved model for Tampa, FL metro area\n",
            "✅ Saved model for Berlin, NH metro area\n",
            "✅ Saved model for Orangeburg, SC metro area\n",
            "✅ Saved model for Crossville, TN metro area\n",
            "✅ Saved model for Boise City, ID metro area\n",
            "✅ Saved model for Johnstown, PA metro area\n",
            "✅ Saved model for Montgomery County, PA metro area\n",
            "✅ Saved model for Wahpeton, ND metro area\n",
            "✅ Saved model for Helena, AR metro area\n",
            "✅ Saved model for Marshall, MN metro area\n",
            "✅ Saved model for Lock Haven, PA metro area\n",
            "✅ Saved model for Columbus, MS metro area\n",
            "✅ Saved model for Cortland, NY metro area\n",
            "✅ Saved model for Texarkana, TX metro area\n",
            "✅ Saved model for Lebanon, MO metro area\n",
            "✅ Saved model for Dumas, TX metro area\n",
            "✅ Saved model for Lewisburg, TN metro area\n",
            "✅ Saved model for Rome, GA metro area\n",
            "✅ Saved model for Harrison, AR metro area\n",
            "✅ Saved model for Winona, MN metro area\n",
            "✅ Saved model for Big Stone Gap, VA metro area\n",
            "✅ Saved model for Hutchinson, KS metro area\n",
            "✅ Saved model for Fremont, OH metro area\n",
            "✅ Saved model for Sunbury, PA metro area\n",
            "✅ Saved model for Moses Lake, WA metro area\n",
            "✅ Saved model for Gardnerville Ranchos, NV metro area\n",
            "✅ Saved model for New Brunswick, NJ metro area\n",
            "✅ Saved model for Hilton Head Island, SC metro area\n",
            "✅ Saved model for Pensacola, FL metro area\n",
            "✅ Saved model for Douglas, GA metro area\n",
            "✅ Saved model for Henderson, NC metro area\n",
            "✅ Saved model for Amsterdam, NY metro area\n",
            "✅ Saved model for Huntsville, TX metro area\n",
            "✅ Saved model for Clewiston, FL metro area\n",
            "✅ Saved model for Stevens Point, WI metro area\n",
            "✅ Saved model for Midland, TX metro area\n",
            "✅ Saved model for Vernal, UT metro area\n",
            "✅ Saved model for Bainbridge, GA metro area\n",
            "✅ Saved model for Galesburg, IL metro area\n",
            "✅ Saved model for Owatonna, MN metro area\n",
            "✅ Saved model for Ottumwa, IA metro area\n",
            "✅ Saved model for Charleston, WV metro area\n",
            "✅ Saved model for Rolla, MO metro area\n",
            "✅ Saved model for Boone, NC metro area\n",
            "✅ Saved model for Ocala, FL metro area\n",
            "✅ Saved model for Summerville, GA metro area\n",
            "✅ Saved model for Vicksburg, MS metro area\n",
            "✅ Saved model for Bucyrus, OH metro area\n",
            "✅ Saved model for Plainview, TX metro area\n",
            "✅ Saved model for Martinsville, VA metro area\n",
            "✅ Saved model for Vernon, TX metro area\n",
            "✅ Saved model for Raymondville, TX metro area\n",
            "✅ Saved model for Moultrie, GA metro area\n",
            "✅ Saved model for Guymon, OK metro area\n",
            "✅ Saved model for Kalamazoo, MI metro area\n",
            "✅ Saved model for Lewiston, ME metro area\n",
            "✅ Saved model for Tacoma, WA metro area\n",
            "✅ Saved model for Nashville, TN metro area\n",
            "✅ Saved model for Newberry, SC metro area\n",
            "✅ Saved model for Oakland, CA metro area\n",
            "✅ Saved model for Laurinburg, NC metro area\n",
            "✅ Saved model for Bloomsburg, PA metro area\n",
            "✅ Saved model for Alexandria, LA metro area\n",
            "✅ Saved model for Danville, VA metro area\n",
            "✅ Saved model for Stillwater, OK metro area\n",
            "✅ Saved model for South Bend, IN metro area\n",
            "✅ Saved model for Mitchell, SD metro area\n",
            "✅ Saved model for North Vernon, IN metro area\n",
            "✅ Saved model for Las Vegas, NM metro area\n",
            "✅ Saved model for Safford, AZ metro area\n",
            "✅ Saved model for Oil City, PA metro area\n",
            "✅ Saved model for Mount Gay, WV metro area\n",
            "✅ Saved model for Sayre, PA metro area\n",
            "✅ Saved model for Bennettsville, SC metro area\n",
            "✅ Saved model for Campbellsville, KY metro area\n",
            "✅ Saved model for Morgantown, WV metro area\n",
            "✅ Saved model for Scottsbluff, NE metro area\n",
            "✅ Saved model for Lancaster, PA metro area\n",
            "✅ Saved model for Salina, KS metro area\n",
            "✅ Saved model for Lawton, OK metro area\n",
            "✅ Saved model for Memphis, TN metro area\n",
            "✅ Saved model for Waycross, GA metro area\n",
            "✅ Saved model for Fitzgerald, GA metro area\n",
            "✅ Saved model for Shelton, WA metro area\n",
            "✅ Saved model for Pecos, TX metro area\n",
            "✅ Saved model for Hereford, TX metro area\n",
            "✅ Saved model for Starkville, MS metro area\n",
            "✅ Saved model for Pocatello, ID metro area\n",
            "✅ Saved model for Greeley, CO metro area\n",
            "✅ Saved model for Yuma, AZ metro area\n",
            "✅ Saved model for Hermiston, OR metro area\n",
            "✅ Saved model for Wichita Falls, TX metro area\n",
            "✅ Saved model for Sulphur Springs, TX metro area\n",
            "✅ Saved model for Ontario, OR metro area\n",
            "✅ Saved model for Sierra Vista, AZ metro area\n",
            "✅ Saved model for Ketchikan, AK metro area\n",
            "✅ Saved model for Rio Grande City, TX metro area\n",
            "✅ Saved model for Port Lavaca, TX metro area\n",
            "✅ Saved model for El Campo, TX metro area\n",
            "✅ Saved model for Mayfield, KY metro area\n",
            "✅ Saved model for Brookings, SD metro area\n",
            "✅ Saved model for Eureka, CA metro area\n",
            "✅ Saved model for Pierre, SD metro area\n",
            "✅ Saved model for Owensboro, KY metro area\n",
            "✅ Saved model for Fairfield, IA metro area\n",
            "✅ Saved model for Vermillion, SD metro area\n",
            "✅ Saved model for Minden, LA metro area\n",
            "✅ Saved model for Warrensburg, MO metro area\n",
            "✅ Saved model for Point Pleasant, WV metro area\n",
            "✅ Saved model for Effingham, IL metro area\n",
            "✅ Saved model for Palestine, TX metro area\n",
            "✅ Saved model for Price, UT metro area\n",
            "✅ Saved model for Carroll, IA metro area\n",
            "✅ Saved model for Gainesville, TX metro area\n",
            "✅ Saved model for Mount Sterling, KY metro area\n",
            "✅ Saved model for Ponca City, OK metro area\n",
            "✅ Saved model for Dyersburg, TN metro area\n",
            "✅ Saved model for Indianapolis, IN metro area\n",
            "✅ Saved model for Newport, TN metro area\n",
            "✅ Saved model for Dublin, GA metro area\n",
            "✅ Saved model for Elk City, OK metro area\n",
            "✅ Saved model for Lawrenceburg, TN metro area\n",
            "✅ Saved model for Marion, OH metro area\n",
            "✅ Saved model for Natchez, MS metro area\n",
            "✅ Saved model for Alamogordo, NM metro area\n",
            "✅ Saved model for Bradford, PA metro area\n",
            "✅ Saved model for Española, NM metro area\n",
            "✅ Saved model for Snyder, TX metro area\n",
            "✅ Saved model for Indianola, MS metro area\n",
            "✅ Saved model for West Point, MS metro area\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import shutil\n",
        "\n",
        "shutil.make_archive(\"metro_models\", 'zip', \"/content/metro_models\")\n",
        "files.download(\"metro_models.zip\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 17
        },
        "id": "Furx6S73TTVB",
        "outputId": "29f3a96d-4fd9-475f-bcf7-7b8f2f000f5f"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "download(\"download_2b7219f8-7457-4730-83b5-71d5163cfa3e\", \"metro_models.zip\", 762541)"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## improving ML ##"
      ],
      "metadata": {
        "id": "5b_kpUzrw5KF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Install dependencies (uncomment if running fresh in Colab)\n",
        "# !pip install gdown xgboost scikit-learn --quiet\n",
        "\n",
        "import gdown\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from xgboost import XGBRegressor\n",
        "from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\n",
        "\n",
        "# 1) Download the data from Google Drive\n",
        "DRIVE_ID = \"1tASwRQrSNs9689v-6PY0KcA2qOPiyg03\"\n",
        "URL      = f\"https://drive.google.com/uc?export=download&id={DRIVE_ID}\"\n",
        "OUTPUT   = \"metro_data.tsv\"\n",
        "gdown.download(URL, OUTPUT, quiet=False)\n",
        "\n",
        "# 2) Load & clean the TSV (UTF-16 encoding)\n",
        "df = pd.read_csv(OUTPUT, sep=\"\\t\", encoding=\"utf-16\", low_memory=False)\n",
        "\n",
        "# 3) Normalize column names\n",
        "df.columns = df.columns.str.strip().str.lower().str.replace(\" \", \"_\")\n",
        "\n",
        "# 4) Parse the date from 'month_of_period_end' (e.g. \"January 2025\")\n",
        "df[\"date\"] = pd.to_datetime(df[\"month_of_period_end\"], format=\"%B %Y\", errors=\"coerce\")\n",
        "\n",
        "# 5) Convert 'median_sale_price' strings like \"$159K\" to numeric\n",
        "def parse_price(x):\n",
        "    if pd.isna(x):\n",
        "        return np.nan\n",
        "    s = str(x).replace(\"$\", \"\").replace(\",\", \"\").upper()\n",
        "    if s.endswith(\"K\"):\n",
        "        return float(s[:-1]) * 1_000\n",
        "    if s.endswith(\"M\"):\n",
        "        return float(s[:-1]) * 1_000_000\n",
        "    return pd.to_numeric(s, errors=\"coerce\")\n",
        "\n",
        "df[\"price\"] = df[\"median_sale_price\"].apply(parse_price)\n",
        "\n",
        "# 6) Drop rows missing date or price, sort, and reset index\n",
        "df = (\n",
        "    df.dropna(subset=[\"date\", \"price\"])\n",
        "      .sort_values([\"region\", \"date\"])\n",
        "      .reset_index(drop=True)\n",
        ")\n",
        "\n",
        "# 7) Feature engineering: log price and lags/rolling average\n",
        "df[\"log_price\"] = np.log(df[\"price\"])\n",
        "df[\"lag1\"]      = df.groupby(\"region\")[\"log_price\"].shift(1)\n",
        "df[\"lag12\"]     = df.groupby(\"region\")[\"log_price\"].shift(12)\n",
        "df[\"roll3\"]     = (\n",
        "    df.groupby(\"region\")[\"log_price\"]\n",
        "      .rolling(3)\n",
        "      .mean()\n",
        "      .reset_index(0, drop=True)\n",
        ")\n",
        "\n",
        "# 8) Keep only rows with all required features\n",
        "df_model = df.dropna(subset=[\"lag1\", \"lag12\", \"roll3\"]).copy()\n",
        "\n",
        "# 9) One-hot encode the 'region' column for a global model\n",
        "region_dummies = pd.get_dummies(df_model[\"region\"], prefix=\"region\", drop_first=True)\n",
        "df_model = pd.concat([df_model, region_dummies], axis=1)\n",
        "\n",
        "# 10) Train/test split by date (train < 2024-01-01, test >= 2024-01-01)\n",
        "train = df_model[df_model[\"date\"] < \"2024-01-01\"]\n",
        "test  = df_model[df_model[\"date\"] >= \"2024-01-01\"]\n",
        "\n",
        "features = [\"lag1\", \"lag12\", \"roll3\"] + list(region_dummies.columns)\n",
        "X_train, y_train = train[features], train[\"log_price\"]\n",
        "X_test,  y_test  = test[features],  test[\"log_price\"]\n",
        "\n",
        "# 11) Instantiate and train XGBoost on log‐price\n",
        "model = XGBRegressor(\n",
        "    n_estimators=300,\n",
        "    max_depth=4,\n",
        "    learning_rate=0.05,\n",
        "    subsample=0.8,\n",
        "    colsample_bytree=0.8,\n",
        "    random_state=42,\n",
        "    tree_method=\"hist\",\n",
        "    eval_metric=\"rmse\"\n",
        ")\n",
        "model.fit(X_train, y_train)\n",
        "\n",
        "# --- NEW: export the trained booster in native format ---\n",
        "booster = model.get_booster()\n",
        "booster.save_model(\"xgb_model.ubj\")    # UBJ binary format\n",
        "# booster.save_model(\"xgb_model.json\") # optional JSON format\n",
        "\n",
        "# If running in Colab, download the UBJ file:\n",
        "try:\n",
        "    from google.colab import files\n",
        "    files.download(\"xgb_model.ubj\")\n",
        "except ImportError:\n",
        "    pass\n",
        "\n",
        "# 12) Predict and transform back from log‐price\n",
        "y_pred_log = model.predict(X_test)\n",
        "y_pred     = np.exp(y_pred_log)\n",
        "y_actual   = np.exp(y_test)\n",
        "\n",
        "# 13) Evaluate model performance\n",
        "mae  = mean_absolute_error(y_actual, y_pred)\n",
        "rmse = mean_squared_error(y_actual, y_pred) ** 0.5\n",
        "mape = np.mean(np.abs((y_pred - y_actual) / y_actual)) * 100\n",
        "r2   = r2_score(y_actual, y_pred)\n",
        "\n",
        "print(f\"Test MAE:  ${mae:,.0f}\")\n",
        "print(f\"Test RMSE: ${rmse:,.0f}\")\n",
        "print(f\"Test MAPE: {mape:.2f}%\")\n",
        "print(f\"Test R²:   {r2:.3f}\")\n",
        "print(f\"Min Predicted Price: ${y_pred.min():,.0f}\\n\")\n",
        "\n",
        "# 14) Display the first 100 actual vs. predicted values\n",
        "comparison = pd.DataFrame({\n",
        "    \"Date\":      test[\"date\"].dt.strftime(\"%Y-%m\"),\n",
        "    \"Region\":    test[\"region\"],\n",
        "    \"Actual\":    y_actual.values,\n",
        "    \"Predicted\": y_pred\n",
        "})\n",
        "print(comparison.head(100).to_string(index=False))\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "MOJEi7ch4yh6",
        "outputId": "d0cb70bb-714a-46c0-b2c8-92acd43075f6"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Downloading...\n",
            "From: https://drive.google.com/uc?export=download&id=1tASwRQrSNs9689v-6PY0KcA2qOPiyg03\n",
            "To: /content/metro_data.tsv\n",
            "100%|██████████| 296k/296k [00:00<00:00, 74.0MB/s]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "download(\"download_7bc16495-a549-4ad7-8013-e1283f96b006\", \"xgb_model.ubj\", 466690)"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Test MAE:  $11,922\n",
            "Test RMSE: $16,225\n",
            "Test MAPE: 2.05%\n",
            "Test R²:   0.995\n",
            "Min Predicted Price: $251,203\n",
            "\n",
            "   Date                      Region   Actual     Predicted\n",
            "2024-01                    National 402000.0 404118.312500\n",
            "2024-02                    National 412000.0 409130.343750\n",
            "2024-03                    National 421000.0 416641.468750\n",
            "2024-04                    National 432000.0 423118.281250\n",
            "2024-05                    National 438000.0 439746.062500\n",
            "2024-06                    National 443000.0 446844.468750\n",
            "2024-07                    National 438000.0 448806.062500\n",
            "2024-08                    National 433000.0 445229.343750\n",
            "2024-09                    National 428000.0 436699.406250\n",
            "2024-10                    National 434000.0 435486.281250\n",
            "2024-11                    National 430000.0 436132.125000\n",
            "2024-12                    National 428000.0 434494.000000\n",
            "2025-01                    National 418000.0 428553.968750\n",
            "2025-02                    National 425000.0 425000.468750\n",
            "2025-03                    National 431000.0 432527.312500\n",
            "2024-01       Boston, MA metro area 675000.0 670183.000000\n",
            "2024-02       Boston, MA metro area 665000.0 667758.062500\n",
            "2024-03       Boston, MA metro area 710000.0 691976.687500\n",
            "2024-04       Boston, MA metro area 714000.0 711547.062500\n",
            "2024-05       Boston, MA metro area 735000.0 729645.312500\n",
            "2024-06       Boston, MA metro area 772000.0 727563.500000\n",
            "2024-07       Boston, MA metro area 750000.0 752974.750000\n",
            "2024-08       Boston, MA metro area 730000.0 753900.875000\n",
            "2024-09       Boston, MA metro area 705000.0 728009.062500\n",
            "2024-10       Boston, MA metro area 710000.0 729326.625000\n",
            "2024-11       Boston, MA metro area 710000.0 713291.812500\n",
            "2024-12       Boston, MA metro area 724000.0 724620.562500\n",
            "2025-01       Boston, MA metro area 719000.0 728546.687500\n",
            "2025-02       Boston, MA metro area 705000.0 726386.250000\n",
            "2025-03       Boston, MA metro area 726000.0 717241.312500\n",
            "2024-01      Chicago, IL metro area 313000.0 306623.875000\n",
            "2024-02      Chicago, IL metro area 318000.0 309438.968750\n",
            "2024-03      Chicago, IL metro area 339000.0 323323.000000\n",
            "2024-04      Chicago, IL metro area 349000.0 339521.468750\n",
            "2024-05      Chicago, IL metro area 355000.0 351621.093750\n",
            "2024-06      Chicago, IL metro area 375000.0 358472.093750\n",
            "2024-07      Chicago, IL metro area 365000.0 365033.687500\n",
            "2024-08      Chicago, IL metro area 352000.0 362552.750000\n",
            "2024-09      Chicago, IL metro area 350000.0 352293.406250\n",
            "2024-10      Chicago, IL metro area 340000.0 348134.625000\n",
            "2024-11      Chicago, IL metro area 349000.0 352282.312500\n",
            "2024-12      Chicago, IL metro area 340000.0 336688.187500\n",
            "2025-01      Chicago, IL metro area 335000.0 338779.812500\n",
            "2025-02      Chicago, IL metro area 345000.0 338252.968750\n",
            "2025-03      Chicago, IL metro area 360000.0 352789.968750\n",
            "2024-01  Los Angeles, CA metro area 842000.0 850864.250000\n",
            "2024-02  Los Angeles, CA metro area 875000.0 858965.937500\n",
            "2024-03  Los Angeles, CA metro area 875000.0 863075.687500\n",
            "2024-04  Los Angeles, CA metro area 900000.0 873316.875000\n",
            "2024-05  Los Angeles, CA metro area 907000.0 884110.187500\n",
            "2024-06  Los Angeles, CA metro area 925000.0 883120.062500\n",
            "2024-07  Los Angeles, CA metro area 920000.0 883120.062500\n",
            "2024-08  Los Angeles, CA metro area 900000.0 883120.062500\n",
            "2024-09  Los Angeles, CA metro area 885000.0 883120.062500\n",
            "2024-10  Los Angeles, CA metro area 900000.0 873302.625000\n",
            "2024-11  Los Angeles, CA metro area 899000.0 883120.062500\n",
            "2024-12  Los Angeles, CA metro area 904000.0 873984.250000\n",
            "2025-01  Los Angeles, CA metro area 883000.0 884110.187500\n",
            "2025-02  Los Angeles, CA metro area 920000.0 873302.625000\n",
            "2025-03  Los Angeles, CA metro area 925000.0 883120.062500\n",
            "2024-01 Philadelphia, PA metro area 260000.0 251203.375000\n",
            "2024-02 Philadelphia, PA metro area 255000.0 253058.437500\n",
            "2024-03 Philadelphia, PA metro area 270000.0 258078.640625\n",
            "2024-04 Philadelphia, PA metro area 275000.0 264487.906250\n",
            "2024-05 Philadelphia, PA metro area 280000.0 277374.812500\n",
            "2024-06 Philadelphia, PA metro area 302000.0 284192.875000\n",
            "2024-07 Philadelphia, PA metro area 300000.0 295972.406250\n",
            "2024-08 Philadelphia, PA metro area 299000.0 293520.750000\n",
            "2024-09 Philadelphia, PA metro area 275000.0 286168.406250\n",
            "2024-10 Philadelphia, PA metro area 280000.0 280808.250000\n",
            "2024-11 Philadelphia, PA metro area 280000.0 271530.625000\n",
            "2024-12 Philadelphia, PA metro area 280000.0 271299.500000\n",
            "2025-01 Philadelphia, PA metro area 260000.0 267177.968750\n",
            "2025-02 Philadelphia, PA metro area 273000.0 268329.593750\n",
            "2025-03 Philadelphia, PA metro area 285000.0 273345.750000\n",
            "2024-01      Seattle, WA metro area 749000.0 758242.187500\n",
            "2024-02      Seattle, WA metro area 798000.0 764484.437500\n",
            "2024-03      Seattle, WA metro area 825000.0 778803.875000\n",
            "2024-04      Seattle, WA metro area 850000.0 822016.250000\n",
            "2024-05      Seattle, WA metro area 860000.0 846925.687500\n",
            "2024-06      Seattle, WA metro area 850000.0 846720.562500\n",
            "2024-07      Seattle, WA metro area 850000.0 851185.687500\n",
            "2024-08      Seattle, WA metro area 826000.0 832258.937500\n",
            "2024-09      Seattle, WA metro area 825000.0 825824.687500\n",
            "2024-10      Seattle, WA metro area 840000.0 825824.687500\n",
            "2024-11      Seattle, WA metro area 815000.0 822133.000000\n",
            "2024-12      Seattle, WA metro area 788000.0 809347.687500\n",
            "2025-01      Seattle, WA metro area 775000.0 780640.562500\n",
            "2025-02      Seattle, WA metro area 800000.0 784311.250000\n",
            "2025-03      Seattle, WA metro area 830000.0 793156.937500\n",
            "2024-01   Washington, DC metro area 510000.0 520263.781250\n",
            "2024-02   Washington, DC metro area 535000.0 520621.125000\n",
            "2024-03   Washington, DC metro area 555000.0 533818.875000\n",
            "2024-04   Washington, DC metro area 576000.0 561330.312500\n",
            "2024-05   Washington, DC metro area 586000.0 575421.687500\n",
            "2024-06   Washington, DC metro area 590000.0 581761.125000\n",
            "2024-07   Washington, DC metro area 575000.0 581924.750000\n",
            "2024-08   Washington, DC metro area 563000.0 580016.062500\n",
            "2024-09   Washington, DC metro area 560000.0 560494.187500\n",
            "2024-10   Washington, DC metro area 560000.0 563805.187500\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import joblib\n",
        "\n",
        "# Save the trained XGBoost model to a file\n",
        "MODEL_FILENAME = \"xgb_log_price_model.pkl\"\n",
        "joblib.dump(model, MODEL_FILENAME)\n",
        "print(f\"✅ Model saved to {MODEL_FILENAME}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_GhGr3US5PYu",
        "outputId": "5045f192-b0d8-4b1d-a8a7-e2f10fad2aa8"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ Model saved to xgb_log_price_model.pkl\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import files\n",
        "files.download(MODEL_FILENAME)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 17
        },
        "id": "oDXsVzn15SCO",
        "outputId": "ef0e7831-3800-454e-d3f8-08b56d8ae7e5"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "download(\"download_1d797a28-c37f-48be-bfa7-44305acf2aaa\", \"xgb_log_price_model.pkl\", 470047)"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 1) After model.fit(…), export to native XGBoost format\n",
        "booster = model.get_booster()\n",
        "\n",
        "# Save binary model (UBJ format)\n",
        "booster.save_model(\"xgb_model.ubj\")\n",
        "\n",
        "# Or save as JSON (human‐readable, but larger)\n",
        "booster.save_model(\"xgb_model.json\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 211
        },
        "id": "rvedmUes21LQ",
        "outputId": "3963b8f0-1c55-49cf-968e-4ce859b2b3bb"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'model' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-1-292d4fe13858>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# 1) After model.fit(…), export to native XGBoost format\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mbooster\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_booster\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;31m# Save binary model (UBJ format)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mbooster\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msave_model\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"xgb_model.ubj\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'model' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Colab cell: retrain with scikit-learn\n",
        "!pip install gdown scikit-learn --quiet\n",
        "\n",
        "import gdown\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.ensemble import HistGradientBoostingRegressor\n",
        "from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\n",
        "import joblib\n",
        "\n",
        "# 1) Download & load\n",
        "DRIVE_ID = \"1tASwRQrSNs9689v-6PY0KcA2qOPiyg03\"\n",
        "gdown.download(\n",
        "    f\"https://drive.google.com/uc?export=download&id={DRIVE_ID}\",\n",
        "    \"metro_data.tsv\", quiet=False\n",
        ")\n",
        "df = pd.read_csv(\"metro_data.tsv\", sep=\"\\t\", encoding=\"utf-16\", low_memory=False)\n",
        "df.columns = df.columns.str.strip().str.lower().str.replace(\" \", \"_\")\n",
        "df[\"date\"] = pd.to_datetime(df[\"month_of_period_end\"], format=\"%B %Y\", errors=\"coerce\")\n",
        "\n",
        "# 2) Parse & clean price\n",
        "def parse_price(x):\n",
        "    if pd.isna(x): return np.nan\n",
        "    s = str(x).replace(\"$\",\"\").replace(\",\",\"\").upper()\n",
        "    if s.endswith(\"K\"): return float(s[:-1])*1_000\n",
        "    if s.endswith(\"M\"): return float(s[:-1])*1_000_000\n",
        "    return pd.to_numeric(s, errors=\"coerce\")\n",
        "\n",
        "df[\"price\"] = df[\"median_sale_price\"].apply(parse_price)\n",
        "df = df.dropna(subset=[\"date\",\"price\"]).sort_values([\"region\",\"date\"]).reset_index(drop=True)\n",
        "\n",
        "# 3) Feature engineer\n",
        "df[\"log_price\"] = np.log(df[\"price\"])\n",
        "df[\"lag1\"]      = df.groupby(\"region\")[\"log_price\"].shift(1)\n",
        "df[\"lag12\"]     = df.groupby(\"region\")[\"log_price\"].shift(12)\n",
        "df[\"roll3\"]     = df.groupby(\"region\")[\"log_price\"].rolling(3).mean().reset_index(0,drop=True)\n",
        "df = df.dropna(subset=[\"lag1\",\"lag12\",\"roll3\"])\n",
        "dummies = pd.get_dummies(df[\"region\"], prefix=\"region\", drop_first=True)\n",
        "df = pd.concat([df, dummies], axis=1)\n",
        "\n",
        "# 4) Train/test split\n",
        "df_train = df[df[\"date\"] < \"2024-01-01\"]\n",
        "df_test  = df[df[\"date\"] >= \"2024-01-01\"]\n",
        "features = [\"lag1\",\"lag12\",\"roll3\"] + list(dummies.columns)\n",
        "\n",
        "X_train, y_train = df_train[features], df_train[\"log_price\"]\n",
        "X_test,  y_test  = df_test[features],  df_test[\"log_price\"]\n",
        "\n",
        "# 5) Train HistGBR\n",
        "model = HistGradientBoostingRegressor(\n",
        "    max_iter=300,\n",
        "    max_depth=6,\n",
        "    learning_rate=0.05,\n",
        "    random_state=42\n",
        ")\n",
        "model.fit(X_train, y_train)\n",
        "\n",
        "# 6) Save the model\n",
        "joblib.dump(model, \"hgb_log_price_model.pkl\")\n",
        "from google.colab import files\n",
        "files.download(\"hgb_log_price_model.pkl\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 86
        },
        "id": "q-UdltzjKFjz",
        "outputId": "eb0f6c0b-cc26-481d-fe0d-58cd6dd32f8f"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Downloading...\n",
            "From: https://drive.google.com/uc?export=download&id=1tASwRQrSNs9689v-6PY0KcA2qOPiyg03\n",
            "To: /content/metro_data.tsv\n",
            "100%|██████████| 296k/296k [00:00<00:00, 35.2MB/s]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "download(\"download_297013c4-84ba-4d3e-88f2-528263d474ad\", \"hgb_log_price_model.pkl\", 595328)"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Install dependencies (run once in a fresh Colab session)\n",
        "!pip install gdown scikit-learn --quiet\n",
        "\n",
        "import gdown\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import joblib\n",
        "from sklearn.ensemble import HistGradientBoostingRegressor\n",
        "from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\n",
        "\n",
        "# 1) Download the metro data TSV from Google Drive\n",
        "DRIVE_ID = \"1tASwRQrSNs9689v-6PY0KcA2qOPiyg03\"\n",
        "URL      = f\"https://drive.google.com/uc?export=download&id={DRIVE_ID}\"\n",
        "OUTPUT   = \"metro_data.tsv\"\n",
        "gdown.download(URL, OUTPUT, quiet=False)\n",
        "\n",
        "# 2) Load & clean the TSV (UTF-16)\n",
        "df = pd.read_csv(OUTPUT, sep=\"\\t\", encoding=\"utf-16\", low_memory=False)\n",
        "\n",
        "# 3) Normalize column names\n",
        "df.columns = df.columns.str.strip().str.lower().str.replace(\" \", \"_\")\n",
        "\n",
        "# 4) Parse the date from 'month_of_period_end'\n",
        "df[\"date\"] = pd.to_datetime(df[\"month_of_period_end\"], format=\"%B %Y\", errors=\"coerce\")\n",
        "\n",
        "# 5) Convert 'median_sale_price' like \"$159K\" → numeric\n",
        "def parse_price(x):\n",
        "    if pd.isna(x): return np.nan\n",
        "    s = str(x).replace(\"$\",\"\").replace(\",\",\"\").upper()\n",
        "    if s.endswith(\"K\"): return float(s[:-1]) * 1_000\n",
        "    if s.endswith(\"M\"): return float(s[:-1]) * 1_000_000\n",
        "    return pd.to_numeric(s, errors=\"coerce\")\n",
        "\n",
        "df[\"price\"] = df[\"median_sale_price\"].apply(parse_price)\n",
        "\n",
        "# 6) Drop missing, sort, reset index\n",
        "df = (\n",
        "    df.dropna(subset=[\"date\",\"price\"])\n",
        "      .sort_values([\"region\",\"date\"])\n",
        "      .reset_index(drop=True)\n",
        ")\n",
        "\n",
        "# 7) Feature engineering (4 features: lag1, lag12, roll3, log_price)\n",
        "df[\"log_price\"] = np.log(df[\"price\"])\n",
        "grp = df.groupby(\"region\")[\"log_price\"]\n",
        "df[\"lag1\"]  = grp.shift(1)\n",
        "df[\"lag12\"] = grp.shift(12)\n",
        "df[\"roll3\"] = grp.rolling(3).mean().reset_index(0,drop=True)\n",
        "\n",
        "df_model = df.dropna(subset=[\"lag1\",\"lag12\",\"roll3\"]).copy()\n",
        "\n",
        "# 8) Split train/test by date\n",
        "train = df_model[df_model[\"date\"] < \"2024-01-01\"]\n",
        "test  = df_model[df_model[\"date\"] >= \"2024-01-01\"]\n",
        "\n",
        "features = [\"lag1\",\"lag12\",\"roll3\"]\n",
        "X_train, y_train = train[features], train[\"log_price\"]\n",
        "X_test,  y_test  = test[features],  test[\"log_price\"]\n",
        "\n",
        "# 9) Train HistGradientBoostingRegressor on log_price\n",
        "model = HistGradientBoostingRegressor(\n",
        "    max_iter=300,\n",
        "    max_depth=6,\n",
        "    learning_rate=0.05,\n",
        "    random_state=42\n",
        ")\n",
        "model.fit(X_train, y_train)\n",
        "\n",
        "# 10) Predict & inverse-transform from log_price\n",
        "y_pred_log = model.predict(X_test)\n",
        "y_pred     = np.exp(y_pred_log)\n",
        "y_true     = np.exp(y_test)\n",
        "\n",
        "# 11) Evaluate performance\n",
        "mae  = mean_absolute_error(y_true, y_pred)\n",
        "rmse = mean_squared_error(y_true, y_pred) ** 0.5\n",
        "mape = (np.abs(y_pred - y_true) / y_true).mean() * 100\n",
        "r2   = r2_score(y_true, y_pred)\n",
        "\n",
        "print(f\"Test MAE:  ${mae:,.0f}\")\n",
        "print(f\"Test RMSE: ${rmse:,.0f}\")\n",
        "print(f\"Test MAPE: {mape:.2f}%\")\n",
        "print(f\"Test R²:   {r2:.3f}\")\n",
        "print(f\"Min Predicted Price: ${y_pred.min():,.0f}\\n\")\n",
        "\n",
        "# 12) Show first 100 actual vs predicted\n",
        "comparison = pd.DataFrame({\n",
        "    \"Date\":      test[\"date\"].dt.strftime(\"%Y-%m\"),\n",
        "    \"Region\":    test[\"region\"],\n",
        "    \"Actual\":    y_true.values,\n",
        "    \"Predicted\": y_pred\n",
        "})\n",
        "print(comparison.head(100).to_string(index=False))\n",
        "\n",
        "# 13) Save the trained model (4-feature HGB) for deployment\n",
        "joblib.dump(model, \"hgb_4feat_model.pkl\")\n",
        "from google.colab import files\n",
        "files.download(\"hgb_4feat_model.pkl\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "63cHApZ7TVEB",
        "outputId": "06c52bb7-0c2e-4ddb-c6f3-65f356c86bd5"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Downloading...\n",
            "From: https://drive.google.com/uc?export=download&id=1tASwRQrSNs9689v-6PY0KcA2qOPiyg03\n",
            "To: /content/metro_data.tsv\n",
            "100%|██████████| 296k/296k [00:00<00:00, 5.36MB/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Test MAE:  $15,761\n",
            "Test RMSE: $21,813\n",
            "Test MAPE: 2.49%\n",
            "Test R²:   0.990\n",
            "Min Predicted Price: $250,106\n",
            "\n",
            "   Date                      Region   Actual     Predicted\n",
            "2024-01                    National 402000.0 401952.800821\n",
            "2024-02                    National 412000.0 407865.305025\n",
            "2024-03                    National 421000.0 417036.097789\n",
            "2024-04                    National 432000.0 424303.980900\n",
            "2024-05                    National 438000.0 439883.156335\n",
            "2024-06                    National 443000.0 451399.935161\n",
            "2024-07                    National 438000.0 447222.089328\n",
            "2024-08                    National 433000.0 447662.809526\n",
            "2024-09                    National 428000.0 439022.198724\n",
            "2024-10                    National 434000.0 438713.611851\n",
            "2024-11                    National 430000.0 438492.790810\n",
            "2024-12                    National 428000.0 438633.030335\n",
            "2025-01                    National 418000.0 432242.860883\n",
            "2025-02                    National 425000.0 433615.184684\n",
            "2025-03                    National 431000.0 434147.596159\n",
            "2024-01       Boston, MA metro area 675000.0 673656.025233\n",
            "2024-02       Boston, MA metro area 665000.0 675094.052946\n",
            "2024-03       Boston, MA metro area 710000.0 682072.148970\n",
            "2024-04       Boston, MA metro area 714000.0 718594.356642\n",
            "2024-05       Boston, MA metro area 735000.0 728463.097157\n",
            "2024-06       Boston, MA metro area 772000.0 728567.773841\n",
            "2024-07       Boston, MA metro area 750000.0 768306.484797\n",
            "2024-08       Boston, MA metro area 730000.0 768841.003204\n",
            "2024-09       Boston, MA metro area 705000.0 730202.051155\n",
            "2024-10       Boston, MA metro area 710000.0 728807.716150\n",
            "2024-11       Boston, MA metro area 710000.0 718594.356642\n",
            "2024-12       Boston, MA metro area 724000.0 728807.716150\n",
            "2025-01       Boston, MA metro area 719000.0 729224.266217\n",
            "2025-02       Boston, MA metro area 705000.0 729224.266217\n",
            "2025-03       Boston, MA metro area 726000.0 719002.000835\n",
            "2024-01      Chicago, IL metro area 313000.0 306906.146317\n",
            "2024-02      Chicago, IL metro area 318000.0 313138.868019\n",
            "2024-03      Chicago, IL metro area 339000.0 323730.611973\n",
            "2024-04      Chicago, IL metro area 349000.0 339665.107908\n",
            "2024-05      Chicago, IL metro area 355000.0 353046.328915\n",
            "2024-06      Chicago, IL metro area 375000.0 363589.054972\n",
            "2024-07      Chicago, IL metro area 365000.0 359436.890145\n",
            "2024-08      Chicago, IL metro area 352000.0 359039.261176\n",
            "2024-09      Chicago, IL metro area 350000.0 354277.251212\n",
            "2024-10      Chicago, IL metro area 340000.0 348786.230175\n",
            "2024-11      Chicago, IL metro area 349000.0 351297.982505\n",
            "2024-12      Chicago, IL metro area 340000.0 346218.216274\n",
            "2025-01      Chicago, IL metro area 335000.0 339562.085276\n",
            "2025-02      Chicago, IL metro area 345000.0 340918.048536\n",
            "2025-03      Chicago, IL metro area 360000.0 353518.386927\n",
            "2024-01  Los Angeles, CA metro area 842000.0 859909.644321\n",
            "2024-02  Los Angeles, CA metro area 875000.0 859909.644321\n",
            "2024-03  Los Angeles, CA metro area 875000.0 859909.644321\n",
            "2024-04  Los Angeles, CA metro area 900000.0 859909.644321\n",
            "2024-05  Los Angeles, CA metro area 907000.0 859909.644321\n",
            "2024-06  Los Angeles, CA metro area 925000.0 859909.644321\n",
            "2024-07  Los Angeles, CA metro area 920000.0 859909.644321\n",
            "2024-08  Los Angeles, CA metro area 900000.0 859909.644321\n",
            "2024-09  Los Angeles, CA metro area 885000.0 859909.644321\n",
            "2024-10  Los Angeles, CA metro area 900000.0 859909.644321\n",
            "2024-11  Los Angeles, CA metro area 899000.0 859909.644321\n",
            "2024-12  Los Angeles, CA metro area 904000.0 859909.644321\n",
            "2025-01  Los Angeles, CA metro area 883000.0 859909.644321\n",
            "2025-02  Los Angeles, CA metro area 920000.0 859909.644321\n",
            "2025-03  Los Angeles, CA metro area 925000.0 859909.644321\n",
            "2024-01 Philadelphia, PA metro area 260000.0 250106.364382\n",
            "2024-02 Philadelphia, PA metro area 255000.0 250944.608016\n",
            "2024-03 Philadelphia, PA metro area 270000.0 265019.691088\n",
            "2024-04 Philadelphia, PA metro area 275000.0 270089.803442\n",
            "2024-05 Philadelphia, PA metro area 280000.0 279678.291826\n",
            "2024-06 Philadelphia, PA metro area 302000.0 287272.203353\n",
            "2024-07 Philadelphia, PA metro area 300000.0 297357.790035\n",
            "2024-08 Philadelphia, PA metro area 299000.0 296633.838660\n",
            "2024-09 Philadelphia, PA metro area 275000.0 288601.856502\n",
            "2024-10 Philadelphia, PA metro area 280000.0 285489.417257\n",
            "2024-11 Philadelphia, PA metro area 280000.0 274702.579672\n",
            "2024-12 Philadelphia, PA metro area 280000.0 275945.058037\n",
            "2025-01 Philadelphia, PA metro area 260000.0 269808.494101\n",
            "2025-02 Philadelphia, PA metro area 273000.0 271237.543409\n",
            "2025-03 Philadelphia, PA metro area 285000.0 273746.913729\n",
            "2024-01      Seattle, WA metro area 749000.0 768463.563231\n",
            "2024-02      Seattle, WA metro area 798000.0 768841.003204\n",
            "2024-03      Seattle, WA metro area 825000.0 782649.905882\n",
            "2024-04      Seattle, WA metro area 850000.0 832648.407979\n",
            "2024-05      Seattle, WA metro area 860000.0 859909.644321\n",
            "2024-06      Seattle, WA metro area 850000.0 859909.644321\n",
            "2024-07      Seattle, WA metro area 850000.0 857107.647256\n",
            "2024-08      Seattle, WA metro area 826000.0 859909.644321\n",
            "2024-09      Seattle, WA metro area 825000.0 857107.647256\n",
            "2024-10      Seattle, WA metro area 840000.0 832648.407979\n",
            "2024-11      Seattle, WA metro area 815000.0 857107.647256\n",
            "2024-12      Seattle, WA metro area 788000.0 820008.206375\n",
            "2025-01      Seattle, WA metro area 775000.0 782649.905882\n",
            "2025-02      Seattle, WA metro area 800000.0 797312.264380\n",
            "2025-03      Seattle, WA metro area 830000.0 797312.264380\n",
            "2024-01   Washington, DC metro area 510000.0 526118.689354\n",
            "2024-02   Washington, DC metro area 535000.0 528237.917010\n",
            "2024-03   Washington, DC metro area 555000.0 536733.309998\n",
            "2024-04   Washington, DC metro area 576000.0 565126.541995\n",
            "2024-05   Washington, DC metro area 586000.0 572842.718169\n",
            "2024-06   Washington, DC metro area 590000.0 586103.256705\n",
            "2024-07   Washington, DC metro area 575000.0 586341.923923\n",
            "2024-08   Washington, DC metro area 563000.0 583196.111496\n",
            "2024-09   Washington, DC metro area 560000.0 567241.285948\n",
            "2024-10   Washington, DC metro area 560000.0 570292.691278\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "download(\"download_f2f599a7-0418-4526-adc1-c7154df0e85a\", \"hgb_4feat_model.pkl\", 577568)"
            ]
          },
          "metadata": {}
        }
      ]
    }
  ]
}